{"ast":null,"code":"/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ARIAQueryHandler } from './AriaQueryHandler.js';\nimport { customQueryHandlers } from './CustomQueryHandler.js';\nimport { PierceQueryHandler } from './PierceQueryHandler.js';\nimport { PQueryHandler } from './PQueryHandler.js';\nimport { TextQueryHandler } from './TextQueryHandler.js';\nimport { XPathQueryHandler } from './XPathQueryHandler.js';\nexport const BUILTIN_QUERY_HANDLERS = Object.freeze({\n  aria: ARIAQueryHandler,\n  pierce: PierceQueryHandler,\n  xpath: XPathQueryHandler,\n  text: TextQueryHandler\n});\nconst QUERY_SEPARATORS = ['=', '/'];\n/**\n * @internal\n */\nexport function getQueryHandlerByName(name) {\n  if (name in BUILTIN_QUERY_HANDLERS) {\n    return BUILTIN_QUERY_HANDLERS[name];\n  }\n  return customQueryHandlers.get(name);\n}\n/**\n * @internal\n */\nexport function getQueryHandlerAndSelector(selector) {\n  for (const handlerMap of [customQueryHandlers.names().map(name => {\n    return [name, customQueryHandlers.get(name)];\n  }), Object.entries(BUILTIN_QUERY_HANDLERS)]) {\n    for (const [name, QueryHandler] of handlerMap) {\n      for (const separator of QUERY_SEPARATORS) {\n        const prefix = `${name}${separator}`;\n        if (selector.startsWith(prefix)) {\n          selector = selector.slice(prefix.length);\n          return {\n            updatedSelector: selector,\n            QueryHandler\n          };\n        }\n      }\n    }\n  }\n  return {\n    updatedSelector: selector,\n    QueryHandler: PQueryHandler\n  };\n}","map":{"version":3,"names":["ARIAQueryHandler","customQueryHandlers","PierceQueryHandler","PQueryHandler","TextQueryHandler","XPathQueryHandler","BUILTIN_QUERY_HANDLERS","Object","freeze","aria","pierce","xpath","text","QUERY_SEPARATORS","getQueryHandlerByName","name","get","getQueryHandlerAndSelector","selector","handlerMap","names","map","entries","QueryHandler","separator","prefix","startsWith","slice","length","updatedSelector"],"sources":["../../../../src/common/GetQueryHandler.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAAQA,gBAAgB,QAAO,uBAAuB;AACtD,SAAQC,mBAAmB,QAAO,yBAAyB;AAC3D,SAAQC,kBAAkB,QAAO,yBAAyB;AAC1D,SAAQC,aAAa,QAAO,oBAAoB;AAEhD,SAAQC,gBAAgB,QAAO,uBAAuB;AACtD,SAAQC,iBAAiB,QAAO,wBAAwB;AAExD,OAAO,MAAMC,sBAAsB,GAAGC,MAAM,CAACC,MAAM,CAAC;EAClDC,IAAI,EAAET,gBAAgB;EACtBU,MAAM,EAAER,kBAAkB;EAC1BS,KAAK,EAAEN,iBAAiB;EACxBO,IAAI,EAAER;CACP,CAAC;AAEF,MAAMS,gBAAgB,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;AAEnC;;;AAGA,OAAM,SAAUC,qBAAqBA,CACnCC,IAAY;EAEZ,IAAIA,IAAI,IAAIT,sBAAsB,EAAE;IAClC,OAAOA,sBAAsB,CAACS,IAAc,CAAC;;EAE/C,OAAOd,mBAAmB,CAACe,GAAG,CAACD,IAAI,CAAC;AACtC;AAEA;;;AAGA,OAAM,SAAUE,0BAA0BA,CAACC,QAAgB;EAIzD,KAAK,MAAMC,UAAU,IAAI,CACvBlB,mBAAmB,CAACmB,KAAK,EAAE,CAACC,GAAG,CAACN,IAAI,IAAG;IACrC,OAAO,CAACA,IAAI,EAAEd,mBAAmB,CAACe,GAAG,CAACD,IAAI,CAAE,CAAU;EACxD,CAAC,CAAC,EACFR,MAAM,CAACe,OAAO,CAAChB,sBAAsB,CAAC,CACvC,EAAE;IACD,KAAK,MAAM,CAACS,IAAI,EAAEQ,YAAY,CAAC,IAAIJ,UAAU,EAAE;MAC7C,KAAK,MAAMK,SAAS,IAAIX,gBAAgB,EAAE;QACxC,MAAMY,MAAM,GAAG,GAAGV,IAAI,GAAGS,SAAS,EAAE;QACpC,IAAIN,QAAQ,CAACQ,UAAU,CAACD,MAAM,CAAC,EAAE;UAC/BP,QAAQ,GAAGA,QAAQ,CAACS,KAAK,CAACF,MAAM,CAACG,MAAM,CAAC;UACxC,OAAO;YAACC,eAAe,EAAEX,QAAQ;YAAEK;UAAY,CAAC;;;;;EAKxD,OAAO;IAACM,eAAe,EAAEX,QAAQ;IAAEK,YAAY,EAAEpB;EAAa,CAAC;AACjE"},"metadata":{},"sourceType":"module","externalDependencies":[]}