{"ast":null,"code":"import { getBufferString } from \"./base.js\";\nimport { BaseChatMemory } from \"./chat_memory.js\";\n/**\n * Class for managing and storing previous chat messages. It extends the\n * BaseChatMemory class and implements the BufferWindowMemoryInput\n * interface. This class is stateful and stores messages in a buffer. When\n * called in a chain, it returns all of the messages it has stored.\n */\nexport class BufferWindowMemory extends BaseChatMemory {\n  constructor(fields) {\n    super({\n      returnMessages: fields?.returnMessages ?? false,\n      chatHistory: fields?.chatHistory,\n      inputKey: fields?.inputKey,\n      outputKey: fields?.outputKey\n    });\n    Object.defineProperty(this, \"humanPrefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"Human\"\n    });\n    Object.defineProperty(this, \"aiPrefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"AI\"\n    });\n    Object.defineProperty(this, \"memoryKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"history\"\n    });\n    Object.defineProperty(this, \"k\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 5\n    });\n    this.humanPrefix = fields?.humanPrefix ?? this.humanPrefix;\n    this.aiPrefix = fields?.aiPrefix ?? this.aiPrefix;\n    this.memoryKey = fields?.memoryKey ?? this.memoryKey;\n    this.k = fields?.k ?? this.k;\n  }\n  get memoryKeys() {\n    return [this.memoryKey];\n  }\n  /**\n   * Method to load the memory variables. Retrieves the chat messages from\n   * the history, slices the last 'k' messages, and stores them in the\n   * memory under the memoryKey. If the returnMessages property is set to\n   * true, the method returns the messages as they are. Otherwise, it\n   * returns a string representation of the messages.\n   * @param _values InputValues object.\n   * @returns Promise that resolves to a MemoryVariables object.\n   */\n  async loadMemoryVariables(_values) {\n    const messages = await this.chatHistory.getMessages();\n    if (this.returnMessages) {\n      const result = {\n        [this.memoryKey]: messages.slice(-this.k * 2)\n      };\n      return result;\n    }\n    const result = {\n      [this.memoryKey]: getBufferString(messages.slice(-this.k * 2), this.humanPrefix, this.aiPrefix)\n    };\n    return result;\n  }\n}","map":{"version":3,"names":["getBufferString","BaseChatMemory","BufferWindowMemory","constructor","fields","returnMessages","chatHistory","inputKey","outputKey","Object","defineProperty","enumerable","configurable","writable","value","humanPrefix","aiPrefix","memoryKey","k","memoryKeys","loadMemoryVariables","_values","messages","getMessages","result","slice"],"sources":["/Users/mayamagavi/instalily/case-study/node_modules/langchain/dist/memory/buffer_window_memory.js"],"sourcesContent":["import { getBufferString } from \"./base.js\";\nimport { BaseChatMemory } from \"./chat_memory.js\";\n/**\n * Class for managing and storing previous chat messages. It extends the\n * BaseChatMemory class and implements the BufferWindowMemoryInput\n * interface. This class is stateful and stores messages in a buffer. When\n * called in a chain, it returns all of the messages it has stored.\n */\nexport class BufferWindowMemory extends BaseChatMemory {\n    constructor(fields) {\n        super({\n            returnMessages: fields?.returnMessages ?? false,\n            chatHistory: fields?.chatHistory,\n            inputKey: fields?.inputKey,\n            outputKey: fields?.outputKey,\n        });\n        Object.defineProperty(this, \"humanPrefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Human\"\n        });\n        Object.defineProperty(this, \"aiPrefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"AI\"\n        });\n        Object.defineProperty(this, \"memoryKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"history\"\n        });\n        Object.defineProperty(this, \"k\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 5\n        });\n        this.humanPrefix = fields?.humanPrefix ?? this.humanPrefix;\n        this.aiPrefix = fields?.aiPrefix ?? this.aiPrefix;\n        this.memoryKey = fields?.memoryKey ?? this.memoryKey;\n        this.k = fields?.k ?? this.k;\n    }\n    get memoryKeys() {\n        return [this.memoryKey];\n    }\n    /**\n     * Method to load the memory variables. Retrieves the chat messages from\n     * the history, slices the last 'k' messages, and stores them in the\n     * memory under the memoryKey. If the returnMessages property is set to\n     * true, the method returns the messages as they are. Otherwise, it\n     * returns a string representation of the messages.\n     * @param _values InputValues object.\n     * @returns Promise that resolves to a MemoryVariables object.\n     */\n    async loadMemoryVariables(_values) {\n        const messages = await this.chatHistory.getMessages();\n        if (this.returnMessages) {\n            const result = {\n                [this.memoryKey]: messages.slice(-this.k * 2),\n            };\n            return result;\n        }\n        const result = {\n            [this.memoryKey]: getBufferString(messages.slice(-this.k * 2), this.humanPrefix, this.aiPrefix),\n        };\n        return result;\n    }\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,WAAW;AAC3C,SAASC,cAAc,QAAQ,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,SAASD,cAAc,CAAC;EACnDE,WAAWA,CAACC,MAAM,EAAE;IAChB,KAAK,CAAC;MACFC,cAAc,EAAED,MAAM,EAAEC,cAAc,IAAI,KAAK;MAC/CC,WAAW,EAAEF,MAAM,EAAEE,WAAW;MAChCC,QAAQ,EAAEH,MAAM,EAAEG,QAAQ;MAC1BC,SAAS,EAAEJ,MAAM,EAAEI;IACvB,CAAC,CAAC;IACFC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,aAAa,EAAE;MACvCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE;MACpCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,WAAW,EAAE;MACrCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,GAAG,EAAE;MAC7BC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;IACF,IAAI,CAACC,WAAW,GAAGX,MAAM,EAAEW,WAAW,IAAI,IAAI,CAACA,WAAW;IAC1D,IAAI,CAACC,QAAQ,GAAGZ,MAAM,EAAEY,QAAQ,IAAI,IAAI,CAACA,QAAQ;IACjD,IAAI,CAACC,SAAS,GAAGb,MAAM,EAAEa,SAAS,IAAI,IAAI,CAACA,SAAS;IACpD,IAAI,CAACC,CAAC,GAAGd,MAAM,EAAEc,CAAC,IAAI,IAAI,CAACA,CAAC;EAChC;EACA,IAAIC,UAAUA,CAAA,EAAG;IACb,OAAO,CAAC,IAAI,CAACF,SAAS,CAAC;EAC3B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMG,mBAAmBA,CAACC,OAAO,EAAE;IAC/B,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAAChB,WAAW,CAACiB,WAAW,CAAC,CAAC;IACrD,IAAI,IAAI,CAAClB,cAAc,EAAE;MACrB,MAAMmB,MAAM,GAAG;QACX,CAAC,IAAI,CAACP,SAAS,GAAGK,QAAQ,CAACG,KAAK,CAAC,CAAC,IAAI,CAACP,CAAC,GAAG,CAAC;MAChD,CAAC;MACD,OAAOM,MAAM;IACjB;IACA,MAAMA,MAAM,GAAG;MACX,CAAC,IAAI,CAACP,SAAS,GAAGjB,eAAe,CAACsB,QAAQ,CAACG,KAAK,CAAC,CAAC,IAAI,CAACP,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAACH,WAAW,EAAE,IAAI,CAACC,QAAQ;IAClG,CAAC;IACD,OAAOQ,MAAM;EACjB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}