{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2022 Google LLC.\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventManager = void 0;\nconst protocol_js_1 = require(\"../../../protocol/protocol.js\");\nconst buffer_js_1 = require(\"../../../utils/buffer.js\");\nconst idWrapper_js_1 = require(\"../../../utils/idWrapper.js\");\nconst OutgoingBidiMessage_js_1 = require(\"../../OutgoingBidiMessage.js\");\nconst DefaultMap_js_1 = require(\"../../../utils/DefaultMap.js\");\nconst SubscriptionManager_js_1 = require(\"./SubscriptionManager.js\");\nclass EventWrapper {\n  #idWrapper;\n  #contextId;\n  #event;\n  constructor(event, contextId) {\n    this.#idWrapper = new idWrapper_js_1.IdWrapper();\n    this.#contextId = contextId;\n    this.#event = event;\n  }\n  get id() {\n    return this.#idWrapper.id;\n  }\n  get contextId() {\n    return this.#contextId;\n  }\n  get event() {\n    return this.#event;\n  }\n}\n/**\n * Maps event name to a desired buffer length.\n */\nconst eventBufferLength = new Map([[protocol_js_1.Log.EventNames.LogEntryAddedEvent, 100]]);\nclass EventManager {\n  static #NETWORK_DOMAIN_PREFIX = 'network';\n  /**\n   * Maps event name to a set of contexts where this event already happened.\n   * Needed for getting buffered events from all the contexts in case of\n   * subscripting to all contexts.\n   */\n  #eventToContextsMap = new DefaultMap_js_1.DefaultMap(() => new Set());\n  /**\n   * Maps `eventName` + `browsingContext` to buffer. Used to get buffered events\n   * during subscription. Channel-agnostic.\n   */\n  #eventBuffers = new Map();\n  /**\n   * Maps `eventName` + `browsingContext` + `channel` to last sent event id.\n   * Used to avoid sending duplicated events when user\n   * subscribes -> unsubscribes -> subscribes.\n   */\n  #lastMessageSent = new Map();\n  #subscriptionManager;\n  #bidiServer;\n  #isNetworkDomainEnabled;\n  constructor(bidiServer) {\n    this.#bidiServer = bidiServer;\n    this.#subscriptionManager = new SubscriptionManager_js_1.SubscriptionManager(bidiServer.getBrowsingContextStorage());\n    this.#isNetworkDomainEnabled = false;\n  }\n  get isNetworkDomainEnabled() {\n    return this.#isNetworkDomainEnabled;\n  }\n  /**\n   * Returns consistent key to be used to access value maps.\n   */\n  static #getMapKey(eventName, browsingContext, channel) {\n    return JSON.stringify({\n      eventName,\n      browsingContext,\n      channel\n    });\n  }\n  registerEvent(event, contextId) {\n    this.registerPromiseEvent(Promise.resolve(event), contextId, event.method);\n  }\n  registerPromiseEvent(event, contextId, eventName) {\n    const eventWrapper = new EventWrapper(event, contextId);\n    const sortedChannels = this.#subscriptionManager.getChannelsSubscribedToEvent(eventName, contextId);\n    this.#bufferEvent(eventWrapper, eventName);\n    // Send events to channels in the subscription priority.\n    for (const channel of sortedChannels) {\n      this.#bidiServer.emitOutgoingMessage(OutgoingBidiMessage_js_1.OutgoingBidiMessage.createFromPromise(event, channel));\n      this.#markEventSent(eventWrapper, channel, eventName);\n    }\n  }\n  async subscribe(eventNames, contextIds, channel) {\n    // First check if all the contexts are known.\n    for (const contextId of contextIds) {\n      if (contextId !== null) {\n        // Assert the context is known. Throw exception otherwise.\n        this.#bidiServer.getBrowsingContextStorage().getContext(contextId);\n      }\n    }\n    for (const eventName of eventNames) {\n      for (const contextId of contextIds) {\n        await this.#handleDomains(eventName, contextId);\n        this.#subscriptionManager.subscribe(eventName, contextId, channel);\n        for (const eventWrapper of this.#getBufferedEvents(eventName, contextId, channel)) {\n          // The order of the events is important.\n          this.#bidiServer.emitOutgoingMessage(OutgoingBidiMessage_js_1.OutgoingBidiMessage.createFromPromise(eventWrapper.event, channel));\n          this.#markEventSent(eventWrapper, channel, eventName);\n        }\n      }\n    }\n  }\n  /**\n   * Enables domains for the subscribed event in the required contexts or\n   * globally.\n   */\n  async #handleDomains(eventName, contextId) {\n    // Enable network domain if user subscribed to any of network events.\n    if (eventName.startsWith(EventManager.#NETWORK_DOMAIN_PREFIX)) {\n      // Enable for all the contexts.\n      if (contextId === null) {\n        this.#isNetworkDomainEnabled = true;\n        await Promise.all(this.#bidiServer.getBrowsingContextStorage().getAllContexts().map(context => context.cdpTarget.enableNetworkDomain()));\n      } else {\n        await this.#bidiServer.getBrowsingContextStorage().getContext(contextId).cdpTarget.enableNetworkDomain();\n      }\n    }\n  }\n  unsubscribe(eventNames, contextIds, channel) {\n    this.#subscriptionManager.unsubscribeAll(eventNames, contextIds, channel);\n  }\n  /**\n   * If the event is buffer-able, put it in the buffer.\n   */\n  #bufferEvent(eventWrapper, eventName) {\n    if (!eventBufferLength.has(eventName)) {\n      // Do nothing if the event is no buffer-able.\n      return;\n    }\n    const bufferMapKey = EventManager.#getMapKey(eventName, eventWrapper.contextId);\n    if (!this.#eventBuffers.has(bufferMapKey)) {\n      this.#eventBuffers.set(bufferMapKey, new buffer_js_1.Buffer(eventBufferLength.get(eventName)));\n    }\n    this.#eventBuffers.get(bufferMapKey).add(eventWrapper);\n    // Add the context to the list of contexts having `eventName` events.\n    this.#eventToContextsMap.get(eventName).add(eventWrapper.contextId);\n  }\n  /**\n   * If the event is buffer-able, mark it as sent to the given contextId and channel.\n   */\n  #markEventSent(eventWrapper, channel, eventName) {\n    if (!eventBufferLength.has(eventName)) {\n      // Do nothing if the event is no buffer-able.\n      return;\n    }\n    const lastSentMapKey = EventManager.#getMapKey(eventName, eventWrapper.contextId, channel);\n    this.#lastMessageSent.set(lastSentMapKey, Math.max(this.#lastMessageSent.get(lastSentMapKey) ?? 0, eventWrapper.id));\n  }\n  /**\n   * Returns events which are buffered and not yet sent to the given channel events.\n   */\n  #getBufferedEvents(eventName, contextId, channel) {\n    const bufferMapKey = EventManager.#getMapKey(eventName, contextId);\n    const lastSentMapKey = EventManager.#getMapKey(eventName, contextId, channel);\n    const lastSentMessageId = this.#lastMessageSent.get(lastSentMapKey) ?? -Infinity;\n    const result = this.#eventBuffers.get(bufferMapKey)?.get().filter(wrapper => wrapper.id > lastSentMessageId) ?? [];\n    if (contextId === null) {\n      // For global subscriptions, events buffered in each context should be sent back.\n      Array.from(this.#eventToContextsMap.get(eventName).keys()).filter(_contextId =>\n      // Events without context are already in the result.\n      _contextId !== null &&\n      // Events from deleted contexts should not be sent.\n      this.#bidiServer.getBrowsingContextStorage().hasContext(_contextId)).map(_contextId => this.#getBufferedEvents(eventName, _contextId, channel)).forEach(events => result.push(...events));\n    }\n    return result.sort((e1, e2) => e1.id - e2.id);\n  }\n}\nexports.EventManager = EventManager;","map":{"version":3,"names":["protocol_js_1","require","buffer_js_1","idWrapper_js_1","OutgoingBidiMessage_js_1","DefaultMap_js_1","SubscriptionManager_js_1","EventWrapper","idWrapper","contextId","event","constructor","IdWrapper","id","eventBufferLength","Map","Log","EventNames","LogEntryAddedEvent","EventManager","NETWORK_DOMAIN_PREFIX","eventToContextsMap","DefaultMap","Set","eventBuffers","lastMessageSent","subscriptionManager","bidiServer","isNetworkDomainEnabled","SubscriptionManager","getBrowsingContextStorage","getMapKey","#getMapKey","eventName","browsingContext","channel","JSON","stringify","registerEvent","registerPromiseEvent","Promise","resolve","method","eventWrapper","sortedChannels","getChannelsSubscribedToEvent","bufferEvent","emitOutgoingMessage","OutgoingBidiMessage","createFromPromise","markEventSent","subscribe","eventNames","contextIds","getContext","handleDomains","getBufferedEvents","#handleDomains","startsWith","all","getAllContexts","map","context","cdpTarget","enableNetworkDomain","unsubscribe","unsubscribeAll","#bufferEvent","has","bufferMapKey","set","Buffer","get","add","#markEventSent","lastSentMapKey","Math","max","#getBufferedEvents","lastSentMessageId","Infinity","result","filter","wrapper","Array","from","keys","_contextId","hasContext","forEach","events","push","sort","e1","e2","exports"],"sources":["../../../../../src/bidiMapper/domains/events/EventManager.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}