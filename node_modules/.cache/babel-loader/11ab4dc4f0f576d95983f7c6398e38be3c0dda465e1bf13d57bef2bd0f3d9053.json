{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _NetworkManager_instances, _NetworkManager_client, _NetworkManager_ignoreHTTPSErrors, _NetworkManager_frameManager, _NetworkManager_networkEventManager, _NetworkManager_extraHTTPHeaders, _NetworkManager_credentials, _NetworkManager_attemptedAuthentications, _NetworkManager_userRequestInterceptionEnabled, _NetworkManager_protocolRequestInterceptionEnabled, _NetworkManager_userCacheDisabled, _NetworkManager_emulatedNetworkConditions, _NetworkManager_deferredInitPromise, _NetworkManager_updateNetworkConditions, _NetworkManager_updateProtocolRequestInterception, _NetworkManager_cacheDisabled, _NetworkManager_updateProtocolCacheDisabled, _NetworkManager_onRequestWillBeSent, _NetworkManager_onAuthRequired, _NetworkManager_onRequestPaused, _NetworkManager_patchRequestEventHeaders, _NetworkManager_onRequestWithoutNetworkInstrumentation, _NetworkManager_onRequest, _NetworkManager_onRequestServedFromCache, _NetworkManager_handleRequestRedirect, _NetworkManager_emitResponseEvent, _NetworkManager_onResponseReceived, _NetworkManager_onResponseReceivedExtraInfo, _NetworkManager_forgetRequest, _NetworkManager_onLoadingFinished, _NetworkManager_emitLoadingFinished, _NetworkManager_onLoadingFailed, _NetworkManager_emitLoadingFailed;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NetworkManager = exports.NetworkManagerEmittedEvents = void 0;\nconst assert_js_1 = require(\"../util/assert.js\");\nconst DebuggableDeferredPromise_js_1 = require(\"../util/DebuggableDeferredPromise.js\");\nconst EventEmitter_js_1 = require(\"./EventEmitter.js\");\nconst HTTPRequest_js_1 = require(\"./HTTPRequest.js\");\nconst HTTPResponse_js_1 = require(\"./HTTPResponse.js\");\nconst NetworkEventManager_js_1 = require(\"./NetworkEventManager.js\");\nconst util_js_1 = require(\"./util.js\");\n/**\n * We use symbols to prevent any external parties listening to these events.\n * They are internal to Puppeteer.\n *\n * @internal\n */\nexports.NetworkManagerEmittedEvents = {\n  Request: Symbol('NetworkManager.Request'),\n  RequestServedFromCache: Symbol('NetworkManager.RequestServedFromCache'),\n  Response: Symbol('NetworkManager.Response'),\n  RequestFailed: Symbol('NetworkManager.RequestFailed'),\n  RequestFinished: Symbol('NetworkManager.RequestFinished')\n};\n/**\n * @internal\n */\nclass NetworkManager extends EventEmitter_js_1.EventEmitter {\n  constructor(client, ignoreHTTPSErrors, frameManager) {\n    super();\n    _NetworkManager_instances.add(this);\n    _NetworkManager_client.set(this, void 0);\n    _NetworkManager_ignoreHTTPSErrors.set(this, void 0);\n    _NetworkManager_frameManager.set(this, void 0);\n    _NetworkManager_networkEventManager.set(this, new NetworkEventManager_js_1.NetworkEventManager());\n    _NetworkManager_extraHTTPHeaders.set(this, {});\n    _NetworkManager_credentials.set(this, void 0);\n    _NetworkManager_attemptedAuthentications.set(this, new Set());\n    _NetworkManager_userRequestInterceptionEnabled.set(this, false);\n    _NetworkManager_protocolRequestInterceptionEnabled.set(this, false);\n    _NetworkManager_userCacheDisabled.set(this, false);\n    _NetworkManager_emulatedNetworkConditions.set(this, {\n      offline: false,\n      upload: -1,\n      download: -1,\n      latency: 0\n    });\n    _NetworkManager_deferredInitPromise.set(this, void 0);\n    __classPrivateFieldSet(this, _NetworkManager_client, client, \"f\");\n    __classPrivateFieldSet(this, _NetworkManager_ignoreHTTPSErrors, ignoreHTTPSErrors, \"f\");\n    __classPrivateFieldSet(this, _NetworkManager_frameManager, frameManager, \"f\");\n    __classPrivateFieldGet(this, _NetworkManager_client, \"f\").on('Fetch.requestPaused', __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onRequestPaused).bind(this));\n    __classPrivateFieldGet(this, _NetworkManager_client, \"f\").on('Fetch.authRequired', __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onAuthRequired).bind(this));\n    __classPrivateFieldGet(this, _NetworkManager_client, \"f\").on('Network.requestWillBeSent', __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onRequestWillBeSent).bind(this));\n    __classPrivateFieldGet(this, _NetworkManager_client, \"f\").on('Network.requestServedFromCache', __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onRequestServedFromCache).bind(this));\n    __classPrivateFieldGet(this, _NetworkManager_client, \"f\").on('Network.responseReceived', __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onResponseReceived).bind(this));\n    __classPrivateFieldGet(this, _NetworkManager_client, \"f\").on('Network.loadingFinished', __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onLoadingFinished).bind(this));\n    __classPrivateFieldGet(this, _NetworkManager_client, \"f\").on('Network.loadingFailed', __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onLoadingFailed).bind(this));\n    __classPrivateFieldGet(this, _NetworkManager_client, \"f\").on('Network.responseReceivedExtraInfo', __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onResponseReceivedExtraInfo).bind(this));\n  }\n  /**\n   * Initialize calls should avoid async dependencies between CDP calls as those\n   * might not resolve until after the target is resumed causing a deadlock.\n   */\n  initialize() {\n    if (__classPrivateFieldGet(this, _NetworkManager_deferredInitPromise, \"f\")) {\n      return __classPrivateFieldGet(this, _NetworkManager_deferredInitPromise, \"f\");\n    }\n    __classPrivateFieldSet(this, _NetworkManager_deferredInitPromise, (0, DebuggableDeferredPromise_js_1.createDebuggableDeferredPromise)('NetworkManager initialization timed out'), \"f\");\n    const init = Promise.all([__classPrivateFieldGet(this, _NetworkManager_ignoreHTTPSErrors, \"f\") ? __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Security.setIgnoreCertificateErrors', {\n      ignore: true\n    }) : null, __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Network.enable')]);\n    const deferredInitPromise = __classPrivateFieldGet(this, _NetworkManager_deferredInitPromise, \"f\");\n    init.then(() => {\n      deferredInitPromise.resolve();\n    }).catch(err => {\n      deferredInitPromise.reject(err);\n    });\n    return __classPrivateFieldGet(this, _NetworkManager_deferredInitPromise, \"f\");\n  }\n  async authenticate(credentials) {\n    __classPrivateFieldSet(this, _NetworkManager_credentials, credentials, \"f\");\n    await __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_updateProtocolRequestInterception).call(this);\n  }\n  async setExtraHTTPHeaders(extraHTTPHeaders) {\n    __classPrivateFieldSet(this, _NetworkManager_extraHTTPHeaders, {}, \"f\");\n    for (const key of Object.keys(extraHTTPHeaders)) {\n      const value = extraHTTPHeaders[key];\n      (0, assert_js_1.assert)((0, util_js_1.isString)(value), `Expected value of header \"${key}\" to be String, but \"${typeof value}\" is found.`);\n      __classPrivateFieldGet(this, _NetworkManager_extraHTTPHeaders, \"f\")[key.toLowerCase()] = value;\n    }\n    await __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Network.setExtraHTTPHeaders', {\n      headers: __classPrivateFieldGet(this, _NetworkManager_extraHTTPHeaders, \"f\")\n    });\n  }\n  extraHTTPHeaders() {\n    return Object.assign({}, __classPrivateFieldGet(this, _NetworkManager_extraHTTPHeaders, \"f\"));\n  }\n  numRequestsInProgress() {\n    return __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").numRequestsInProgress();\n  }\n  async setOfflineMode(value) {\n    __classPrivateFieldGet(this, _NetworkManager_emulatedNetworkConditions, \"f\").offline = value;\n    await __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_updateNetworkConditions).call(this);\n  }\n  async emulateNetworkConditions(networkConditions) {\n    __classPrivateFieldGet(this, _NetworkManager_emulatedNetworkConditions, \"f\").upload = networkConditions ? networkConditions.upload : -1;\n    __classPrivateFieldGet(this, _NetworkManager_emulatedNetworkConditions, \"f\").download = networkConditions ? networkConditions.download : -1;\n    __classPrivateFieldGet(this, _NetworkManager_emulatedNetworkConditions, \"f\").latency = networkConditions ? networkConditions.latency : 0;\n    await __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_updateNetworkConditions).call(this);\n  }\n  async setUserAgent(userAgent, userAgentMetadata) {\n    await __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Network.setUserAgentOverride', {\n      userAgent: userAgent,\n      userAgentMetadata: userAgentMetadata\n    });\n  }\n  async setCacheEnabled(enabled) {\n    __classPrivateFieldSet(this, _NetworkManager_userCacheDisabled, !enabled, \"f\");\n    await __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_updateProtocolCacheDisabled).call(this);\n  }\n  async setRequestInterception(value) {\n    __classPrivateFieldSet(this, _NetworkManager_userRequestInterceptionEnabled, value, \"f\");\n    await __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_updateProtocolRequestInterception).call(this);\n  }\n}\nexports.NetworkManager = NetworkManager;\n_NetworkManager_client = new WeakMap(), _NetworkManager_ignoreHTTPSErrors = new WeakMap(), _NetworkManager_frameManager = new WeakMap(), _NetworkManager_networkEventManager = new WeakMap(), _NetworkManager_extraHTTPHeaders = new WeakMap(), _NetworkManager_credentials = new WeakMap(), _NetworkManager_attemptedAuthentications = new WeakMap(), _NetworkManager_userRequestInterceptionEnabled = new WeakMap(), _NetworkManager_protocolRequestInterceptionEnabled = new WeakMap(), _NetworkManager_userCacheDisabled = new WeakMap(), _NetworkManager_emulatedNetworkConditions = new WeakMap(), _NetworkManager_deferredInitPromise = new WeakMap(), _NetworkManager_instances = new WeakSet(), _NetworkManager_updateNetworkConditions = async function _NetworkManager_updateNetworkConditions() {\n  await __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Network.emulateNetworkConditions', {\n    offline: __classPrivateFieldGet(this, _NetworkManager_emulatedNetworkConditions, \"f\").offline,\n    latency: __classPrivateFieldGet(this, _NetworkManager_emulatedNetworkConditions, \"f\").latency,\n    uploadThroughput: __classPrivateFieldGet(this, _NetworkManager_emulatedNetworkConditions, \"f\").upload,\n    downloadThroughput: __classPrivateFieldGet(this, _NetworkManager_emulatedNetworkConditions, \"f\").download\n  });\n}, _NetworkManager_updateProtocolRequestInterception = async function _NetworkManager_updateProtocolRequestInterception() {\n  const enabled = __classPrivateFieldGet(this, _NetworkManager_userRequestInterceptionEnabled, \"f\") || !!__classPrivateFieldGet(this, _NetworkManager_credentials, \"f\");\n  if (enabled === __classPrivateFieldGet(this, _NetworkManager_protocolRequestInterceptionEnabled, \"f\")) {\n    return;\n  }\n  __classPrivateFieldSet(this, _NetworkManager_protocolRequestInterceptionEnabled, enabled, \"f\");\n  if (enabled) {\n    await Promise.all([__classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_updateProtocolCacheDisabled).call(this), __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Fetch.enable', {\n      handleAuthRequests: true,\n      patterns: [{\n        urlPattern: '*'\n      }]\n    })]);\n  } else {\n    await Promise.all([__classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_updateProtocolCacheDisabled).call(this), __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Fetch.disable')]);\n  }\n}, _NetworkManager_cacheDisabled = function _NetworkManager_cacheDisabled() {\n  return __classPrivateFieldGet(this, _NetworkManager_userCacheDisabled, \"f\");\n}, _NetworkManager_updateProtocolCacheDisabled = async function _NetworkManager_updateProtocolCacheDisabled() {\n  await __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Network.setCacheDisabled', {\n    cacheDisabled: __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_cacheDisabled).call(this)\n  });\n}, _NetworkManager_onRequestWillBeSent = function _NetworkManager_onRequestWillBeSent(event) {\n  // Request interception doesn't happen for data URLs with Network Service.\n  if (__classPrivateFieldGet(this, _NetworkManager_userRequestInterceptionEnabled, \"f\") && !event.request.url.startsWith('data:')) {\n    const {\n      requestId: networkRequestId\n    } = event;\n    __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").storeRequestWillBeSent(networkRequestId, event);\n    /**\n     * CDP may have sent a Fetch.requestPaused event already. Check for it.\n     */\n    const requestPausedEvent = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getRequestPaused(networkRequestId);\n    if (requestPausedEvent) {\n      const {\n        requestId: fetchRequestId\n      } = requestPausedEvent;\n      __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_patchRequestEventHeaders).call(this, event, requestPausedEvent);\n      __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onRequest).call(this, event, fetchRequestId);\n      __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").forgetRequestPaused(networkRequestId);\n    }\n    return;\n  }\n  __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onRequest).call(this, event, undefined);\n}, _NetworkManager_onAuthRequired = function _NetworkManager_onAuthRequired(event) {\n  let response = 'Default';\n  if (__classPrivateFieldGet(this, _NetworkManager_attemptedAuthentications, \"f\").has(event.requestId)) {\n    response = 'CancelAuth';\n  } else if (__classPrivateFieldGet(this, _NetworkManager_credentials, \"f\")) {\n    response = 'ProvideCredentials';\n    __classPrivateFieldGet(this, _NetworkManager_attemptedAuthentications, \"f\").add(event.requestId);\n  }\n  const {\n    username,\n    password\n  } = __classPrivateFieldGet(this, _NetworkManager_credentials, \"f\") || {\n    username: undefined,\n    password: undefined\n  };\n  __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Fetch.continueWithAuth', {\n    requestId: event.requestId,\n    authChallengeResponse: {\n      response,\n      username,\n      password\n    }\n  }).catch(util_js_1.debugError);\n}, _NetworkManager_onRequestPaused = function _NetworkManager_onRequestPaused(event) {\n  if (!__classPrivateFieldGet(this, _NetworkManager_userRequestInterceptionEnabled, \"f\") && __classPrivateFieldGet(this, _NetworkManager_protocolRequestInterceptionEnabled, \"f\")) {\n    __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Fetch.continueRequest', {\n      requestId: event.requestId\n    }).catch(util_js_1.debugError);\n  }\n  const {\n    networkId: networkRequestId,\n    requestId: fetchRequestId\n  } = event;\n  if (!networkRequestId) {\n    __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onRequestWithoutNetworkInstrumentation).call(this, event);\n    return;\n  }\n  const requestWillBeSentEvent = (() => {\n    const requestWillBeSentEvent = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getRequestWillBeSent(networkRequestId);\n    // redirect requests have the same `requestId`,\n    if (requestWillBeSentEvent && (requestWillBeSentEvent.request.url !== event.request.url || requestWillBeSentEvent.request.method !== event.request.method)) {\n      __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").forgetRequestWillBeSent(networkRequestId);\n      return;\n    }\n    return requestWillBeSentEvent;\n  })();\n  if (requestWillBeSentEvent) {\n    __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_patchRequestEventHeaders).call(this, requestWillBeSentEvent, event);\n    __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onRequest).call(this, requestWillBeSentEvent, fetchRequestId);\n  } else {\n    __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").storeRequestPaused(networkRequestId, event);\n  }\n}, _NetworkManager_patchRequestEventHeaders = function _NetworkManager_patchRequestEventHeaders(requestWillBeSentEvent, requestPausedEvent) {\n  requestWillBeSentEvent.request.headers = {\n    ...requestWillBeSentEvent.request.headers,\n    // includes extra headers, like: Accept, Origin\n    ...requestPausedEvent.request.headers\n  };\n}, _NetworkManager_onRequestWithoutNetworkInstrumentation = function _NetworkManager_onRequestWithoutNetworkInstrumentation(event) {\n  // If an event has no networkId it should not have any network events. We\n  // still want to dispatch it for the interception by the user.\n  const frame = event.frameId ? __classPrivateFieldGet(this, _NetworkManager_frameManager, \"f\").frame(event.frameId) : null;\n  const request = new HTTPRequest_js_1.HTTPRequest(__classPrivateFieldGet(this, _NetworkManager_client, \"f\"), frame, event.requestId, __classPrivateFieldGet(this, _NetworkManager_userRequestInterceptionEnabled, \"f\"), event, []);\n  this.emit(exports.NetworkManagerEmittedEvents.Request, request);\n  request.finalizeInterceptions();\n}, _NetworkManager_onRequest = function _NetworkManager_onRequest(event, fetchRequestId) {\n  let redirectChain = [];\n  if (event.redirectResponse) {\n    // We want to emit a response and requestfinished for the\n    // redirectResponse, but we can't do so unless we have a\n    // responseExtraInfo ready to pair it up with. If we don't have any\n    // responseExtraInfos saved in our queue, they we have to wait until\n    // the next one to emit response and requestfinished, *and* we should\n    // also wait to emit this Request too because it should come after the\n    // response/requestfinished.\n    let redirectResponseExtraInfo = null;\n    if (event.redirectHasExtraInfo) {\n      redirectResponseExtraInfo = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").responseExtraInfo(event.requestId).shift();\n      if (!redirectResponseExtraInfo) {\n        __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").queueRedirectInfo(event.requestId, {\n          event,\n          fetchRequestId\n        });\n        return;\n      }\n    }\n    const request = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getRequest(event.requestId);\n    // If we connect late to the target, we could have missed the\n    // requestWillBeSent event.\n    if (request) {\n      __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_handleRequestRedirect).call(this, request, event.redirectResponse, redirectResponseExtraInfo);\n      redirectChain = request._redirectChain;\n    }\n  }\n  const frame = event.frameId ? __classPrivateFieldGet(this, _NetworkManager_frameManager, \"f\").frame(event.frameId) : null;\n  const request = new HTTPRequest_js_1.HTTPRequest(__classPrivateFieldGet(this, _NetworkManager_client, \"f\"), frame, fetchRequestId, __classPrivateFieldGet(this, _NetworkManager_userRequestInterceptionEnabled, \"f\"), event, redirectChain);\n  __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").storeRequest(event.requestId, request);\n  this.emit(exports.NetworkManagerEmittedEvents.Request, request);\n  request.finalizeInterceptions();\n}, _NetworkManager_onRequestServedFromCache = function _NetworkManager_onRequestServedFromCache(event) {\n  const request = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getRequest(event.requestId);\n  if (request) {\n    request._fromMemoryCache = true;\n  }\n  this.emit(exports.NetworkManagerEmittedEvents.RequestServedFromCache, request);\n}, _NetworkManager_handleRequestRedirect = function _NetworkManager_handleRequestRedirect(request, responsePayload, extraInfo) {\n  const response = new HTTPResponse_js_1.HTTPResponse(__classPrivateFieldGet(this, _NetworkManager_client, \"f\"), request, responsePayload, extraInfo);\n  request._response = response;\n  request._redirectChain.push(request);\n  response._resolveBody(new Error('Response body is unavailable for redirect responses'));\n  __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_forgetRequest).call(this, request, false);\n  this.emit(exports.NetworkManagerEmittedEvents.Response, response);\n  this.emit(exports.NetworkManagerEmittedEvents.RequestFinished, request);\n}, _NetworkManager_emitResponseEvent = function _NetworkManager_emitResponseEvent(responseReceived, extraInfo) {\n  const request = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getRequest(responseReceived.requestId);\n  // FileUpload sends a response without a matching request.\n  if (!request) {\n    return;\n  }\n  const extraInfos = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").responseExtraInfo(responseReceived.requestId);\n  if (extraInfos.length) {\n    (0, util_js_1.debugError)(new Error('Unexpected extraInfo events for request ' + responseReceived.requestId));\n  }\n  // Chromium sends wrong extraInfo events for responses served from cache.\n  // See https://github.com/puppeteer/puppeteer/issues/9965 and\n  // https://crbug.com/1340398.\n  if (responseReceived.response.fromDiskCache) {\n    extraInfo = null;\n  }\n  const response = new HTTPResponse_js_1.HTTPResponse(__classPrivateFieldGet(this, _NetworkManager_client, \"f\"), request, responseReceived.response, extraInfo);\n  request._response = response;\n  this.emit(exports.NetworkManagerEmittedEvents.Response, response);\n}, _NetworkManager_onResponseReceived = function _NetworkManager_onResponseReceived(event) {\n  const request = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getRequest(event.requestId);\n  let extraInfo = null;\n  if (request && !request._fromMemoryCache && event.hasExtraInfo) {\n    extraInfo = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").responseExtraInfo(event.requestId).shift();\n    if (!extraInfo) {\n      // Wait until we get the corresponding ExtraInfo event.\n      __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").queueEventGroup(event.requestId, {\n        responseReceivedEvent: event\n      });\n      return;\n    }\n  }\n  __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_emitResponseEvent).call(this, event, extraInfo);\n}, _NetworkManager_onResponseReceivedExtraInfo = function _NetworkManager_onResponseReceivedExtraInfo(event) {\n  // We may have skipped a redirect response/request pair due to waiting for\n  // this ExtraInfo event. If so, continue that work now that we have the\n  // request.\n  const redirectInfo = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").takeQueuedRedirectInfo(event.requestId);\n  if (redirectInfo) {\n    __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").responseExtraInfo(event.requestId).push(event);\n    __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onRequest).call(this, redirectInfo.event, redirectInfo.fetchRequestId);\n    return;\n  }\n  // We may have skipped response and loading events because we didn't have\n  // this ExtraInfo event yet. If so, emit those events now.\n  const queuedEvents = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getQueuedEventGroup(event.requestId);\n  if (queuedEvents) {\n    __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").forgetQueuedEventGroup(event.requestId);\n    __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_emitResponseEvent).call(this, queuedEvents.responseReceivedEvent, event);\n    if (queuedEvents.loadingFinishedEvent) {\n      __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_emitLoadingFinished).call(this, queuedEvents.loadingFinishedEvent);\n    }\n    if (queuedEvents.loadingFailedEvent) {\n      __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_emitLoadingFailed).call(this, queuedEvents.loadingFailedEvent);\n    }\n    return;\n  }\n  // Wait until we get another event that can use this ExtraInfo event.\n  __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").responseExtraInfo(event.requestId).push(event);\n}, _NetworkManager_forgetRequest = function _NetworkManager_forgetRequest(request, events) {\n  const requestId = request._requestId;\n  const interceptionId = request._interceptionId;\n  __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").forgetRequest(requestId);\n  interceptionId !== undefined && __classPrivateFieldGet(this, _NetworkManager_attemptedAuthentications, \"f\").delete(interceptionId);\n  if (events) {\n    __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").forget(requestId);\n  }\n}, _NetworkManager_onLoadingFinished = function _NetworkManager_onLoadingFinished(event) {\n  // If the response event for this request is still waiting on a\n  // corresponding ExtraInfo event, then wait to emit this event too.\n  const queuedEvents = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getQueuedEventGroup(event.requestId);\n  if (queuedEvents) {\n    queuedEvents.loadingFinishedEvent = event;\n  } else {\n    __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_emitLoadingFinished).call(this, event);\n  }\n}, _NetworkManager_emitLoadingFinished = function _NetworkManager_emitLoadingFinished(event) {\n  var _a;\n  const request = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getRequest(event.requestId);\n  // For certain requestIds we never receive requestWillBeSent event.\n  // @see https://crbug.com/750469\n  if (!request) {\n    return;\n  }\n  // Under certain conditions we never get the Network.responseReceived\n  // event from protocol. @see https://crbug.com/883475\n  if (request.response()) {\n    (_a = request.response()) === null || _a === void 0 ? void 0 : _a._resolveBody(null);\n  }\n  __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_forgetRequest).call(this, request, true);\n  this.emit(exports.NetworkManagerEmittedEvents.RequestFinished, request);\n}, _NetworkManager_onLoadingFailed = function _NetworkManager_onLoadingFailed(event) {\n  // If the response event for this request is still waiting on a\n  // corresponding ExtraInfo event, then wait to emit this event too.\n  const queuedEvents = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getQueuedEventGroup(event.requestId);\n  if (queuedEvents) {\n    queuedEvents.loadingFailedEvent = event;\n  } else {\n    __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_emitLoadingFailed).call(this, event);\n  }\n}, _NetworkManager_emitLoadingFailed = function _NetworkManager_emitLoadingFailed(event) {\n  const request = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getRequest(event.requestId);\n  // For certain requestIds we never receive requestWillBeSent event.\n  // @see https://crbug.com/750469\n  if (!request) {\n    return;\n  }\n  request._failureText = event.errorText;\n  const response = request.response();\n  if (response) {\n    response._resolveBody(null);\n  }\n  __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_forgetRequest).call(this, request, true);\n  this.emit(exports.NetworkManagerEmittedEvents.RequestFailed, request);\n};","map":{"version":3,"names":["assert_js_1","require","DebuggableDeferredPromise_js_1","EventEmitter_js_1","HTTPRequest_js_1","HTTPResponse_js_1","NetworkEventManager_js_1","util_js_1","exports","NetworkManagerEmittedEvents","Request","Symbol","RequestServedFromCache","Response","RequestFailed","RequestFinished","NetworkManager","EventEmitter","constructor","client","ignoreHTTPSErrors","frameManager","_NetworkManager_client","set","_NetworkManager_ignoreHTTPSErrors","_NetworkManager_frameManager","_NetworkManager_networkEventManager","NetworkEventManager","_NetworkManager_extraHTTPHeaders","_NetworkManager_credentials","_NetworkManager_attemptedAuthentications","Set","_NetworkManager_userRequestInterceptionEnabled","_NetworkManager_protocolRequestInterceptionEnabled","_NetworkManager_userCacheDisabled","_NetworkManager_emulatedNetworkConditions","offline","upload","download","latency","_NetworkManager_deferredInitPromise","__classPrivateFieldSet","__classPrivateFieldGet","on","_NetworkManager_instances","_NetworkManager_onRequestPaused","bind","_NetworkManager_onAuthRequired","_NetworkManager_onRequestWillBeSent","_NetworkManager_onRequestServedFromCache","_NetworkManager_onResponseReceived","_NetworkManager_onLoadingFinished","_NetworkManager_onLoadingFailed","_NetworkManager_onResponseReceivedExtraInfo","initialize","createDebuggableDeferredPromise","init","Promise","all","send","ignore","deferredInitPromise","then","resolve","catch","err","reject","authenticate","credentials","_NetworkManager_updateProtocolRequestInterception","call","setExtraHTTPHeaders","extraHTTPHeaders","key","Object","keys","value","assert","isString","toLowerCase","headers","assign","numRequestsInProgress","setOfflineMode","_NetworkManager_updateNetworkConditions","emulateNetworkConditions","networkConditions","setUserAgent","userAgent","userAgentMetadata","setCacheEnabled","enabled","_NetworkManager_updateProtocolCacheDisabled","setRequestInterception","uploadThroughput","downloadThroughput","handleAuthRequests","patterns","urlPattern","_NetworkManager_cacheDisabled","cacheDisabled","event","request","url","startsWith","requestId","networkRequestId","storeRequestWillBeSent","requestPausedEvent","getRequestPaused","fetchRequestId","_NetworkManager_patchRequestEventHeaders","_NetworkManager_onRequest","forgetRequestPaused","undefined","response","has","add","username","password","authChallengeResponse","debugError","networkId","_NetworkManager_onRequestWithoutNetworkInstrumentation","requestWillBeSentEvent","getRequestWillBeSent","method","forgetRequestWillBeSent","storeRequestPaused","frame","frameId","HTTPRequest","emit","finalizeInterceptions","redirectChain","redirectResponse","redirectResponseExtraInfo","redirectHasExtraInfo","responseExtraInfo","shift","queueRedirectInfo","getRequest","_NetworkManager_handleRequestRedirect","_redirectChain","storeRequest","_fromMemoryCache","responsePayload","extraInfo","HTTPResponse","_response","push","_resolveBody","Error","_NetworkManager_forgetRequest","_NetworkManager_emitResponseEvent","responseReceived","extraInfos","length","fromDiskCache","hasExtraInfo","queueEventGroup","responseReceivedEvent","redirectInfo","takeQueuedRedirectInfo","queuedEvents","getQueuedEventGroup","forgetQueuedEventGroup","loadingFinishedEvent","_NetworkManager_emitLoadingFinished","loadingFailedEvent","_NetworkManager_emitLoadingFailed","events","_requestId","interceptionId","_interceptionId","forgetRequest","delete","forget","_a","_failureText","errorText"],"sources":["../../../../src/common/NetworkManager.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}