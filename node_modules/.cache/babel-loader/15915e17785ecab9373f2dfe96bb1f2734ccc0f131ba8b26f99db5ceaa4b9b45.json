{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRefs = void 0;\nconst Options_1 = require(\"./Options\");\nconst getRefs = options => {\n  const _options = (0, Options_1.getDefaultOptions)(options);\n  const currentPath = _options.name !== undefined ? [..._options.basePath, _options.definitionPath, _options.name] : _options.basePath;\n  return Object.assign(Object.assign({}, _options), {\n    currentPath: currentPath,\n    propertyPath: undefined,\n    seen: new Map(Object.entries(_options.definitions).map(([name, def]) => [def._def, {\n      def: def._def,\n      path: [..._options.basePath, _options.definitionPath, name],\n      // Resolution of references will be forced even though seen, so it's ok that the schema is undefined here for now.\n      jsonSchema: undefined\n    }]))\n  });\n};\nexports.getRefs = getRefs;","map":{"version":3,"names":["Object","defineProperty","exports","value","getRefs","Options_1","require","options","_options","getDefaultOptions","currentPath","name","undefined","basePath","definitionPath","assign","propertyPath","seen","Map","entries","definitions","map","def","_def","path","jsonSchema"],"sources":["/Users/mayamagavi/instalily/case-study/node_modules/zod-to-json-schema/src/Refs.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRefs = void 0;\nconst Options_1 = require(\"./Options\");\nconst getRefs = (options) => {\n    const _options = (0, Options_1.getDefaultOptions)(options);\n    const currentPath = _options.name !== undefined\n        ? [..._options.basePath, _options.definitionPath, _options.name]\n        : _options.basePath;\n    return Object.assign(Object.assign({}, _options), { currentPath: currentPath, propertyPath: undefined, seen: new Map(Object.entries(_options.definitions).map(([name, def]) => [\n            def._def,\n            {\n                def: def._def,\n                path: [..._options.basePath, _options.definitionPath, name],\n                // Resolution of references will be forced even though seen, so it's ok that the schema is undefined here for now.\n                jsonSchema: undefined,\n            },\n        ])) });\n};\nexports.getRefs = getRefs;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AACxB,MAAMC,SAAS,GAAGC,OAAO,CAAC,WAAW,CAAC;AACtC,MAAMF,OAAO,GAAIG,OAAO,IAAK;EACzB,MAAMC,QAAQ,GAAG,CAAC,CAAC,EAAEH,SAAS,CAACI,iBAAiB,EAAEF,OAAO,CAAC;EAC1D,MAAMG,WAAW,GAAGF,QAAQ,CAACG,IAAI,KAAKC,SAAS,GACzC,CAAC,GAAGJ,QAAQ,CAACK,QAAQ,EAAEL,QAAQ,CAACM,cAAc,EAAEN,QAAQ,CAACG,IAAI,CAAC,GAC9DH,QAAQ,CAACK,QAAQ;EACvB,OAAOb,MAAM,CAACe,MAAM,CAACf,MAAM,CAACe,MAAM,CAAC,CAAC,CAAC,EAAEP,QAAQ,CAAC,EAAE;IAAEE,WAAW,EAAEA,WAAW;IAAEM,YAAY,EAAEJ,SAAS;IAAEK,IAAI,EAAE,IAAIC,GAAG,CAAClB,MAAM,CAACmB,OAAO,CAACX,QAAQ,CAACY,WAAW,CAAC,CAACC,GAAG,CAAC,CAAC,CAACV,IAAI,EAAEW,GAAG,CAAC,KAAK,CACvKA,GAAG,CAACC,IAAI,EACR;MACID,GAAG,EAAEA,GAAG,CAACC,IAAI;MACbC,IAAI,EAAE,CAAC,GAAGhB,QAAQ,CAACK,QAAQ,EAAEL,QAAQ,CAACM,cAAc,EAAEH,IAAI,CAAC;MAC3D;MACAc,UAAU,EAAEb;IAChB,CAAC,CACJ,CAAC;EAAE,CAAC,CAAC;AACd,CAAC;AACDV,OAAO,CAACE,OAAO,GAAGA,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}