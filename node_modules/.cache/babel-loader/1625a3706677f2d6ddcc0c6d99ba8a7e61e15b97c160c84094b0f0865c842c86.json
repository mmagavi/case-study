{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HTTPResponse = void 0;\n/**\n * The HTTPResponse class represents responses which are received by the\n * {@link Page} class.\n *\n * @public\n */\nclass HTTPResponse {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * @internal\n   */\n  _resolveBody(_err) {\n    throw new Error('Not implemented');\n  }\n  /**\n   * The IP address and port number used to connect to the remote\n   * server.\n   */\n  remoteAddress() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * The URL of the response.\n   */\n  url() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * True if the response was successful (status in the range 200-299).\n   */\n  ok() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * The status code of the response (e.g., 200 for a success).\n   */\n  status() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * The status text of the response (e.g. usually an \"OK\" for a\n   * success).\n   */\n  statusText() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * An object with HTTP headers associated with the response. All\n   * header names are lower-case.\n   */\n  headers() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * {@link SecurityDetails} if the response was received over the\n   * secure connection, or `null` otherwise.\n   */\n  securityDetails() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * Timing information related to the response.\n   */\n  timing() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * Promise which resolves to a buffer with response body.\n   */\n  buffer() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * Promise which resolves to a text representation of response body.\n   */\n  async text() {\n    const content = await this.buffer();\n    return content.toString('utf8');\n  }\n  /**\n   * Promise which resolves to a JSON representation of response body.\n   *\n   * @remarks\n   *\n   * This method will throw if the response body is not parsable via\n   * `JSON.parse`.\n   */\n  async json() {\n    const content = await this.text();\n    return JSON.parse(content);\n  }\n  /**\n   * A matching {@link HTTPRequest} object.\n   */\n  request() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * True if the response was served from either the browser's disk\n   * cache or memory cache.\n   */\n  fromCache() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * True if the response was served by a service worker.\n   */\n  fromServiceWorker() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * A {@link Frame} that initiated this response, or `null` if\n   * navigating to error pages.\n   */\n  frame() {\n    throw new Error('Not implemented');\n  }\n}\nexports.HTTPResponse = HTTPResponse;","map":{"version":3,"names":["HTTPResponse","constructor","_resolveBody","_err","Error","remoteAddress","url","ok","status","statusText","headers","securityDetails","timing","buffer","text","content","toString","json","JSON","parse","request","fromCache","fromServiceWorker","frame","exports"],"sources":["../../../../src/api/HTTPResponse.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;AA+BA;;;;;;AAMA,MAAaA,YAAY;EACvB;;;EAGAC,YAAA,GAAe;EAEf;;;EAGAC,YAAYA,CAACC,IAAkB;IAC7B,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;;EAIAC,aAAaA,CAAA;IACX,MAAM,IAAID,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;EAGAE,GAAGA,CAAA;IACD,MAAM,IAAIF,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;EAGAG,EAAEA,CAAA;IACA,MAAM,IAAIH,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;EAGAI,MAAMA,CAAA;IACJ,MAAM,IAAIJ,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;;EAIAK,UAAUA,CAAA;IACR,MAAM,IAAIL,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;;EAIAM,OAAOA,CAAA;IACL,MAAM,IAAIN,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;;EAIAO,eAAeA,CAAA;IACb,MAAM,IAAIP,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;EAGAQ,MAAMA,CAAA;IACJ,MAAM,IAAIR,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;EAGAS,MAAMA,CAAA;IACJ,MAAM,IAAIT,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;EAGA,MAAMU,IAAIA,CAAA;IACR,MAAMC,OAAO,GAAG,MAAM,IAAI,CAACF,MAAM,EAAE;IACnC,OAAOE,OAAO,CAACC,QAAQ,CAAC,MAAM,CAAC;EACjC;EAEA;;;;;;;;EAQA,MAAMC,IAAIA,CAAA;IACR,MAAMF,OAAO,GAAG,MAAM,IAAI,CAACD,IAAI,EAAE;IACjC,OAAOI,IAAI,CAACC,KAAK,CAACJ,OAAO,CAAC;EAC5B;EAEA;;;EAGAK,OAAOA,CAAA;IACL,MAAM,IAAIhB,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;;EAIAiB,SAASA,CAAA;IACP,MAAM,IAAIjB,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;EAGAkB,iBAAiBA,CAAA;IACf,MAAM,IAAIlB,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;;EAIAmB,KAAKA,CAAA;IACH,MAAM,IAAInB,KAAK,CAAC,iBAAiB,CAAC;EACpC;;AAjIFoB,OAAA,CAAAxB,YAAA,GAAAA,YAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}