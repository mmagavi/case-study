{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScriptEvaluator = exports.SHARED_ID_DIVIDER = void 0;\nconst protocol_js_1 = require(\"../../../protocol/protocol.js\");\n// As `script.evaluate` wraps call into serialization script, `lineNumber`\n// should be adjusted.\nconst CALL_FUNCTION_STACKTRACE_LINE_OFFSET = 1;\nconst EVALUATE_STACKTRACE_LINE_OFFSET = 0;\nexports.SHARED_ID_DIVIDER = '_element_';\nclass ScriptEvaluator {\n  #eventManager;\n  constructor(eventManager) {\n    this.#eventManager = eventManager;\n  }\n  /**\n   * Gets the string representation of an object. This is equivalent to\n   * calling toString() on the object value.\n   * @param cdpObject CDP remote object representing an object.\n   * @param realm\n   * @return string The stringified object.\n   */\n  static async stringifyObject(cdpObject, realm) {\n    const stringifyResult = await realm.cdpClient.sendCommand('Runtime.callFunctionOn', {\n      functionDeclaration: String(obj => {\n        return String(obj);\n      }),\n      awaitPromise: false,\n      arguments: [cdpObject],\n      returnByValue: true,\n      executionContextId: realm.executionContextId\n    });\n    return stringifyResult.result.value;\n  }\n  /**\n   * Serializes a given CDP object into BiDi, keeping references in the\n   * target's `globalThis`.\n   * @param cdpRemoteObject CDP remote object to be serialized.\n   * @param resultOwnership Indicates desired ResultOwnership.\n   * @param realm\n   */\n  async serializeCdpObject(cdpRemoteObject, resultOwnership, realm) {\n    const arg = ScriptEvaluator.#cdpRemoteObjectToCallArgument(cdpRemoteObject);\n    const cdpWebDriverValue = await realm.cdpClient.sendCommand('Runtime.callFunctionOn', {\n      functionDeclaration: String(obj => obj),\n      awaitPromise: false,\n      arguments: [arg],\n      generateWebDriverValue: true,\n      executionContextId: realm.executionContextId\n    });\n    return realm.cdpToBidiValue(cdpWebDriverValue, resultOwnership);\n  }\n  async scriptEvaluate(realm, expression, awaitPromise, resultOwnership) {\n    const cdpEvaluateResult = await realm.cdpClient.sendCommand('Runtime.evaluate', {\n      contextId: realm.executionContextId,\n      expression,\n      awaitPromise,\n      generateWebDriverValue: true\n    });\n    if (cdpEvaluateResult.exceptionDetails) {\n      // Serialize exception details.\n      return {\n        exceptionDetails: await this.#serializeCdpExceptionDetails(cdpEvaluateResult.exceptionDetails, EVALUATE_STACKTRACE_LINE_OFFSET, resultOwnership, realm),\n        type: 'exception',\n        realm: realm.realmId\n      };\n    }\n    return {\n      type: 'success',\n      result: realm.cdpToBidiValue(cdpEvaluateResult, resultOwnership),\n      realm: realm.realmId\n    };\n  }\n  async callFunction(realm, functionDeclaration, _this, _arguments, awaitPromise, resultOwnership) {\n    const callFunctionAndSerializeScript = `(...args)=>{ return _callFunction((\\n${functionDeclaration}\\n), args);\n      function _callFunction(f, args) {\n        const deserializedThis = args.shift();\n        const deserializedArgs = args;\n        return f.apply(deserializedThis, deserializedArgs);\n      }}`;\n    const thisAndArgumentsList = [await this.#deserializeToCdpArg(_this, realm)];\n    thisAndArgumentsList.push(...(await Promise.all(_arguments.map(async a => {\n      return this.#deserializeToCdpArg(a, realm);\n    }))));\n    let cdpCallFunctionResult;\n    try {\n      cdpCallFunctionResult = await realm.cdpClient.sendCommand('Runtime.callFunctionOn', {\n        functionDeclaration: callFunctionAndSerializeScript,\n        awaitPromise,\n        arguments: thisAndArgumentsList,\n        generateWebDriverValue: true,\n        executionContextId: realm.executionContextId\n      });\n    } catch (e) {\n      // Heuristic to determine if the problem is in the argument.\n      // The check can be done on the `deserialization` step, but this approach\n      // helps to save round-trips.\n      if (e.code === -32000 && ['Could not find object with given id', 'Argument should belong to the same JavaScript world as target object', 'Invalid remote object id'].includes(e.message)) {\n        throw new protocol_js_1.Message.NoSuchHandleException('Handle was not found.');\n      }\n      throw e;\n    }\n    if (cdpCallFunctionResult.exceptionDetails) {\n      // Serialize exception details.\n      return {\n        exceptionDetails: await this.#serializeCdpExceptionDetails(cdpCallFunctionResult.exceptionDetails, CALL_FUNCTION_STACKTRACE_LINE_OFFSET, resultOwnership, realm),\n        type: 'exception',\n        realm: realm.realmId\n      };\n    }\n    return {\n      type: 'success',\n      result: realm.cdpToBidiValue(cdpCallFunctionResult, resultOwnership),\n      realm: realm.realmId\n    };\n  }\n  static #cdpRemoteObjectToCallArgument(cdpRemoteObject) {\n    if (cdpRemoteObject.objectId !== undefined) {\n      return {\n        objectId: cdpRemoteObject.objectId\n      };\n    }\n    if (cdpRemoteObject.unserializableValue !== undefined) {\n      return {\n        unserializableValue: cdpRemoteObject.unserializableValue\n      };\n    }\n    return {\n      value: cdpRemoteObject.value\n    };\n  }\n  async #deserializeToCdpArg(argumentValue, realm) {\n    if ('sharedId' in argumentValue) {\n      const [navigableId, rawBackendNodeId] = argumentValue.sharedId.split(exports.SHARED_ID_DIVIDER);\n      const backendNodeId = parseInt(rawBackendNodeId ?? '');\n      if (isNaN(backendNodeId) || backendNodeId === undefined || navigableId === undefined) {\n        throw new protocol_js_1.Message.InvalidArgumentException(`SharedId \"${argumentValue.sharedId}\" should have format \"{navigableId}${exports.SHARED_ID_DIVIDER}{backendNodeId}\".`);\n      }\n      if (realm.navigableId !== navigableId) {\n        throw new protocol_js_1.Message.NoSuchNodeException(`SharedId \"${argumentValue.sharedId}\" belongs to different document. Current document is ${realm.navigableId}.`);\n      }\n      try {\n        const obj = await realm.cdpClient.sendCommand('DOM.resolveNode', {\n          backendNodeId,\n          executionContextId: realm.executionContextId\n        });\n        // TODO(#375): Release `obj.object.objectId` after using.\n        return {\n          objectId: obj.object.objectId\n        };\n      } catch (e) {\n        // Heuristic to detect \"no such node\" exception. Based on the  specific\n        // CDP implementation.\n        if (e.code === -32000 && e.message === 'No node with given id found') {\n          throw new protocol_js_1.Message.NoSuchNodeException(`SharedId \"${argumentValue.sharedId}\" was not found.`);\n        }\n        throw e;\n      }\n    }\n    if ('handle' in argumentValue) {\n      return {\n        objectId: argumentValue.handle\n      };\n    }\n    switch (argumentValue.type) {\n      // Primitive Protocol Value\n      // https://w3c.github.io/webdriver-bidi/#data-types-protocolValue-primitiveProtocolValue\n      case 'undefined':\n        return {\n          unserializableValue: 'undefined'\n        };\n      case 'null':\n        return {\n          unserializableValue: 'null'\n        };\n      case 'string':\n        return {\n          value: argumentValue.value\n        };\n      case 'number':\n        if (argumentValue.value === 'NaN') {\n          return {\n            unserializableValue: 'NaN'\n          };\n        } else if (argumentValue.value === '-0') {\n          return {\n            unserializableValue: '-0'\n          };\n        } else if (argumentValue.value === 'Infinity') {\n          return {\n            unserializableValue: 'Infinity'\n          };\n        } else if (argumentValue.value === '-Infinity') {\n          return {\n            unserializableValue: '-Infinity'\n          };\n        }\n        return {\n          value: argumentValue.value\n        };\n      case 'boolean':\n        return {\n          value: Boolean(argumentValue.value)\n        };\n      case 'bigint':\n        return {\n          unserializableValue: `BigInt(${JSON.stringify(argumentValue.value)})`\n        };\n      case 'date':\n        return {\n          unserializableValue: `new Date(Date.parse(${JSON.stringify(argumentValue.value)}))`\n        };\n      case 'regexp':\n        return {\n          unserializableValue: `new RegExp(${JSON.stringify(argumentValue.value.pattern)}, ${JSON.stringify(argumentValue.value.flags)})`\n        };\n      case 'map':\n        {\n          // TODO(sadym): If none of the nested keys and values has a remote\n          // reference, serialize to `unserializableValue` without CDP roundtrip.\n          const keyValueArray = await this.#flattenKeyValuePairs(argumentValue.value, realm);\n          const argEvalResult = await realm.cdpClient.sendCommand('Runtime.callFunctionOn', {\n            functionDeclaration: String((...args) => {\n              const result = new Map();\n              for (let i = 0; i < args.length; i += 2) {\n                result.set(args[i], args[i + 1]);\n              }\n              return result;\n            }),\n            awaitPromise: false,\n            arguments: keyValueArray,\n            returnByValue: false,\n            executionContextId: realm.executionContextId\n          });\n          // TODO(#375): Release `argEvalResult.result.objectId` after using.\n          return {\n            objectId: argEvalResult.result.objectId\n          };\n        }\n      case 'object':\n        {\n          // TODO(sadym): If none of the nested keys and values has a remote\n          //  reference, serialize to `unserializableValue` without CDP roundtrip.\n          const keyValueArray = await this.#flattenKeyValuePairs(argumentValue.value, realm);\n          const argEvalResult = await realm.cdpClient.sendCommand('Runtime.callFunctionOn', {\n            functionDeclaration: String((...args) => {\n              const result = {};\n              for (let i = 0; i < args.length; i += 2) {\n                // Key should be either `string`, `number`, or `symbol`.\n                const key = args[i];\n                result[key] = args[i + 1];\n              }\n              return result;\n            }),\n            awaitPromise: false,\n            arguments: keyValueArray,\n            returnByValue: false,\n            executionContextId: realm.executionContextId\n          });\n          // TODO(#375): Release `argEvalResult.result.objectId` after using.\n          return {\n            objectId: argEvalResult.result.objectId\n          };\n        }\n      case 'array':\n        {\n          // TODO(sadym): If none of the nested items has a remote reference,\n          // serialize to `unserializableValue` without CDP roundtrip.\n          const args = await this.#flattenValueList(argumentValue.value, realm);\n          const argEvalResult = await realm.cdpClient.sendCommand('Runtime.callFunctionOn', {\n            functionDeclaration: String((...args) => {\n              return args;\n            }),\n            awaitPromise: false,\n            arguments: args,\n            returnByValue: false,\n            executionContextId: realm.executionContextId\n          });\n          // TODO(#375): Release `argEvalResult.result.objectId` after using.\n          return {\n            objectId: argEvalResult.result.objectId\n          };\n        }\n      case 'set':\n        {\n          // TODO(sadym): if none of the nested items has a remote reference,\n          // serialize to `unserializableValue` without CDP roundtrip.\n          const args = await this.#flattenValueList(argumentValue.value, realm);\n          const argEvalResult = await realm.cdpClient.sendCommand('Runtime.callFunctionOn', {\n            functionDeclaration: String((...args) => {\n              return new Set(args);\n            }),\n            awaitPromise: false,\n            arguments: args,\n            returnByValue: false,\n            executionContextId: realm.executionContextId\n          });\n          // TODO(#375): Release `argEvalResult.result.objectId` after using.\n          return {\n            objectId: argEvalResult.result.objectId\n          };\n        }\n      case 'channel':\n        {\n          const createChannelHandleResult = await realm.cdpClient.sendCommand('Runtime.callFunctionOn', {\n            functionDeclaration: String(() => {\n              const queue = [];\n              let queueNonEmptyResolver = null;\n              return {\n                /**\n                 * Gets a promise, which is resolved as soon as a message occurs\n                 * in the queue.\n                 */\n                async getMessage() {\n                  const onMessage = queue.length > 0 ? Promise.resolve() : new Promise(resolve => {\n                    queueNonEmptyResolver = resolve;\n                  });\n                  await onMessage;\n                  return queue.shift();\n                },\n                /**\n                 * Adds a message to the queue.\n                 * Resolves the pending promise if needed.\n                 */\n                sendMessage(message) {\n                  queue.push(message);\n                  if (queueNonEmptyResolver !== null) {\n                    queueNonEmptyResolver();\n                    queueNonEmptyResolver = null;\n                  }\n                }\n              };\n            }),\n            returnByValue: false,\n            executionContextId: realm.executionContextId,\n            generateWebDriverValue: false\n          });\n          const channelHandle = createChannelHandleResult.result.objectId;\n          // Long-poll the message queue asynchronously.\n          void this.#initChannelListener(argumentValue, channelHandle, realm);\n          const sendMessageArgResult = await realm.cdpClient.sendCommand('Runtime.callFunctionOn', {\n            functionDeclaration: String(channelHandle => {\n              return channelHandle.sendMessage;\n            }),\n            arguments: [{\n              objectId: channelHandle\n            }],\n            returnByValue: false,\n            executionContextId: realm.executionContextId,\n            generateWebDriverValue: false\n          });\n          return {\n            objectId: sendMessageArgResult.result.objectId\n          };\n        }\n      // TODO(#375): Dispose of nested objects.\n      default:\n        throw new Error(`Value ${JSON.stringify(argumentValue)} is not deserializable.`);\n    }\n  }\n  async #flattenKeyValuePairs(mapping, realm) {\n    const keyValueArray = [];\n    for (const [key, value] of mapping) {\n      let keyArg;\n      if (typeof key === 'string') {\n        // Key is a string.\n        keyArg = {\n          value: key\n        };\n      } else {\n        // Key is a serialized value.\n        keyArg = await this.#deserializeToCdpArg(key, realm);\n      }\n      const valueArg = await this.#deserializeToCdpArg(value, realm);\n      keyValueArray.push(keyArg);\n      keyValueArray.push(valueArg);\n    }\n    return keyValueArray;\n  }\n  async #flattenValueList(list, realm) {\n    return Promise.all(list.map(value => this.#deserializeToCdpArg(value, realm)));\n  }\n  async #initChannelListener(channel, channelHandle, realm) {\n    const channelId = channel.value.channel;\n    // TODO(#294): Remove this loop after the realm is destroyed.\n    // Rely on the CDP throwing exception in such a case.\n    for (;;) {\n      const message = await realm.cdpClient.sendCommand('Runtime.callFunctionOn', {\n        functionDeclaration: String(async channelHandle => channelHandle.getMessage()),\n        arguments: [{\n          objectId: channelHandle\n        }],\n        awaitPromise: true,\n        executionContextId: realm.executionContextId,\n        generateWebDriverValue: true\n      });\n      this.#eventManager.registerEvent({\n        method: protocol_js_1.Script.EventNames.MessageEvent,\n        params: {\n          channel: channelId,\n          data: realm.cdpToBidiValue(message, channel.value.ownership ?? 'none'),\n          source: {\n            realm: realm.realmId,\n            context: realm.browsingContextId\n          }\n        }\n      }, realm.browsingContextId);\n    }\n  }\n  async #serializeCdpExceptionDetails(cdpExceptionDetails, lineOffset, resultOwnership, realm) {\n    const callFrames = cdpExceptionDetails.stackTrace?.callFrames.map(frame => ({\n      url: frame.url,\n      functionName: frame.functionName,\n      // As `script.evaluate` wraps call into serialization script, so\n      // `lineNumber` should be adjusted.\n      lineNumber: frame.lineNumber - lineOffset,\n      columnNumber: frame.columnNumber\n    }));\n    const exception = await this.serializeCdpObject(\n    // Exception should always be there.\n    cdpExceptionDetails.exception, resultOwnership, realm);\n    const text = await ScriptEvaluator.stringifyObject(cdpExceptionDetails.exception, realm);\n    return {\n      exception,\n      columnNumber: cdpExceptionDetails.columnNumber,\n      // As `script.evaluate` wraps call into serialization script, so\n      // `lineNumber` should be adjusted.\n      lineNumber: cdpExceptionDetails.lineNumber - lineOffset,\n      stackTrace: {\n        callFrames: callFrames || []\n      },\n      text: text || cdpExceptionDetails.text\n    };\n  }\n}\nexports.ScriptEvaluator = ScriptEvaluator;","map":{"version":3,"names":["protocol_js_1","require","CALL_FUNCTION_STACKTRACE_LINE_OFFSET","EVALUATE_STACKTRACE_LINE_OFFSET","exports","SHARED_ID_DIVIDER","ScriptEvaluator","eventManager","constructor","stringifyObject","cdpObject","realm","stringifyResult","cdpClient","sendCommand","functionDeclaration","String","obj","awaitPromise","arguments","returnByValue","executionContextId","result","value","serializeCdpObject","cdpRemoteObject","resultOwnership","arg","cdpRemoteObjectToCallArgument","cdpWebDriverValue","generateWebDriverValue","cdpToBidiValue","scriptEvaluate","expression","cdpEvaluateResult","contextId","exceptionDetails","serializeCdpExceptionDetails","type","realmId","callFunction","_this","_arguments","callFunctionAndSerializeScript","thisAndArgumentsList","deserializeToCdpArg","push","Promise","all","map","a","cdpCallFunctionResult","e","code","includes","message","Message","NoSuchHandleException","#cdpRemoteObjectToCallArgument","objectId","undefined","unserializableValue","#deserializeToCdpArg","argumentValue","navigableId","rawBackendNodeId","sharedId","split","backendNodeId","parseInt","isNaN","InvalidArgumentException","NoSuchNodeException","object","handle","Boolean","JSON","stringify","pattern","flags","keyValueArray","flattenKeyValuePairs","argEvalResult","args","Map","i","length","set","key","flattenValueList","Set","createChannelHandleResult","queue","queueNonEmptyResolver","getMessage","onMessage","resolve","shift","sendMessage","channelHandle","initChannelListener","sendMessageArgResult","Error","#flattenKeyValuePairs","mapping","keyArg","valueArg","#flattenValueList","list","#initChannelListener","channel","channelId","registerEvent","method","Script","EventNames","MessageEvent","params","data","ownership","source","context","browsingContextId","#serializeCdpExceptionDetails","cdpExceptionDetails","lineOffset","callFrames","stackTrace","frame","url","functionName","lineNumber","columnNumber","exception","text"],"sources":["../../../../../src/bidiMapper/domains/script/scriptEvaluator.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}