{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2023 Google LLC.\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CdpTarget = void 0;\nconst logManager_1 = require(\"../log/logManager\");\nconst protocol_1 = require(\"../../../protocol/protocol\");\nconst deferred_1 = require(\"../../../utils/deferred\");\nconst networkProcessor_1 = require(\"../network/networkProcessor\");\nclass CdpTarget {\n  #targetUnblocked;\n  #targetId;\n  #cdpClient;\n  #eventManager;\n  #cdpSessionId;\n  #networkDomainActivated;\n  static create(targetId, cdpClient, cdpSessionId, realmStorage, eventManager) {\n    const cdpTarget = new CdpTarget(targetId, cdpClient, cdpSessionId, eventManager);\n    logManager_1.LogManager.create(cdpTarget, realmStorage, eventManager);\n    cdpTarget.#setEventListeners();\n    // No need in waiting. Deferred will be resolved when the target is unblocked.\n    void cdpTarget.#unblock();\n    return cdpTarget;\n  }\n  constructor(targetId, cdpClient, cdpSessionId, eventManager) {\n    this.#targetId = targetId;\n    this.#cdpClient = cdpClient;\n    this.#cdpSessionId = cdpSessionId;\n    this.#eventManager = eventManager;\n    this.#networkDomainActivated = false;\n    this.#targetUnblocked = new deferred_1.Deferred();\n  }\n  /**\n   * Returns a promise that resolves when the target is unblocked.\n   */\n  get targetUnblocked() {\n    return this.#targetUnblocked;\n  }\n  get targetId() {\n    return this.#targetId;\n  }\n  get cdpClient() {\n    return this.#cdpClient;\n  }\n  /**\n   * Needed for CDP escape path.\n   */\n  get cdpSessionId() {\n    return this.#cdpSessionId;\n  }\n  /**\n   * Enables all the required CDP domains and unblocks the target.\n   */\n  async #unblock() {\n    // Enable Network domain, if it is enabled globally.\n    // TODO: enable Network domain for OOPiF targets.\n    if (this.#eventManager.isNetworkDomainEnabled) {\n      await this.enableNetworkDomain();\n    }\n    await this.#cdpClient.sendCommand('Runtime.enable');\n    await this.#cdpClient.sendCommand('Page.enable');\n    await this.#cdpClient.sendCommand('Page.setLifecycleEventsEnabled', {\n      enabled: true\n    });\n    await this.#cdpClient.sendCommand('Target.setAutoAttach', {\n      autoAttach: true,\n      waitForDebuggerOnStart: true,\n      flatten: true\n    });\n    await this.#cdpClient.sendCommand('Runtime.runIfWaitingForDebugger');\n    this.#targetUnblocked.resolve();\n  }\n  /**\n   * Enables the Network domain (creates NetworkProcessor on the target's cdp\n   * client) if it is not enabled yet.\n   */\n  async enableNetworkDomain() {\n    if (!this.#networkDomainActivated) {\n      this.#networkDomainActivated = true;\n      await networkProcessor_1.NetworkProcessor.create(this.cdpClient, this.#eventManager);\n    }\n  }\n  #setEventListeners() {\n    this.#cdpClient.on('*', (method, params) => {\n      this.#eventManager.registerEvent({\n        method: protocol_1.CDP.EventNames.EventReceivedEvent,\n        params: {\n          cdpMethod: method,\n          cdpParams: params || {},\n          cdpSession: this.#cdpSessionId\n        }\n      }, null);\n    });\n  }\n}\nexports.CdpTarget = CdpTarget;","map":{"version":3,"names":["logManager_1","require","protocol_1","deferred_1","networkProcessor_1","CdpTarget","targetUnblocked","targetId","cdpClient","eventManager","cdpSessionId","networkDomainActivated","create","realmStorage","cdpTarget","LogManager","setEventListeners","unblock","constructor","Deferred","#unblock","isNetworkDomainEnabled","enableNetworkDomain","sendCommand","enabled","autoAttach","waitForDebuggerOnStart","flatten","resolve","NetworkProcessor","#setEventListeners","on","method","params","registerEvent","CDP","EventNames","EventReceivedEvent","cdpMethod","cdpParams","cdpSession","exports"],"sources":["../../../../../src/bidiMapper/domains/context/cdpTarget.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}