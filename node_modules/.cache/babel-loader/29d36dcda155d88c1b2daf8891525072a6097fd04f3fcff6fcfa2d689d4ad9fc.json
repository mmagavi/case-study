{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExplorerSync = void 0;\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _cacheWrapper = require(\"./cacheWrapper\");\nvar _ExplorerBase = require(\"./ExplorerBase\");\nvar _getDirectory = require(\"./getDirectory\");\nvar _readFile = require(\"./readFile\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nclass ExplorerSync extends _ExplorerBase.ExplorerBase {\n  constructor(options) {\n    super(options);\n  }\n  searchSync(searchFrom = process.cwd()) {\n    if (this.config.metaConfigFilePath) {\n      const config = this._loadFileSync(this.config.metaConfigFilePath, true);\n      if (config && !config.isEmpty) {\n        return config;\n      }\n    }\n    return this.searchFromDirectorySync((0, _getDirectory.getDirectorySync)(searchFrom));\n  }\n  searchFromDirectorySync(dir) {\n    const absoluteDir = _path.default.resolve(process.cwd(), dir);\n    const run = () => {\n      const result = this.searchDirectorySync(absoluteDir);\n      const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n      if (nextDir) {\n        return this.searchFromDirectorySync(nextDir);\n      }\n      return this.config.transform(result);\n    };\n    if (this.searchCache) {\n      return (0, _cacheWrapper.cacheWrapperSync)(this.searchCache, absoluteDir, run);\n    }\n    return run();\n  }\n  searchDirectorySync(dir) {\n    for (const place of this.config.searchPlaces) {\n      const placeResult = this.loadSearchPlaceSync(dir, place);\n      if (this.shouldSearchStopWithResult(placeResult)) {\n        return placeResult;\n      }\n    } // config not found\n\n    return null;\n  }\n  loadSearchPlaceSync(dir, place) {\n    const filepath = _path.default.join(dir, place);\n    const content = (0, _readFile.readFileSync)(filepath);\n    return this.createCosmiconfigResultSync(filepath, content, false);\n  }\n  loadFileContentSync(filepath, content) {\n    if (content === null) {\n      return null;\n    }\n    if (content.trim() === '') {\n      return undefined;\n    }\n    const loader = this.getLoaderEntryForFile(filepath);\n    try {\n      return loader(filepath, content);\n    } catch (e) {\n      e.filepath = filepath;\n      throw e;\n    }\n  }\n  createCosmiconfigResultSync(filepath, content, forceProp) {\n    const fileContent = this.loadFileContentSync(filepath, content);\n    return this.loadedContentToCosmiconfigResult(filepath, fileContent, forceProp);\n  }\n  loadSync(filepath) {\n    return this._loadFileSync(filepath, false);\n  }\n  _loadFileSync(filepath, forceProp) {\n    this.validateFilePath(filepath);\n    const absoluteFilePath = _path.default.resolve(process.cwd(), filepath);\n    const runLoadSync = () => {\n      const content = (0, _readFile.readFileSync)(absoluteFilePath, {\n        throwNotFound: true\n      });\n      const cosmiconfigResult = this.createCosmiconfigResultSync(absoluteFilePath, content, forceProp);\n      return this.config.transform(cosmiconfigResult);\n    };\n    if (this.loadCache) {\n      return (0, _cacheWrapper.cacheWrapperSync)(this.loadCache, absoluteFilePath, runLoadSync);\n    }\n    return runLoadSync();\n  }\n}\nexports.ExplorerSync = ExplorerSync;","map":{"version":3,"names":["_path","_interopRequireDefault","require","_cacheWrapper","_ExplorerBase","_getDirectory","_readFile","ExplorerSync","ExplorerBase","constructor","options","searchSync","searchFrom","process","cwd","config","metaConfigFilePath","_loadFileSync","isEmpty","searchFromDirectorySync","getDirectorySync","dir","absoluteDir","default","resolve","run","result","searchDirectorySync","nextDir","nextDirectoryToSearch","transform","searchCache","cacheWrapperSync","place","searchPlaces","placeResult","loadSearchPlaceSync","shouldSearchStopWithResult","filepath","join","content","readFileSync","createCosmiconfigResultSync","loadFileContentSync","trim","undefined","loader","getLoaderEntryForFile","e","forceProp","fileContent","loadedContentToCosmiconfigResult","loadSync","validateFilePath","absoluteFilePath","runLoadSync","throwNotFound","cosmiconfigResult","loadCache"],"sources":["/Users/mayamagavi/instalily/case-study/node_modules/puppeteer/node_modules/cosmiconfig/src/ExplorerSync.ts"],"sourcesContent":["import path from 'path';\nimport { cacheWrapperSync } from './cacheWrapper';\nimport { ExplorerBase } from './ExplorerBase';\nimport { getDirectorySync } from './getDirectory';\nimport { readFileSync } from './readFile';\nimport {\n  CosmiconfigResult,\n  ExplorerOptionsSync,\n  LoadedFileContent,\n} from './types';\n\nclass ExplorerSync extends ExplorerBase<ExplorerOptionsSync> {\n  public constructor(options: ExplorerOptionsSync) {\n    super(options);\n  }\n\n  public searchSync(searchFrom: string = process.cwd()): CosmiconfigResult {\n    if (this.config.metaConfigFilePath) {\n      const config = this._loadFileSync(this.config.metaConfigFilePath, true);\n      if (config && !config.isEmpty) {\n        return config;\n      }\n    }\n    return this.searchFromDirectorySync(getDirectorySync(searchFrom));\n  }\n\n  private searchFromDirectorySync(dir: string): CosmiconfigResult {\n    const absoluteDir = path.resolve(process.cwd(), dir);\n\n    const run = (): CosmiconfigResult => {\n      const result = this.searchDirectorySync(absoluteDir);\n      const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n\n      if (nextDir) {\n        return this.searchFromDirectorySync(nextDir);\n      }\n\n      return this.config.transform(result);\n    };\n\n    if (this.searchCache) {\n      return cacheWrapperSync(this.searchCache, absoluteDir, run);\n    }\n\n    return run();\n  }\n\n  private searchDirectorySync(dir: string): CosmiconfigResult {\n    for (const place of this.config.searchPlaces) {\n      const placeResult = this.loadSearchPlaceSync(dir, place);\n\n      if (this.shouldSearchStopWithResult(placeResult)) {\n        return placeResult;\n      }\n    }\n\n    // config not found\n    return null;\n  }\n\n  private loadSearchPlaceSync(dir: string, place: string): CosmiconfigResult {\n    const filepath = path.join(dir, place);\n    const content = readFileSync(filepath);\n\n    return this.createCosmiconfigResultSync(filepath, content, false);\n  }\n\n  private loadFileContentSync(\n    filepath: string,\n    content: string | null,\n  ): LoadedFileContent {\n    if (content === null) {\n      return null;\n    }\n    if (content.trim() === '') {\n      return undefined;\n    }\n    const loader = this.getLoaderEntryForFile(filepath);\n    try {\n      return loader(filepath, content);\n    } catch (e: any) {\n      e.filepath = filepath;\n      throw e;\n    }\n  }\n\n  private createCosmiconfigResultSync(\n    filepath: string,\n    content: string | null,\n    forceProp: boolean,\n  ): CosmiconfigResult {\n    const fileContent = this.loadFileContentSync(filepath, content);\n\n    return this.loadedContentToCosmiconfigResult(\n      filepath,\n      fileContent,\n      forceProp,\n    );\n  }\n\n  public loadSync(filepath: string): CosmiconfigResult {\n    return this._loadFileSync(filepath, false);\n  }\n\n  private _loadFileSync(\n    filepath: string,\n    forceProp: boolean,\n  ): CosmiconfigResult {\n    this.validateFilePath(filepath);\n    const absoluteFilePath = path.resolve(process.cwd(), filepath);\n\n    const runLoadSync = (): CosmiconfigResult => {\n      const content = readFileSync(absoluteFilePath, { throwNotFound: true });\n      const cosmiconfigResult = this.createCosmiconfigResultSync(\n        absoluteFilePath,\n        content,\n        forceProp,\n      );\n\n      return this.config.transform(cosmiconfigResult);\n    };\n\n    if (this.loadCache) {\n      return cacheWrapperSync(this.loadCache, absoluteFilePath, runLoadSync);\n    }\n\n    return runLoadSync();\n  }\n}\n\nexport { ExplorerSync };\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}