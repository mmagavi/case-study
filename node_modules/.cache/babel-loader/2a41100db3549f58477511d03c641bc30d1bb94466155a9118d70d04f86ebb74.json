{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2022 Google LLC.\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRemoteValuesText = exports.logMessageFormatter = void 0;\nconst specifiers = ['%s', '%d', '%i', '%f', '%o', '%O', '%c'];\nfunction isFormmatSpecifier(str) {\n  return specifiers.some(spec => str.includes(spec));\n}\n/**\n * @param args input remote values to be format printed\n * @return parsed text of the remote values in specific format\n */\nfunction logMessageFormatter(args) {\n  let output = '';\n  const argFormat = args[0].value.toString();\n  const argValues = args.slice(1, undefined);\n  const tokens = argFormat.split(new RegExp(specifiers.map(spec => `(${spec})`).join('|'), 'g'));\n  for (const token of tokens) {\n    if (token === undefined || token === '') {\n      continue;\n    }\n    if (isFormmatSpecifier(token)) {\n      const arg = argValues.shift();\n      // raise an exception when less value is provided\n      if (arg === undefined) {\n        throw new Error(`Less value is provided: \"${getRemoteValuesText(args, false)}\"`);\n      }\n      if (token === '%s') {\n        output += stringFromArg(arg);\n      } else if (token === '%d' || token === '%i') {\n        if (arg.type === 'bigint' || arg.type === 'number' || arg.type === 'string') {\n          output += parseInt(arg.value.toString(), 10);\n        } else {\n          output += 'NaN';\n        }\n      } else if (token === '%f') {\n        if (arg.type === 'bigint' || arg.type === 'number' || arg.type === 'string') {\n          output += parseFloat(arg.value.toString());\n        } else {\n          output += 'NaN';\n        }\n      } else {\n        // %o, %O, %c\n        output += toJson(arg);\n      }\n    } else {\n      output += token;\n    }\n  }\n  // raise an exception when more value is provided\n  if (argValues.length > 0) {\n    throw new Error(`More value is provided: \"${getRemoteValuesText(args, false)}\"`);\n  }\n  return output;\n}\nexports.logMessageFormatter = logMessageFormatter;\n/**\n * @param arg input remote value to be parsed\n * @return parsed text of the remote value\n *\n * input: {\"type\": \"number\", \"value\": 1}\n * output: 1\n *\n * input: {\"type\": \"string\", \"value\": \"abc\"}\n * output: \"abc\"\n *\n * input: {\"type\": \"object\",  \"value\": [[\"id\", {\"type\": \"number\", \"value\": 1}]]}\n * output: '{\"id\": 1}'\n *\n * input: {\"type\": \"object\", \"value\": [[\"font-size\", {\"type\": \"string\", \"value\": \"20px\"}]]}\n * output: '{\"font-size\": \"20px\"}'\n */\nfunction toJson(arg) {\n  // arg type validation\n  if (arg.type !== 'array' && arg.type !== 'bigint' && arg.type !== 'date' && arg.type !== 'number' && arg.type !== 'object' && arg.type !== 'string') {\n    return stringFromArg(arg);\n  }\n  if (arg.type === 'bigint') {\n    return `${arg.value.toString()}n`;\n  }\n  if (arg.type === 'number') {\n    return arg.value.toString();\n  }\n  if (['date', 'string'].includes(arg.type)) {\n    return JSON.stringify(arg.value);\n  }\n  if (arg.type === 'object') {\n    return `{${arg.value.map(pair => {\n      return `${JSON.stringify(pair[0])}:${toJson(pair[1])}`;\n    }).join(',')}}`;\n  }\n  if (arg.type === 'array') {\n    return `[${arg.value?.map(val => toJson(val)).join(',') ?? ''}]`;\n  }\n  throw Error(`Invalid value type: ${arg.toString()}`);\n}\nfunction stringFromArg(arg) {\n  if (!Object.hasOwn(arg, 'value')) {\n    return arg.type;\n  }\n  switch (arg.type) {\n    case 'string':\n    case 'number':\n    case 'boolean':\n    case 'bigint':\n      return String(arg.value);\n    case 'regexp':\n      return `/${arg.value.pattern}/${arg.value.flags ?? ''}`;\n    case 'date':\n      return new Date(arg.value).toString();\n    case 'object':\n      return `Object(${arg.value?.length ?? ''})`;\n    case 'array':\n      return `Array(${arg.value?.length ?? ''})`;\n    case 'map':\n      return `Map(${arg.value.length})`;\n    case 'set':\n      return `Set(${arg.value.length})`;\n    case 'node':\n      return 'node';\n    default:\n      return arg.type;\n  }\n}\nfunction getRemoteValuesText(args, formatText) {\n  const arg = args[0];\n  if (!arg) {\n    return '';\n  }\n  // if args[0] is a format specifier, format the args as output\n  if (arg.type === 'string' && isFormmatSpecifier(arg.value.toString()) && formatText) {\n    return logMessageFormatter(args);\n  }\n  // if args[0] is not a format specifier, just join the args with \\u0020 (unicode 'SPACE')\n  return args.map(arg => {\n    return stringFromArg(arg);\n  }).join('\\u0020');\n}\nexports.getRemoteValuesText = getRemoteValuesText;","map":{"version":3,"names":["specifiers","isFormmatSpecifier","str","some","spec","includes","logMessageFormatter","args","output","argFormat","value","toString","argValues","slice","undefined","tokens","split","RegExp","map","join","token","arg","shift","Error","getRemoteValuesText","stringFromArg","type","parseInt","parseFloat","toJson","length","exports","JSON","stringify","pair","val","Object","hasOwn","String","pattern","flags","Date","formatText"],"sources":["../../../../../src/bidiMapper/domains/log/logHelper.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}