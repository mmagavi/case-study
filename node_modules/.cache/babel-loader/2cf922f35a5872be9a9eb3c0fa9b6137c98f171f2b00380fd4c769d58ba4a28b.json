{"ast":null,"code":"import OpenAI from \"openai\";\nconst api_key = \"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\";\nexport const getAIMessage = async userQuery => {\n  const completion = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": 'Bearer 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'\n    },\n    body: JSON.stringify({\n      model: \"gpt-4o-mini\",\n      messages: [\n      // System role defines behavior + context (prompt)\n      {\n        role: \"system\",\n        content: `You are a user reading an online forum site about a certain medical issue. \n            You want to be sure that the posts you are reading are not written in a misleading way or by relying heavily \n            on anecdotes to make conclusions. Read this post, and find the central claim and the pieces of evidence used to support it. \n            Classify important medical claims in the post as one of the following: personal experience, \n            anecdotal, unlikely to be supported by evidence, misleading, untrue, likely to be supported by evidence, not misleading, verifiable. \n            Back up classifications with reasoning, but treat posts and sensitive experiences with kindness. Keep your response concise`\n      }, {\n        // User role defines first message in the chat (post to respond to)\n        role: \"user\",\n        content: userQuery\n      }]\n    })\n  });\n  const data = await completion.json();\n  response = data.choices[0].message.content;\n  console.log(response);\n  return response;\n};","map":{"version":3,"names":["OpenAI","api_key","getAIMessage","userQuery","completion","fetch","method","headers","body","JSON","stringify","model","messages","role","content","data","json","response","choices","message","console","log"],"sources":["/Users/mayamagavi/instalily/case-study/src/api/api.js"],"sourcesContent":["import OpenAI from \"openai\";\n\nconst api_key = \"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\";\n\nexport const getAIMessage = async (userQuery) => {\n\n  const completion = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n    method: \"POST\",\n    headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": 'Bearer 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',\n    },\n    body: JSON.stringify({\n        model: \"gpt-4o-mini\",\n        messages: [\n            // System role defines behavior + context (prompt)\n            { role: \"system\", content: `You are a user reading an online forum site about a certain medical issue. \n            You want to be sure that the posts you are reading are not written in a misleading way or by relying heavily \n            on anecdotes to make conclusions. Read this post, and find the central claim and the pieces of evidence used to support it. \n            Classify important medical claims in the post as one of the following: personal experience, \n            anecdotal, unlikely to be supported by evidence, misleading, untrue, likely to be supported by evidence, not misleading, verifiable. \n            Back up classifications with reasoning, but treat posts and sensitive experiences with kindness. Keep your response concise` },\n            {\n            // User role defines first message in the chat (post to respond to)\n                role: \"user\",\n                content: userQuery\n            },\n        ]\n    })\n  });\n  const data = await completion.json();\n  response = data.choices[0].message.content;\n  console.log(response);\n  return response\n  \n};"],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAE3B,MAAMC,OAAO,GAAG,sKAAsK;AAEtL,OAAO,MAAMC,YAAY,GAAG,MAAOC,SAAS,IAAK;EAE/C,MAAMC,UAAU,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;IAC3EC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE;IACrB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjBC,KAAK,EAAE,aAAa;MACpBC,QAAQ,EAAE;MACN;MACA;QAAEC,IAAI,EAAE,QAAQ;QAAEC,OAAO,EAAG;AACxC;AACA;AACA;AACA;AACA;MAAyI,CAAC,EAC9H;QACA;QACID,IAAI,EAAE,MAAM;QACZC,OAAO,EAAEX;MACb,CAAC;IAET,CAAC;EACH,CAAC,CAAC;EACF,MAAMY,IAAI,GAAG,MAAMX,UAAU,CAACY,IAAI,CAAC,CAAC;EACpCC,QAAQ,GAAGF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACL,OAAO;EAC1CM,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;EACrB,OAAOA,QAAQ;AAEjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}