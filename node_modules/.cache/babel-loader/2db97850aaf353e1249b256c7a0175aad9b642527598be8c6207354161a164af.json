{"ast":null,"code":"/**\n * Copyright 2022 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _NetworkEventManager_requestWillBeSentMap, _NetworkEventManager_requestPausedMap, _NetworkEventManager_httpRequestsMap, _NetworkEventManager_responseReceivedExtraInfoMap, _NetworkEventManager_queuedRedirectInfoMap, _NetworkEventManager_queuedEventGroupMap;\n/**\n * Helper class to track network events by request ID\n *\n * @internal\n */\nexport class NetworkEventManager {\n  constructor() {\n    /**\n     * There are four possible orders of events:\n     * A. `_onRequestWillBeSent`\n     * B. `_onRequestWillBeSent`, `_onRequestPaused`\n     * C. `_onRequestPaused`, `_onRequestWillBeSent`\n     * D. `_onRequestPaused`, `_onRequestWillBeSent`, `_onRequestPaused`,\n     * `_onRequestWillBeSent`, `_onRequestPaused`, `_onRequestPaused`\n     * (see crbug.com/1196004)\n     *\n     * For `_onRequest` we need the event from `_onRequestWillBeSent` and\n     * optionally the `interceptionId` from `_onRequestPaused`.\n     *\n     * If request interception is disabled, call `_onRequest` once per call to\n     * `_onRequestWillBeSent`.\n     * If request interception is enabled, call `_onRequest` once per call to\n     * `_onRequestPaused` (once per `interceptionId`).\n     *\n     * Events are stored to allow for subsequent events to call `_onRequest`.\n     *\n     * Note that (chains of) redirect requests have the same `requestId` (!) as\n     * the original request. We have to anticipate series of events like these:\n     * A. `_onRequestWillBeSent`,\n     * `_onRequestWillBeSent`, ...\n     * B. `_onRequestWillBeSent`, `_onRequestPaused`,\n     * `_onRequestWillBeSent`, `_onRequestPaused`, ...\n     * C. `_onRequestWillBeSent`, `_onRequestPaused`,\n     * `_onRequestPaused`, `_onRequestWillBeSent`, ...\n     * D. `_onRequestPaused`, `_onRequestWillBeSent`,\n     * `_onRequestPaused`, `_onRequestWillBeSent`, `_onRequestPaused`,\n     * `_onRequestWillBeSent`, `_onRequestPaused`, `_onRequestPaused`, ...\n     * (see crbug.com/1196004)\n     */\n    _NetworkEventManager_requestWillBeSentMap.set(this, new Map());\n    _NetworkEventManager_requestPausedMap.set(this, new Map());\n    _NetworkEventManager_httpRequestsMap.set(this, new Map());\n    /*\n     * The below maps are used to reconcile Network.responseReceivedExtraInfo\n     * events with their corresponding request. Each response and redirect\n     * response gets an ExtraInfo event, and we don't know which will come first.\n     * This means that we have to store a Response or an ExtraInfo for each\n     * response, and emit the event when we get both of them. In addition, to\n     * handle redirects, we have to make them Arrays to represent the chain of\n     * events.\n     */\n    _NetworkEventManager_responseReceivedExtraInfoMap.set(this, new Map());\n    _NetworkEventManager_queuedRedirectInfoMap.set(this, new Map());\n    _NetworkEventManager_queuedEventGroupMap.set(this, new Map());\n  }\n  forget(networkRequestId) {\n    __classPrivateFieldGet(this, _NetworkEventManager_requestWillBeSentMap, \"f\").delete(networkRequestId);\n    __classPrivateFieldGet(this, _NetworkEventManager_requestPausedMap, \"f\").delete(networkRequestId);\n    __classPrivateFieldGet(this, _NetworkEventManager_queuedEventGroupMap, \"f\").delete(networkRequestId);\n    __classPrivateFieldGet(this, _NetworkEventManager_queuedRedirectInfoMap, \"f\").delete(networkRequestId);\n    __classPrivateFieldGet(this, _NetworkEventManager_responseReceivedExtraInfoMap, \"f\").delete(networkRequestId);\n  }\n  responseExtraInfo(networkRequestId) {\n    if (!__classPrivateFieldGet(this, _NetworkEventManager_responseReceivedExtraInfoMap, \"f\").has(networkRequestId)) {\n      __classPrivateFieldGet(this, _NetworkEventManager_responseReceivedExtraInfoMap, \"f\").set(networkRequestId, []);\n    }\n    return __classPrivateFieldGet(this, _NetworkEventManager_responseReceivedExtraInfoMap, \"f\").get(networkRequestId);\n  }\n  queuedRedirectInfo(fetchRequestId) {\n    if (!__classPrivateFieldGet(this, _NetworkEventManager_queuedRedirectInfoMap, \"f\").has(fetchRequestId)) {\n      __classPrivateFieldGet(this, _NetworkEventManager_queuedRedirectInfoMap, \"f\").set(fetchRequestId, []);\n    }\n    return __classPrivateFieldGet(this, _NetworkEventManager_queuedRedirectInfoMap, \"f\").get(fetchRequestId);\n  }\n  queueRedirectInfo(fetchRequestId, redirectInfo) {\n    this.queuedRedirectInfo(fetchRequestId).push(redirectInfo);\n  }\n  takeQueuedRedirectInfo(fetchRequestId) {\n    return this.queuedRedirectInfo(fetchRequestId).shift();\n  }\n  numRequestsInProgress() {\n    return [...__classPrivateFieldGet(this, _NetworkEventManager_httpRequestsMap, \"f\")].filter(([, request]) => {\n      return !request.response();\n    }).length;\n  }\n  storeRequestWillBeSent(networkRequestId, event) {\n    __classPrivateFieldGet(this, _NetworkEventManager_requestWillBeSentMap, \"f\").set(networkRequestId, event);\n  }\n  getRequestWillBeSent(networkRequestId) {\n    return __classPrivateFieldGet(this, _NetworkEventManager_requestWillBeSentMap, \"f\").get(networkRequestId);\n  }\n  forgetRequestWillBeSent(networkRequestId) {\n    __classPrivateFieldGet(this, _NetworkEventManager_requestWillBeSentMap, \"f\").delete(networkRequestId);\n  }\n  getRequestPaused(networkRequestId) {\n    return __classPrivateFieldGet(this, _NetworkEventManager_requestPausedMap, \"f\").get(networkRequestId);\n  }\n  forgetRequestPaused(networkRequestId) {\n    __classPrivateFieldGet(this, _NetworkEventManager_requestPausedMap, \"f\").delete(networkRequestId);\n  }\n  storeRequestPaused(networkRequestId, event) {\n    __classPrivateFieldGet(this, _NetworkEventManager_requestPausedMap, \"f\").set(networkRequestId, event);\n  }\n  getRequest(networkRequestId) {\n    return __classPrivateFieldGet(this, _NetworkEventManager_httpRequestsMap, \"f\").get(networkRequestId);\n  }\n  storeRequest(networkRequestId, request) {\n    __classPrivateFieldGet(this, _NetworkEventManager_httpRequestsMap, \"f\").set(networkRequestId, request);\n  }\n  forgetRequest(networkRequestId) {\n    __classPrivateFieldGet(this, _NetworkEventManager_httpRequestsMap, \"f\").delete(networkRequestId);\n  }\n  getQueuedEventGroup(networkRequestId) {\n    return __classPrivateFieldGet(this, _NetworkEventManager_queuedEventGroupMap, \"f\").get(networkRequestId);\n  }\n  queueEventGroup(networkRequestId, event) {\n    __classPrivateFieldGet(this, _NetworkEventManager_queuedEventGroupMap, \"f\").set(networkRequestId, event);\n  }\n  forgetQueuedEventGroup(networkRequestId) {\n    __classPrivateFieldGet(this, _NetworkEventManager_queuedEventGroupMap, \"f\").delete(networkRequestId);\n  }\n}\n_NetworkEventManager_requestWillBeSentMap = new WeakMap(), _NetworkEventManager_requestPausedMap = new WeakMap(), _NetworkEventManager_httpRequestsMap = new WeakMap(), _NetworkEventManager_responseReceivedExtraInfoMap = new WeakMap(), _NetworkEventManager_queuedRedirectInfoMap = new WeakMap(), _NetworkEventManager_queuedEventGroupMap = new WeakMap();","map":{"version":3,"names":["NetworkEventManager","constructor","_NetworkEventManager_requestWillBeSentMap","set","Map","_NetworkEventManager_requestPausedMap","_NetworkEventManager_httpRequestsMap","_NetworkEventManager_responseReceivedExtraInfoMap","_NetworkEventManager_queuedRedirectInfoMap","_NetworkEventManager_queuedEventGroupMap","forget","networkRequestId","__classPrivateFieldGet","delete","responseExtraInfo","has","get","queuedRedirectInfo","fetchRequestId","queueRedirectInfo","redirectInfo","push","takeQueuedRedirectInfo","shift","numRequestsInProgress","filter","request","response","length","storeRequestWillBeSent","event","getRequestWillBeSent","forgetRequestWillBeSent","getRequestPaused","forgetRequestPaused","storeRequestPaused","getRequest","storeRequest","forgetRequest","getQueuedEventGroup","queueEventGroup","forgetQueuedEventGroup"],"sources":["../../../../src/common/NetworkEventManager.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}