{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _CDPBrowser_instances, _CDPBrowser_ignoreHTTPSErrors, _CDPBrowser_defaultViewport, _CDPBrowser_process, _CDPBrowser_connection, _CDPBrowser_closeCallback, _CDPBrowser_targetFilterCallback, _CDPBrowser_isPageTargetCallback, _CDPBrowser_defaultContext, _CDPBrowser_contexts, _CDPBrowser_screenshotTaskQueue, _CDPBrowser_targetManager, _CDPBrowser_emitDisconnected, _CDPBrowser_setIsPageTargetCallback, _CDPBrowser_createTarget, _CDPBrowser_onAttachedToTarget, _CDPBrowser_onDetachedFromTarget, _CDPBrowser_onTargetChanged, _CDPBrowser_onTargetDiscovered, _CDPBrowser_getVersion, _CDPBrowserContext_connection, _CDPBrowserContext_browser, _CDPBrowserContext_id;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CDPBrowserContext = exports.CDPBrowser = void 0;\nconst Browser_js_1 = require(\"../api/Browser.js\");\nconst BrowserContext_js_1 = require(\"../api/BrowserContext.js\");\nconst assert_js_1 = require(\"../util/assert.js\");\nconst DeferredPromise_js_1 = require(\"../util/DeferredPromise.js\");\nconst ChromeTargetManager_js_1 = require(\"./ChromeTargetManager.js\");\nconst Connection_js_1 = require(\"./Connection.js\");\nconst FirefoxTargetManager_js_1 = require(\"./FirefoxTargetManager.js\");\nconst Target_js_1 = require(\"./Target.js\");\nconst TaskQueue_js_1 = require(\"./TaskQueue.js\");\nconst util_js_1 = require(\"./util.js\");\n/**\n * @internal\n */\nclass CDPBrowser extends Browser_js_1.Browser {\n  /**\n   * @internal\n   */\n  static async _create(product, connection, contextIds, ignoreHTTPSErrors, defaultViewport, process, closeCallback, targetFilterCallback, isPageTargetCallback) {\n    const browser = new CDPBrowser(product, connection, contextIds, ignoreHTTPSErrors, defaultViewport, process, closeCallback, targetFilterCallback, isPageTargetCallback);\n    await browser._attach();\n    return browser;\n  }\n  /**\n   * @internal\n   */\n  get _targets() {\n    return __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").getAvailableTargets();\n  }\n  /**\n   * @internal\n   */\n  constructor(product, connection, contextIds, ignoreHTTPSErrors, defaultViewport, process, closeCallback, targetFilterCallback, isPageTargetCallback) {\n    super();\n    _CDPBrowser_instances.add(this);\n    _CDPBrowser_ignoreHTTPSErrors.set(this, void 0);\n    _CDPBrowser_defaultViewport.set(this, void 0);\n    _CDPBrowser_process.set(this, void 0);\n    _CDPBrowser_connection.set(this, void 0);\n    _CDPBrowser_closeCallback.set(this, void 0);\n    _CDPBrowser_targetFilterCallback.set(this, void 0);\n    _CDPBrowser_isPageTargetCallback.set(this, void 0);\n    _CDPBrowser_defaultContext.set(this, void 0);\n    _CDPBrowser_contexts.set(this, void 0);\n    _CDPBrowser_screenshotTaskQueue.set(this, void 0);\n    _CDPBrowser_targetManager.set(this, void 0);\n    _CDPBrowser_emitDisconnected.set(this, () => {\n      this.emit(\"disconnected\" /* BrowserEmittedEvents.Disconnected */);\n    });\n\n    _CDPBrowser_createTarget.set(this, (targetInfo, session) => {\n      var _a;\n      const {\n        browserContextId\n      } = targetInfo;\n      const context = browserContextId && __classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").has(browserContextId) ? __classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").get(browserContextId) : __classPrivateFieldGet(this, _CDPBrowser_defaultContext, \"f\");\n      if (!context) {\n        throw new Error('Missing browser context');\n      }\n      return new Target_js_1.Target(targetInfo, session, context, __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\"), isAutoAttachEmulated => {\n        return __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\")._createSession(targetInfo, isAutoAttachEmulated);\n      }, __classPrivateFieldGet(this, _CDPBrowser_ignoreHTTPSErrors, \"f\"), (_a = __classPrivateFieldGet(this, _CDPBrowser_defaultViewport, \"f\")) !== null && _a !== void 0 ? _a : null, __classPrivateFieldGet(this, _CDPBrowser_screenshotTaskQueue, \"f\"), __classPrivateFieldGet(this, _CDPBrowser_isPageTargetCallback, \"f\"));\n    });\n    _CDPBrowser_onAttachedToTarget.set(this, async target => {\n      if (await target._initializedPromise) {\n        this.emit(\"targetcreated\" /* BrowserEmittedEvents.TargetCreated */, target);\n        target.browserContext().emit(\"targetcreated\" /* BrowserContextEmittedEvents.TargetCreated */, target);\n      }\n    });\n    _CDPBrowser_onDetachedFromTarget.set(this, async target => {\n      target._initializedCallback(false);\n      target._closedCallback();\n      if (await target._initializedPromise) {\n        this.emit(\"targetdestroyed\" /* BrowserEmittedEvents.TargetDestroyed */, target);\n        target.browserContext().emit(\"targetdestroyed\" /* BrowserContextEmittedEvents.TargetDestroyed */, target);\n      }\n    });\n    _CDPBrowser_onTargetChanged.set(this, ({\n      target,\n      targetInfo\n    }) => {\n      const previousURL = target.url();\n      const wasInitialized = target._isInitialized;\n      target._targetInfoChanged(targetInfo);\n      if (wasInitialized && previousURL !== target.url()) {\n        this.emit(\"targetchanged\" /* BrowserEmittedEvents.TargetChanged */, target);\n        target.browserContext().emit(\"targetchanged\" /* BrowserContextEmittedEvents.TargetChanged */, target);\n      }\n    });\n    _CDPBrowser_onTargetDiscovered.set(this, targetInfo => {\n      this.emit('targetdiscovered', targetInfo);\n    });\n    product = product || 'chrome';\n    __classPrivateFieldSet(this, _CDPBrowser_ignoreHTTPSErrors, ignoreHTTPSErrors, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_defaultViewport, defaultViewport, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_process, process, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_screenshotTaskQueue, new TaskQueue_js_1.TaskQueue(), \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_connection, connection, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_closeCallback, closeCallback || function () {}, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_targetFilterCallback, targetFilterCallback || (() => {\n      return true;\n    }), \"f\");\n    __classPrivateFieldGet(this, _CDPBrowser_instances, \"m\", _CDPBrowser_setIsPageTargetCallback).call(this, isPageTargetCallback);\n    if (product === 'firefox') {\n      __classPrivateFieldSet(this, _CDPBrowser_targetManager, new FirefoxTargetManager_js_1.FirefoxTargetManager(connection, __classPrivateFieldGet(this, _CDPBrowser_createTarget, \"f\"), __classPrivateFieldGet(this, _CDPBrowser_targetFilterCallback, \"f\")), \"f\");\n    } else {\n      __classPrivateFieldSet(this, _CDPBrowser_targetManager, new ChromeTargetManager_js_1.ChromeTargetManager(connection, __classPrivateFieldGet(this, _CDPBrowser_createTarget, \"f\"), __classPrivateFieldGet(this, _CDPBrowser_targetFilterCallback, \"f\")), \"f\");\n    }\n    __classPrivateFieldSet(this, _CDPBrowser_defaultContext, new CDPBrowserContext(__classPrivateFieldGet(this, _CDPBrowser_connection, \"f\"), this), \"f\");\n    __classPrivateFieldSet(this, _CDPBrowser_contexts, new Map(), \"f\");\n    for (const contextId of contextIds) {\n      __classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").set(contextId, new CDPBrowserContext(__classPrivateFieldGet(this, _CDPBrowser_connection, \"f\"), this, contextId));\n    }\n  }\n  /**\n   * @internal\n   */\n  async _attach() {\n    __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").on(Connection_js_1.ConnectionEmittedEvents.Disconnected, __classPrivateFieldGet(this, _CDPBrowser_emitDisconnected, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").on(\"targetAvailable\" /* TargetManagerEmittedEvents.TargetAvailable */, __classPrivateFieldGet(this, _CDPBrowser_onAttachedToTarget, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").on(\"targetGone\" /* TargetManagerEmittedEvents.TargetGone */, __classPrivateFieldGet(this, _CDPBrowser_onDetachedFromTarget, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").on(\"targetChanged\" /* TargetManagerEmittedEvents.TargetChanged */, __classPrivateFieldGet(this, _CDPBrowser_onTargetChanged, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").on(\"targetDiscovered\" /* TargetManagerEmittedEvents.TargetDiscovered */, __classPrivateFieldGet(this, _CDPBrowser_onTargetDiscovered, \"f\"));\n    await __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").initialize();\n  }\n  /**\n   * @internal\n   */\n  _detach() {\n    __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").off(Connection_js_1.ConnectionEmittedEvents.Disconnected, __classPrivateFieldGet(this, _CDPBrowser_emitDisconnected, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").off(\"targetAvailable\" /* TargetManagerEmittedEvents.TargetAvailable */, __classPrivateFieldGet(this, _CDPBrowser_onAttachedToTarget, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").off(\"targetGone\" /* TargetManagerEmittedEvents.TargetGone */, __classPrivateFieldGet(this, _CDPBrowser_onDetachedFromTarget, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").off(\"targetChanged\" /* TargetManagerEmittedEvents.TargetChanged */, __classPrivateFieldGet(this, _CDPBrowser_onTargetChanged, \"f\"));\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").off(\"targetDiscovered\" /* TargetManagerEmittedEvents.TargetDiscovered */, __classPrivateFieldGet(this, _CDPBrowser_onTargetDiscovered, \"f\"));\n  }\n  /**\n   * The spawned browser process. Returns `null` if the browser instance was created with\n   * {@link Puppeteer.connect}.\n   */\n  process() {\n    var _a;\n    return (_a = __classPrivateFieldGet(this, _CDPBrowser_process, \"f\")) !== null && _a !== void 0 ? _a : null;\n  }\n  /**\n   * @internal\n   */\n  _targetManager() {\n    return __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\");\n  }\n  /**\n   * @internal\n   */\n  _getIsPageTargetCallback() {\n    return __classPrivateFieldGet(this, _CDPBrowser_isPageTargetCallback, \"f\");\n  }\n  /**\n   * Creates a new incognito browser context. This won't share cookies/cache with other\n   * browser contexts.\n   *\n   * @example\n   *\n   * ```ts\n   * (async () => {\n   *   const browser = await puppeteer.launch();\n   *   // Create a new incognito browser context.\n   *   const context = await browser.createIncognitoBrowserContext();\n   *   // Create a new page in a pristine context.\n   *   const page = await context.newPage();\n   *   // Do stuff\n   *   await page.goto('https://example.com');\n   * })();\n   * ```\n   */\n  async createIncognitoBrowserContext(options = {}) {\n    const {\n      proxyServer,\n      proxyBypassList\n    } = options;\n    const {\n      browserContextId\n    } = await __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").send('Target.createBrowserContext', {\n      proxyServer,\n      proxyBypassList: proxyBypassList && proxyBypassList.join(',')\n    });\n    const context = new CDPBrowserContext(__classPrivateFieldGet(this, _CDPBrowser_connection, \"f\"), this, browserContextId);\n    __classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").set(browserContextId, context);\n    return context;\n  }\n  /**\n   * Returns an array of all open browser contexts. In a newly created browser, this will\n   * return a single instance of {@link BrowserContext}.\n   */\n  browserContexts() {\n    return [__classPrivateFieldGet(this, _CDPBrowser_defaultContext, \"f\"), ...Array.from(__classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").values())];\n  }\n  /**\n   * Returns the default browser context. The default browser context cannot be closed.\n   */\n  defaultBrowserContext() {\n    return __classPrivateFieldGet(this, _CDPBrowser_defaultContext, \"f\");\n  }\n  /**\n   * @internal\n   */\n  async _disposeContext(contextId) {\n    if (!contextId) {\n      return;\n    }\n    await __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").send('Target.disposeBrowserContext', {\n      browserContextId: contextId\n    });\n    __classPrivateFieldGet(this, _CDPBrowser_contexts, \"f\").delete(contextId);\n  }\n  /**\n   * The browser websocket endpoint which can be used as an argument to\n   * {@link Puppeteer.connect}.\n   *\n   * @returns The Browser websocket url.\n   *\n   * @remarks\n   *\n   * The format is `ws://${host}:${port}/devtools/browser/<id>`.\n   *\n   * You can find the `webSocketDebuggerUrl` from `http://${host}:${port}/json/version`.\n   * Learn more about the\n   * {@link https://chromedevtools.github.io/devtools-protocol | devtools protocol} and\n   * the {@link\n   * https://chromedevtools.github.io/devtools-protocol/#how-do-i-access-the-browser-target\n   * | browser endpoint}.\n   */\n  wsEndpoint() {\n    return __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").url();\n  }\n  /**\n   * Promise which resolves to a new {@link Page} object. The Page is created in\n   * a default browser context.\n   */\n  async newPage() {\n    return __classPrivateFieldGet(this, _CDPBrowser_defaultContext, \"f\").newPage();\n  }\n  /**\n   * @internal\n   */\n  async _createPageInContext(contextId) {\n    const {\n      targetId\n    } = await __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").send('Target.createTarget', {\n      url: 'about:blank',\n      browserContextId: contextId || undefined\n    });\n    const target = __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").getAvailableTargets().get(targetId);\n    if (!target) {\n      throw new Error(`Missing target for page (id = ${targetId})`);\n    }\n    const initialized = await target._initializedPromise;\n    if (!initialized) {\n      throw new Error(`Failed to create target for page (id = ${targetId})`);\n    }\n    const page = await target.page();\n    if (!page) {\n      throw new Error(`Failed to create a page for context (id = ${contextId})`);\n    }\n    return page;\n  }\n  /**\n   * All active targets inside the Browser. In case of multiple browser contexts, returns\n   * an array with all the targets in all browser contexts.\n   */\n  targets() {\n    return Array.from(__classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").getAvailableTargets().values()).filter(target => {\n      return target._isInitialized;\n    });\n  }\n  /**\n   * The target associated with the browser.\n   */\n  target() {\n    const browserTarget = this.targets().find(target => {\n      return target.type() === 'browser';\n    });\n    if (!browserTarget) {\n      throw new Error('Browser target is not found');\n    }\n    return browserTarget;\n  }\n  /**\n   * Searches for a target in all browser contexts.\n   *\n   * @param predicate - A function to be run for every target.\n   * @returns The first target found that matches the `predicate` function.\n   *\n   * @example\n   *\n   * An example of finding a target for a page opened via `window.open`:\n   *\n   * ```ts\n   * await page.evaluate(() => window.open('https://www.example.com/'));\n   * const newWindowTarget = await browser.waitForTarget(\n   *   target => target.url() === 'https://www.example.com/'\n   * );\n   * ```\n   */\n  async waitForTarget(predicate, options = {}) {\n    const {\n      timeout = 30000\n    } = options;\n    const targetPromise = (0, DeferredPromise_js_1.createDeferredPromise)();\n    this.on(\"targetcreated\" /* BrowserEmittedEvents.TargetCreated */, check);\n    this.on(\"targetchanged\" /* BrowserEmittedEvents.TargetChanged */, check);\n    try {\n      this.targets().forEach(check);\n      if (!timeout) {\n        return await targetPromise;\n      }\n      return await (0, util_js_1.waitWithTimeout)(targetPromise, 'target', timeout);\n    } finally {\n      this.off(\"targetcreated\" /* BrowserEmittedEvents.TargetCreated */, check);\n      this.off(\"targetchanged\" /* BrowserEmittedEvents.TargetChanged */, check);\n    }\n    async function check(target) {\n      if ((await predicate(target)) && !targetPromise.resolved()) {\n        targetPromise.resolve(target);\n      }\n    }\n  }\n  /**\n   * An array of all open pages inside the Browser.\n   *\n   * @remarks\n   *\n   * In case of multiple browser contexts, returns an array with all the pages in all\n   * browser contexts. Non-visible pages, such as `\"background_page\"`, will not be listed\n   * here. You can find them using {@link Target.page}.\n   */\n  async pages() {\n    const contextPages = await Promise.all(this.browserContexts().map(context => {\n      return context.pages();\n    }));\n    // Flatten array.\n    return contextPages.reduce((acc, x) => {\n      return acc.concat(x);\n    }, []);\n  }\n  /**\n   * A string representing the browser name and version.\n   *\n   * @remarks\n   *\n   * For headless Chromium, this is similar to `HeadlessChrome/61.0.3153.0`. For\n   * non-headless, this is similar to `Chrome/61.0.3153.0`.\n   *\n   * The format of browser.version() might change with future releases of Chromium.\n   */\n  async version() {\n    const version = await __classPrivateFieldGet(this, _CDPBrowser_instances, \"m\", _CDPBrowser_getVersion).call(this);\n    return version.product;\n  }\n  /**\n   * The browser's original user agent. Pages can override the browser user agent with\n   * {@link Page.setUserAgent}.\n   */\n  async userAgent() {\n    const version = await __classPrivateFieldGet(this, _CDPBrowser_instances, \"m\", _CDPBrowser_getVersion).call(this);\n    return version.userAgent;\n  }\n  /**\n   * Closes Chromium and all of its pages (if any were opened). The\n   * {@link CDPBrowser} object itself is considered to be disposed and cannot be\n   * used anymore.\n   */\n  async close() {\n    await __classPrivateFieldGet(this, _CDPBrowser_closeCallback, \"f\").call(null);\n    this.disconnect();\n  }\n  /**\n   * Disconnects Puppeteer from the browser, but leaves the Chromium process running.\n   * After calling `disconnect`, the {@link CDPBrowser} object is considered disposed and\n   * cannot be used anymore.\n   */\n  disconnect() {\n    __classPrivateFieldGet(this, _CDPBrowser_targetManager, \"f\").dispose();\n    __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").dispose();\n    this._detach();\n  }\n  /**\n   * Indicates that the browser is connected.\n   */\n  isConnected() {\n    return !__classPrivateFieldGet(this, _CDPBrowser_connection, \"f\")._closed;\n  }\n}\nexports.CDPBrowser = CDPBrowser;\n_CDPBrowser_ignoreHTTPSErrors = new WeakMap(), _CDPBrowser_defaultViewport = new WeakMap(), _CDPBrowser_process = new WeakMap(), _CDPBrowser_connection = new WeakMap(), _CDPBrowser_closeCallback = new WeakMap(), _CDPBrowser_targetFilterCallback = new WeakMap(), _CDPBrowser_isPageTargetCallback = new WeakMap(), _CDPBrowser_defaultContext = new WeakMap(), _CDPBrowser_contexts = new WeakMap(), _CDPBrowser_screenshotTaskQueue = new WeakMap(), _CDPBrowser_targetManager = new WeakMap(), _CDPBrowser_emitDisconnected = new WeakMap(), _CDPBrowser_createTarget = new WeakMap(), _CDPBrowser_onAttachedToTarget = new WeakMap(), _CDPBrowser_onDetachedFromTarget = new WeakMap(), _CDPBrowser_onTargetChanged = new WeakMap(), _CDPBrowser_onTargetDiscovered = new WeakMap(), _CDPBrowser_instances = new WeakSet(), _CDPBrowser_setIsPageTargetCallback = function _CDPBrowser_setIsPageTargetCallback(isPageTargetCallback) {\n  __classPrivateFieldSet(this, _CDPBrowser_isPageTargetCallback, isPageTargetCallback || (target => {\n    return target.type === 'page' || target.type === 'background_page' || target.type === 'webview';\n  }), \"f\");\n}, _CDPBrowser_getVersion = function _CDPBrowser_getVersion() {\n  return __classPrivateFieldGet(this, _CDPBrowser_connection, \"f\").send('Browser.getVersion');\n};\n/**\n * @internal\n */\nclass CDPBrowserContext extends BrowserContext_js_1.BrowserContext {\n  /**\n   * @internal\n   */\n  constructor(connection, browser, contextId) {\n    super();\n    _CDPBrowserContext_connection.set(this, void 0);\n    _CDPBrowserContext_browser.set(this, void 0);\n    _CDPBrowserContext_id.set(this, void 0);\n    __classPrivateFieldSet(this, _CDPBrowserContext_connection, connection, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowserContext_browser, browser, \"f\");\n    __classPrivateFieldSet(this, _CDPBrowserContext_id, contextId, \"f\");\n  }\n  get id() {\n    return __classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\");\n  }\n  /**\n   * An array of all active targets inside the browser context.\n   */\n  targets() {\n    return __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\").targets().filter(target => {\n      return target.browserContext() === this;\n    });\n  }\n  /**\n   * This searches for a target in this specific browser context.\n   *\n   * @example\n   * An example of finding a target for a page opened via `window.open`:\n   *\n   * ```ts\n   * await page.evaluate(() => window.open('https://www.example.com/'));\n   * const newWindowTarget = await browserContext.waitForTarget(\n   *   target => target.url() === 'https://www.example.com/'\n   * );\n   * ```\n   *\n   * @param predicate - A function to be run for every target\n   * @param options - An object of options. Accepts a timeout,\n   * which is the maximum wait time in milliseconds.\n   * Pass `0` to disable the timeout. Defaults to 30 seconds.\n   * @returns Promise which resolves to the first target found\n   * that matches the `predicate` function.\n   */\n  waitForTarget(predicate, options = {}) {\n    return __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\").waitForTarget(target => {\n      return target.browserContext() === this && predicate(target);\n    }, options);\n  }\n  /**\n   * An array of all pages inside the browser context.\n   *\n   * @returns Promise which resolves to an array of all open pages.\n   * Non visible pages, such as `\"background_page\"`, will not be listed here.\n   * You can find them using {@link Target.page | the target page}.\n   */\n  async pages() {\n    const pages = await Promise.all(this.targets().filter(target => {\n      var _a;\n      return target.type() === 'page' || target.type() === 'other' && ((_a = __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\")._getIsPageTargetCallback()) === null || _a === void 0 ? void 0 : _a(target._getTargetInfo()));\n    }).map(target => {\n      return target.page();\n    }));\n    return pages.filter(page => {\n      return !!page;\n    });\n  }\n  /**\n   * Returns whether BrowserContext is incognito.\n   * The default browser context is the only non-incognito browser context.\n   *\n   * @remarks\n   * The default browser context cannot be closed.\n   */\n  isIncognito() {\n    return !!__classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\");\n  }\n  /**\n   * @example\n   *\n   * ```ts\n   * const context = browser.defaultBrowserContext();\n   * await context.overridePermissions('https://html5demos.com', [\n   *   'geolocation',\n   * ]);\n   * ```\n   *\n   * @param origin - The origin to grant permissions to, e.g. \"https://example.com\".\n   * @param permissions - An array of permissions to grant.\n   * All permissions that are not listed here will be automatically denied.\n   */\n  async overridePermissions(origin, permissions) {\n    const protocolPermissions = permissions.map(permission => {\n      const protocolPermission = Browser_js_1.WEB_PERMISSION_TO_PROTOCOL_PERMISSION.get(permission);\n      if (!protocolPermission) {\n        throw new Error('Unknown permission: ' + permission);\n      }\n      return protocolPermission;\n    });\n    await __classPrivateFieldGet(this, _CDPBrowserContext_connection, \"f\").send('Browser.grantPermissions', {\n      origin,\n      browserContextId: __classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\") || undefined,\n      permissions: protocolPermissions\n    });\n  }\n  /**\n   * Clears all permission overrides for the browser context.\n   *\n   * @example\n   *\n   * ```ts\n   * const context = browser.defaultBrowserContext();\n   * context.overridePermissions('https://example.com', ['clipboard-read']);\n   * // do stuff ..\n   * context.clearPermissionOverrides();\n   * ```\n   */\n  async clearPermissionOverrides() {\n    await __classPrivateFieldGet(this, _CDPBrowserContext_connection, \"f\").send('Browser.resetPermissions', {\n      browserContextId: __classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\") || undefined\n    });\n  }\n  /**\n   * Creates a new page in the browser context.\n   */\n  newPage() {\n    return __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\")._createPageInContext(__classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\"));\n  }\n  /**\n   * The browser this browser context belongs to.\n   */\n  browser() {\n    return __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\");\n  }\n  /**\n   * Closes the browser context. All the targets that belong to the browser context\n   * will be closed.\n   *\n   * @remarks\n   * Only incognito browser contexts can be closed.\n   */\n  async close() {\n    (0, assert_js_1.assert)(__classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\"), 'Non-incognito profiles cannot be closed!');\n    await __classPrivateFieldGet(this, _CDPBrowserContext_browser, \"f\")._disposeContext(__classPrivateFieldGet(this, _CDPBrowserContext_id, \"f\"));\n  }\n}\nexports.CDPBrowserContext = CDPBrowserContext;\n_CDPBrowserContext_connection = new WeakMap(), _CDPBrowserContext_browser = new WeakMap(), _CDPBrowserContext_id = new WeakMap();","map":{"version":3,"names":["Browser_js_1","require","BrowserContext_js_1","assert_js_1","DeferredPromise_js_1","ChromeTargetManager_js_1","Connection_js_1","FirefoxTargetManager_js_1","Target_js_1","TaskQueue_js_1","util_js_1","CDPBrowser","Browser","_create","product","connection","contextIds","ignoreHTTPSErrors","defaultViewport","process","closeCallback","targetFilterCallback","isPageTargetCallback","browser","_attach","_targets","__classPrivateFieldGet","_CDPBrowser_targetManager","getAvailableTargets","constructor","_CDPBrowser_ignoreHTTPSErrors","set","_CDPBrowser_defaultViewport","_CDPBrowser_process","_CDPBrowser_connection","_CDPBrowser_closeCallback","_CDPBrowser_targetFilterCallback","_CDPBrowser_isPageTargetCallback","_CDPBrowser_defaultContext","_CDPBrowser_contexts","_CDPBrowser_screenshotTaskQueue","_CDPBrowser_emitDisconnected","emit","_CDPBrowser_createTarget","targetInfo","session","browserContextId","context","has","get","Error","Target","isAutoAttachEmulated","_createSession","_a","_CDPBrowser_onAttachedToTarget","target","_initializedPromise","browserContext","_CDPBrowser_onDetachedFromTarget","_initializedCallback","_closedCallback","_CDPBrowser_onTargetChanged","previousURL","url","wasInitialized","_isInitialized","_targetInfoChanged","_CDPBrowser_onTargetDiscovered","__classPrivateFieldSet","TaskQueue","_CDPBrowser_instances","_CDPBrowser_setIsPageTargetCallback","call","FirefoxTargetManager","ChromeTargetManager","CDPBrowserContext","Map","contextId","on","ConnectionEmittedEvents","Disconnected","initialize","_detach","off","_targetManager","_getIsPageTargetCallback","createIncognitoBrowserContext","options","proxyServer","proxyBypassList","send","join","browserContexts","Array","from","values","defaultBrowserContext","_disposeContext","delete","wsEndpoint","newPage","_createPageInContext","targetId","undefined","initialized","page","targets","filter","browserTarget","find","type","waitForTarget","predicate","timeout","targetPromise","createDeferredPromise","check","forEach","waitWithTimeout","resolved","resolve","pages","contextPages","Promise","all","map","reduce","acc","x","concat","version","_CDPBrowser_getVersion","userAgent","close","disconnect","dispose","isConnected","_closed","exports","BrowserContext","_CDPBrowserContext_connection","_CDPBrowserContext_browser","_CDPBrowserContext_id","id","_getTargetInfo","isIncognito","overridePermissions","origin","permissions","protocolPermissions","permission","protocolPermission","WEB_PERMISSION_TO_PROTOCOL_PERMISSION","clearPermissionOverrides","assert"],"sources":["../../../../src/common/Browser.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}