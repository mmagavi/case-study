{"ast":null,"code":"let conversationHistory = [{\n  role: \"system\",\n  content: `You are an assistant helping a user on an appliance part website, PartSelect.com. \n    You will not answer any questions not about appliances and PartSelect.com. You keep your responses helpful and concise.\n    Provide the appropriate link on PartSelect.com for the appliance part asked about.\n    `\n}];\nconst extractLinkFromText = text => {\n  const urlPattern = /(https?:\\/\\/[^\\s]+)/g;\n  const matches = text.match(urlPattern);\n  if (matches && matches.length > 0) {\n    return matches[0];\n  } else {\n    return null;\n  }\n};\nexport const getAIMessage = async userQuery => {\n  conversationHistory.push({\n    role: \"user\",\n    content: userQuery\n  });\n  const completion = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": 'Bearer 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'\n    },\n    body: JSON.stringify({\n      model: \"gpt-4o-mini\",\n      messages: conversationHistory\n    })\n  });\n  const data = await completion.json();\n  let get_response = data.choices[0].message.content;\n  console.log(get_response);\n  conversationHistory.push({\n    role: \"assistant\",\n    content: get_response\n  });\n  let link = extractLinkFromText(get_response);\n  if (link) {\n    link = link.replace(/[^\\w\\s:/.-]/g, '');\n    link = link.replace(/\\.$/, '');\n    get_response += \"\\n Customer Repair stories for this product: \" + link + \"#RepairStories\";\n    get_response += \"\\n Troubleshooting for this product: \" + link + \"#Troubleshooting\";\n  }\n  return get_response;\n};","map":{"version":3,"names":["conversationHistory","role","content","extractLinkFromText","text","urlPattern","matches","match","length","getAIMessage","userQuery","push","completion","fetch","method","headers","body","JSON","stringify","model","messages","data","json","get_response","choices","message","console","log","link","replace"],"sources":["/Users/mayamagavi/instalily/case-study/src/api/api.js"],"sourcesContent":["\nlet conversationHistory = [\n  { role: \"system\", content: `You are an assistant helping a user on an appliance part website, PartSelect.com. \n    You will not answer any questions not about appliances and PartSelect.com. You keep your responses helpful and concise.\n    Provide the appropriate link on PartSelect.com for the appliance part asked about.\n    ` }\n];\n\nconst extractLinkFromText = (text) => {\n  const urlPattern = /(https?:\\/\\/[^\\s]+)/g; \n  const matches = text.match(urlPattern);  \n\n  if (matches && matches.length > 0) {\n    return matches[0];\n  } else {\n    return null; \n  }\n};\n\nexport const getAIMessage = async (userQuery) => {\n\n  conversationHistory.push({ role: \"user\", content: userQuery });\n\n  const completion = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n    method: \"POST\",\n    headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": 'Bearer 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',\n    },\n    body: JSON.stringify({\n        model: \"gpt-4o-mini\",\n        messages: conversationHistory\n    })\n  });\n\n  const data = await completion.json();\n  let get_response = data.choices[0].message.content;\n  console.log(get_response);\n  conversationHistory.push({ role: \"assistant\", content: get_response });\n\n  let link =  extractLinkFromText(get_response)\n  if (link) {\n    link = link.replace(/[^\\w\\s:/.-]/g, '');\n    link = link.replace(/\\.$/, '');\n    get_response += \"\\n Customer Repair stories for this product: \" + link + \"#RepairStories\"\n    get_response += \"\\n Troubleshooting for this product: \" + link + \"#Troubleshooting\"\n  }\n\n  return get_response\n};"],"mappings":"AACA,IAAIA,mBAAmB,GAAG,CACxB;EAAEC,IAAI,EAAE,QAAQ;EAAEC,OAAO,EAAG;AAC9B;AACA;AACA;AAAM,CAAC,CACN;AAED,MAAMC,mBAAmB,GAAIC,IAAI,IAAK;EACpC,MAAMC,UAAU,GAAG,sBAAsB;EACzC,MAAMC,OAAO,GAAGF,IAAI,CAACG,KAAK,CAACF,UAAU,CAAC;EAEtC,IAAIC,OAAO,IAAIA,OAAO,CAACE,MAAM,GAAG,CAAC,EAAE;IACjC,OAAOF,OAAO,CAAC,CAAC,CAAC;EACnB,CAAC,MAAM;IACL,OAAO,IAAI;EACb;AACF,CAAC;AAED,OAAO,MAAMG,YAAY,GAAG,MAAOC,SAAS,IAAK;EAE/CV,mBAAmB,CAACW,IAAI,CAAC;IAAEV,IAAI,EAAE,MAAM;IAAEC,OAAO,EAAEQ;EAAU,CAAC,CAAC;EAE9D,MAAME,UAAU,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;IAC3EC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE;IACrB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjBC,KAAK,EAAE,aAAa;MACpBC,QAAQ,EAAEpB;IACd,CAAC;EACH,CAAC,CAAC;EAEF,MAAMqB,IAAI,GAAG,MAAMT,UAAU,CAACU,IAAI,CAAC,CAAC;EACpC,IAAIC,YAAY,GAAGF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACvB,OAAO;EAClDwB,OAAO,CAACC,GAAG,CAACJ,YAAY,CAAC;EACzBvB,mBAAmB,CAACW,IAAI,CAAC;IAAEV,IAAI,EAAE,WAAW;IAAEC,OAAO,EAAEqB;EAAa,CAAC,CAAC;EAEtE,IAAIK,IAAI,GAAIzB,mBAAmB,CAACoB,YAAY,CAAC;EAC7C,IAAIK,IAAI,EAAE;IACRA,IAAI,GAAGA,IAAI,CAACC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;IACvCD,IAAI,GAAGA,IAAI,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IAC9BN,YAAY,IAAI,+CAA+C,GAAGK,IAAI,GAAG,gBAAgB;IACzFL,YAAY,IAAI,uCAAuC,GAAGK,IAAI,GAAG,kBAAkB;EACrF;EAEA,OAAOL,YAAY;AACrB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}