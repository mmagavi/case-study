{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CustomQueryHandlerRegistry_handlers;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clearCustomQueryHandlers = exports.customQueryHandlerNames = exports.unregisterCustomQueryHandler = exports.registerCustomQueryHandler = exports.customQueryHandlers = exports.CustomQueryHandlerRegistry = void 0;\nconst assert_js_1 = require(\"../util/assert.js\");\nconst Function_js_1 = require(\"../util/Function.js\");\nconst QueryHandler_js_1 = require(\"./QueryHandler.js\");\nconst ScriptInjector_js_1 = require(\"./ScriptInjector.js\");\n/**\n * The registry of {@link CustomQueryHandler | custom query handlers}.\n *\n * @example\n *\n * ```ts\n * Puppeteer.customQueryHandlers.register('lit', { … });\n * const aHandle = await page.$('lit/…');\n * ```\n *\n * @internal\n */\nclass CustomQueryHandlerRegistry {\n  constructor() {\n    _CustomQueryHandlerRegistry_handlers.set(this, new Map());\n  }\n  /**\n   * @internal\n   */\n  get(name) {\n    const handler = __classPrivateFieldGet(this, _CustomQueryHandlerRegistry_handlers, \"f\").get(name);\n    return handler ? handler[1] : undefined;\n  }\n  /**\n   * Registers a {@link CustomQueryHandler | custom query handler}.\n   *\n   * @remarks\n   * After registration, the handler can be used everywhere where a selector is\n   * expected by prepending the selection string with `<name>/`. The name is\n   * only allowed to consist of lower- and upper case latin letters.\n   *\n   * @example\n   *\n   * ```ts\n   * Puppeteer.customQueryHandlers.register('lit', { … });\n   * const aHandle = await page.$('lit/…');\n   * ```\n   *\n   * @param name - Name to register under.\n   * @param queryHandler - {@link CustomQueryHandler | Custom query handler} to\n   * register.\n   *\n   * @internal\n   */\n  register(name, handler) {\n    var _a;\n    if (__classPrivateFieldGet(this, _CustomQueryHandlerRegistry_handlers, \"f\").has(name)) {\n      throw new Error(`Cannot register over existing handler: ${name}`);\n    }\n    (0, assert_js_1.assert)(!__classPrivateFieldGet(this, _CustomQueryHandlerRegistry_handlers, \"f\").has(name), `Cannot register over existing handler: ${name}`);\n    (0, assert_js_1.assert)(/^[a-zA-Z]+$/.test(name), `Custom query handler names may only contain [a-zA-Z]`);\n    (0, assert_js_1.assert)(handler.queryAll || handler.queryOne, `At least one query method must be implemented.`);\n    const Handler = (_a = class extends QueryHandler_js_1.QueryHandler {}, _a.querySelectorAll = (0, Function_js_1.interpolateFunction)((node, selector, PuppeteerUtil) => {\n      return PuppeteerUtil.customQuerySelectors.get(PLACEHOLDER('name')).querySelectorAll(node, selector);\n    }, {\n      name: JSON.stringify(name)\n    }), _a.querySelector = (0, Function_js_1.interpolateFunction)((node, selector, PuppeteerUtil) => {\n      return PuppeteerUtil.customQuerySelectors.get(PLACEHOLDER('name')).querySelector(node, selector);\n    }, {\n      name: JSON.stringify(name)\n    }), _a);\n    const registerScript = (0, Function_js_1.interpolateFunction)(PuppeteerUtil => {\n      PuppeteerUtil.customQuerySelectors.register(PLACEHOLDER('name'), {\n        queryAll: PLACEHOLDER('queryAll'),\n        queryOne: PLACEHOLDER('queryOne')\n      });\n    }, {\n      name: JSON.stringify(name),\n      queryAll: handler.queryAll ? (0, Function_js_1.stringifyFunction)(handler.queryAll) : String(undefined),\n      queryOne: handler.queryOne ? (0, Function_js_1.stringifyFunction)(handler.queryOne) : String(undefined)\n    }).toString();\n    __classPrivateFieldGet(this, _CustomQueryHandlerRegistry_handlers, \"f\").set(name, [registerScript, Handler]);\n    ScriptInjector_js_1.scriptInjector.append(registerScript);\n  }\n  /**\n   * Unregisters the {@link CustomQueryHandler | custom query handler} for the\n   * given name.\n   *\n   * @throws `Error` if there is no handler under the given name.\n   *\n   * @internal\n   */\n  unregister(name) {\n    const handler = __classPrivateFieldGet(this, _CustomQueryHandlerRegistry_handlers, \"f\").get(name);\n    if (!handler) {\n      throw new Error(`Cannot unregister unknown handler: ${name}`);\n    }\n    ScriptInjector_js_1.scriptInjector.pop(handler[0]);\n    __classPrivateFieldGet(this, _CustomQueryHandlerRegistry_handlers, \"f\").delete(name);\n  }\n  /**\n   * Gets the names of all {@link CustomQueryHandler | custom query handlers}.\n   *\n   * @internal\n   */\n  names() {\n    return [...__classPrivateFieldGet(this, _CustomQueryHandlerRegistry_handlers, \"f\").keys()];\n  }\n  /**\n   * Unregisters all custom query handlers.\n   *\n   * @internal\n   */\n  clear() {\n    for (const [registerScript] of __classPrivateFieldGet(this, _CustomQueryHandlerRegistry_handlers, \"f\")) {\n      ScriptInjector_js_1.scriptInjector.pop(registerScript);\n    }\n    __classPrivateFieldGet(this, _CustomQueryHandlerRegistry_handlers, \"f\").clear();\n  }\n}\nexports.CustomQueryHandlerRegistry = CustomQueryHandlerRegistry;\n_CustomQueryHandlerRegistry_handlers = new WeakMap();\n/**\n * @internal\n */\nexports.customQueryHandlers = new CustomQueryHandlerRegistry();\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.registerCustomQueryHandler}\n *\n * @public\n */\nfunction registerCustomQueryHandler(name, handler) {\n  exports.customQueryHandlers.register(name, handler);\n}\nexports.registerCustomQueryHandler = registerCustomQueryHandler;\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.unregisterCustomQueryHandler}\n *\n * @public\n */\nfunction unregisterCustomQueryHandler(name) {\n  exports.customQueryHandlers.unregister(name);\n}\nexports.unregisterCustomQueryHandler = unregisterCustomQueryHandler;\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.customQueryHandlerNames}\n *\n * @public\n */\nfunction customQueryHandlerNames() {\n  return exports.customQueryHandlers.names();\n}\nexports.customQueryHandlerNames = customQueryHandlerNames;\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.clearCustomQueryHandlers}\n *\n * @public\n */\nfunction clearCustomQueryHandlers() {\n  exports.customQueryHandlers.clear();\n}\nexports.clearCustomQueryHandlers = clearCustomQueryHandlers;","map":{"version":3,"names":["assert_js_1","require","Function_js_1","QueryHandler_js_1","ScriptInjector_js_1","CustomQueryHandlerRegistry","constructor","_CustomQueryHandlerRegistry_handlers","set","Map","get","name","handler","__classPrivateFieldGet","undefined","register","has","Error","assert","test","queryAll","queryOne","Handler","_a","QueryHandler","querySelectorAll","interpolateFunction","node","selector","PuppeteerUtil","customQuerySelectors","PLACEHOLDER","JSON","stringify","querySelector","registerScript","stringifyFunction","String","toString","scriptInjector","append","unregister","pop","delete","names","keys","clear","exports","customQueryHandlers","registerCustomQueryHandler","unregisterCustomQueryHandler","customQueryHandlerNames","clearCustomQueryHandlers"],"sources":["../../../../src/common/CustomQueryHandler.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}