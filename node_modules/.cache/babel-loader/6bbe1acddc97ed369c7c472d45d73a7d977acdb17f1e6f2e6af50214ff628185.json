{"ast":null,"code":"/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a;\nimport { assert } from '../util/assert.js';\nimport { AsyncIterableUtil } from '../util/AsyncIterableUtil.js';\nimport { QueryHandler } from './QueryHandler.js';\nconst queryAXTree = async (client, element, accessibleName, role) => {\n  const {\n    nodes\n  } = await client.send('Accessibility.queryAXTree', {\n    objectId: element.id,\n    accessibleName,\n    role\n  });\n  return nodes.filter(node => {\n    return !node.role || node.role.value !== 'StaticText';\n  });\n};\nconst KNOWN_ATTRIBUTES = Object.freeze(['name', 'role']);\nconst isKnownAttribute = attribute => {\n  return KNOWN_ATTRIBUTES.includes(attribute);\n};\nconst normalizeValue = value => {\n  return value.replace(/ +/g, ' ').trim();\n};\n/**\n * The selectors consist of an accessible name to query for and optionally\n * further aria attributes on the form `[<attribute>=<value>]`.\n * Currently, we only support the `name` and `role` attribute.\n * The following examples showcase how the syntax works wrt. querying:\n *\n * - 'title[role=\"heading\"]' queries for elements with name 'title' and role 'heading'.\n * - '[role=\"img\"]' queries for elements with role 'img' and any name.\n * - 'label' queries for elements with name 'label' and any role.\n * - '[name=\"\"][role=\"button\"]' queries for elements with no name and role 'button'.\n */\nconst ATTRIBUTE_REGEXP = /\\[\\s*(?<attribute>\\w+)\\s*=\\s*(?<quote>\"|')(?<value>\\\\.|.*?(?=\\k<quote>))\\k<quote>\\s*\\]/g;\nconst parseARIASelector = selector => {\n  const queryOptions = {};\n  const defaultName = selector.replace(ATTRIBUTE_REGEXP, (_, attribute, __, value) => {\n    attribute = attribute.trim();\n    assert(isKnownAttribute(attribute), `Unknown aria attribute \"${attribute}\" in selector`);\n    queryOptions[attribute] = normalizeValue(value);\n    return '';\n  });\n  if (defaultName && !queryOptions.name) {\n    queryOptions.name = normalizeValue(defaultName);\n  }\n  return queryOptions;\n};\n/**\n * @internal\n */\nexport class ARIAQueryHandler extends QueryHandler {\n  static async *queryAll(element, selector) {\n    const context = element.executionContext();\n    const {\n      name,\n      role\n    } = parseARIASelector(selector);\n    const results = await queryAXTree(context._client, element, name, role);\n    const world = context._world;\n    yield* AsyncIterableUtil.map(results, node => {\n      return world.adoptBackendNode(node.backendDOMNodeId);\n    });\n  }\n}\n_a = ARIAQueryHandler;\nARIAQueryHandler.querySelector = async (node, selector, {\n  ariaQuerySelector\n}) => {\n  return ariaQuerySelector(node, selector);\n};\nARIAQueryHandler.queryOne = async (element, selector) => {\n  var _b;\n  return (_b = await AsyncIterableUtil.first(_a.queryAll(element, selector))) !== null && _b !== void 0 ? _b : null;\n};","map":{"version":3,"names":["assert","AsyncIterableUtil","QueryHandler","queryAXTree","client","element","accessibleName","role","nodes","send","objectId","id","filter","node","value","KNOWN_ATTRIBUTES","Object","freeze","isKnownAttribute","attribute","includes","normalizeValue","replace","trim","ATTRIBUTE_REGEXP","parseARIASelector","selector","queryOptions","defaultName","_","__","name","ARIAQueryHandler","queryAll","context","executionContext","results","_client","world","_world","map","adoptBackendNode","backendDOMNodeId","querySelector","ariaQuerySelector","queryOne","_b","first","_a"],"sources":["../../../../src/common/AriaQueryHandler.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}