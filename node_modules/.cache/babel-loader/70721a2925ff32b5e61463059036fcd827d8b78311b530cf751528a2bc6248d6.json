{"ast":null,"code":"import { BaseEntityStore } from \"../../../schema/index.js\";\n/**\n * An entity store that keeps data in memory. It extends from the\n * `BaseEntityStore` class and is used to store and manage entities.\n */\nexport class InMemoryEntityStore extends BaseEntityStore {\n  constructor() {\n    super();\n    Object.defineProperty(this, \"lc_namespace\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"langchain\", \"stores\", \"entity\", \"in_memory\"]\n    });\n    Object.defineProperty(this, \"store\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.store = Object.create(null);\n  }\n  /**\n   * Retrieves the value associated with the given key from the store. If\n   * the key does not exist in the store, it returns the provided default\n   * value.\n   * @param key The key to retrieve the value for.\n   * @param defaultValue The default value to return if the key does not exist in the store.\n   * @returns The value associated with the key, or the default value if the key does not exist in the store.\n   */\n  async get(key, defaultValue) {\n    return key in this.store ? this.store[key] : defaultValue;\n  }\n  /**\n   * Sets the value associated with the given key in the store.\n   * @param key The key to set the value for.\n   * @param value The value to set.\n   */\n  async set(key, value) {\n    this.store[key] = value;\n  }\n  /**\n   * Removes the key and its associated value from the store.\n   * @param key The key to remove.\n   */\n  async delete(key) {\n    delete this.store[key];\n  }\n  /**\n   * Checks if a key exists in the store.\n   * @param key The key to check.\n   * @returns A boolean indicating whether the key exists in the store.\n   */\n  async exists(key) {\n    return key in this.store;\n  }\n  /**\n   * Removes all keys and their associated values from the store.\n   */\n  async clear() {\n    this.store = Object.create(null);\n  }\n}","map":{"version":3,"names":["BaseEntityStore","InMemoryEntityStore","constructor","Object","defineProperty","enumerable","configurable","writable","value","store","create","get","key","defaultValue","set","delete","exists","clear"],"sources":["/Users/mayamagavi/instalily/case-study/node_modules/langchain/dist/memory/stores/entity/in_memory.js"],"sourcesContent":["import { BaseEntityStore } from \"../../../schema/index.js\";\n/**\n * An entity store that keeps data in memory. It extends from the\n * `BaseEntityStore` class and is used to store and manage entities.\n */\nexport class InMemoryEntityStore extends BaseEntityStore {\n    constructor() {\n        super();\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"stores\", \"entity\", \"in_memory\"]\n        });\n        Object.defineProperty(this, \"store\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.store = Object.create(null);\n    }\n    /**\n     * Retrieves the value associated with the given key from the store. If\n     * the key does not exist in the store, it returns the provided default\n     * value.\n     * @param key The key to retrieve the value for.\n     * @param defaultValue The default value to return if the key does not exist in the store.\n     * @returns The value associated with the key, or the default value if the key does not exist in the store.\n     */\n    async get(key, defaultValue) {\n        return key in this.store ? this.store[key] : defaultValue;\n    }\n    /**\n     * Sets the value associated with the given key in the store.\n     * @param key The key to set the value for.\n     * @param value The value to set.\n     */\n    async set(key, value) {\n        this.store[key] = value;\n    }\n    /**\n     * Removes the key and its associated value from the store.\n     * @param key The key to remove.\n     */\n    async delete(key) {\n        delete this.store[key];\n    }\n    /**\n     * Checks if a key exists in the store.\n     * @param key The key to check.\n     * @returns A boolean indicating whether the key exists in the store.\n     */\n    async exists(key) {\n        return key in this.store;\n    }\n    /**\n     * Removes all keys and their associated values from the store.\n     */\n    async clear() {\n        this.store = Object.create(null);\n    }\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,0BAA0B;AAC1D;AACA;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,SAASD,eAAe,CAAC;EACrDE,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,CAAC;IACPC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,cAAc,EAAE;MACxCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,CAAC,WAAW,EAAE,QAAQ,EAAE,QAAQ,EAAE,WAAW;IACxD,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE;MACjCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACC,KAAK,GAAGN,MAAM,CAACO,MAAM,CAAC,IAAI,CAAC;EACpC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,GAAGA,CAACC,GAAG,EAAEC,YAAY,EAAE;IACzB,OAAOD,GAAG,IAAI,IAAI,CAACH,KAAK,GAAG,IAAI,CAACA,KAAK,CAACG,GAAG,CAAC,GAAGC,YAAY;EAC7D;EACA;AACJ;AACA;AACA;AACA;EACI,MAAMC,GAAGA,CAACF,GAAG,EAAEJ,KAAK,EAAE;IAClB,IAAI,CAACC,KAAK,CAACG,GAAG,CAAC,GAAGJ,KAAK;EAC3B;EACA;AACJ;AACA;AACA;EACI,MAAMO,MAAMA,CAACH,GAAG,EAAE;IACd,OAAO,IAAI,CAACH,KAAK,CAACG,GAAG,CAAC;EAC1B;EACA;AACJ;AACA;AACA;AACA;EACI,MAAMI,MAAMA,CAACJ,GAAG,EAAE;IACd,OAAOA,GAAG,IAAI,IAAI,CAACH,KAAK;EAC5B;EACA;AACJ;AACA;EACI,MAAMQ,KAAKA,CAAA,EAAG;IACV,IAAI,CAACR,KAAK,GAAGN,MAAM,CAACO,MAAM,CAAC,IAAI,CAAC;EACpC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}