{"ast":null,"code":"import { BaseChatMemory } from \"./chat_memory.js\";\nimport { ENTITY_EXTRACTION_PROMPT, ENTITY_SUMMARIZATION_PROMPT } from \"./prompt.js\";\nimport { getBufferString, getPromptInputKey } from \"./base.js\";\nimport { LLMChain } from \"../chains/llm_chain.js\";\nimport { InMemoryEntityStore } from \"./stores/entity/in_memory.js\";\n// Entity extractor & summarizer to memory.\n/**\n * Class for managing entity extraction and summarization to memory in\n * chatbot applications. Extends the BaseChatMemory class and implements\n * the EntityMemoryInput interface.\n */\nexport class EntityMemory extends BaseChatMemory {\n  constructor(fields) {\n    super({\n      chatHistory: fields.chatHistory,\n      returnMessages: fields.returnMessages ?? false,\n      inputKey: fields.inputKey,\n      outputKey: fields.outputKey\n    });\n    Object.defineProperty(this, \"entityExtractionChain\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"entitySummarizationChain\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"entityStore\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"entityCache\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, \"k\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 3\n    });\n    Object.defineProperty(this, \"chatHistoryKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"history\"\n    });\n    Object.defineProperty(this, \"llm\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"entitiesKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"entities\"\n    });\n    Object.defineProperty(this, \"humanPrefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"aiPrefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.llm = fields.llm;\n    this.humanPrefix = fields.humanPrefix;\n    this.aiPrefix = fields.aiPrefix;\n    this.chatHistoryKey = fields.chatHistoryKey ?? this.chatHistoryKey;\n    this.entitiesKey = fields.entitiesKey ?? this.entitiesKey;\n    this.entityExtractionChain = new LLMChain({\n      llm: this.llm,\n      prompt: fields.entityExtractionPrompt ?? ENTITY_EXTRACTION_PROMPT\n    });\n    this.entitySummarizationChain = new LLMChain({\n      llm: this.llm,\n      prompt: fields.entitySummarizationPrompt ?? ENTITY_SUMMARIZATION_PROMPT\n    });\n    this.entityStore = fields.entityStore ?? new InMemoryEntityStore();\n    this.entityCache = fields.entityCache ?? this.entityCache;\n    this.k = fields.k ?? this.k;\n  }\n  get memoryKeys() {\n    return [this.chatHistoryKey];\n  }\n  // Will always return list of memory variables.\n  get memoryVariables() {\n    return [this.entitiesKey, this.chatHistoryKey];\n  }\n  // Return history buffer.\n  /**\n   * Method to load memory variables and perform entity extraction.\n   * @param inputs Input values for the method.\n   * @returns Promise resolving to an object containing memory variables.\n   */\n  async loadMemoryVariables(inputs) {\n    const promptInputKey = this.inputKey ?? getPromptInputKey(inputs, this.memoryVariables);\n    const messages = await this.chatHistory.getMessages();\n    const serializedMessages = getBufferString(messages.slice(-this.k * 2), this.humanPrefix, this.aiPrefix);\n    const output = await this.entityExtractionChain.predict({\n      history: serializedMessages,\n      input: inputs[promptInputKey]\n    });\n    const entities = output.trim() === \"NONE\" ? [] : output.split(\",\").map(w => w.trim());\n    const entitySummaries = {};\n    for (const entity of entities) {\n      entitySummaries[entity] = await this.entityStore.get(entity, \"No current information known.\");\n    }\n    this.entityCache = [...entities];\n    const buffer = this.returnMessages ? messages.slice(-this.k * 2) : serializedMessages;\n    return {\n      [this.chatHistoryKey]: buffer,\n      [this.entitiesKey]: entitySummaries\n    };\n  }\n  // Save context from this conversation to buffer.\n  /**\n   * Method to save the context from a conversation to a buffer and perform\n   * entity summarization.\n   * @param inputs Input values for the method.\n   * @param outputs Output values from the method.\n   * @returns Promise resolving to void.\n   */\n  async saveContext(inputs, outputs) {\n    await super.saveContext(inputs, outputs);\n    const promptInputKey = this.inputKey ?? getPromptInputKey(inputs, this.memoryVariables);\n    const messages = await this.chatHistory.getMessages();\n    const serializedMessages = getBufferString(messages.slice(-this.k * 2), this.humanPrefix, this.aiPrefix);\n    const inputData = inputs[promptInputKey];\n    for (const entity of this.entityCache) {\n      const existingSummary = await this.entityStore.get(entity, \"No current information known.\");\n      const output = await this.entitySummarizationChain.predict({\n        summary: existingSummary,\n        entity,\n        history: serializedMessages,\n        input: inputData\n      });\n      if (output.trim() !== \"UNCHANGED\") {\n        await this.entityStore.set(entity, output.trim());\n      }\n    }\n  }\n  // Clear memory contents.\n  /**\n   * Method to clear the memory contents.\n   * @returns Promise resolving to void.\n   */\n  async clear() {\n    await super.clear();\n    await this.entityStore.clear();\n  }\n}","map":{"version":3,"names":["BaseChatMemory","ENTITY_EXTRACTION_PROMPT","ENTITY_SUMMARIZATION_PROMPT","getBufferString","getPromptInputKey","LLMChain","InMemoryEntityStore","EntityMemory","constructor","fields","chatHistory","returnMessages","inputKey","outputKey","Object","defineProperty","enumerable","configurable","writable","value","llm","humanPrefix","aiPrefix","chatHistoryKey","entitiesKey","entityExtractionChain","prompt","entityExtractionPrompt","entitySummarizationChain","entitySummarizationPrompt","entityStore","entityCache","k","memoryKeys","memoryVariables","loadMemoryVariables","inputs","promptInputKey","messages","getMessages","serializedMessages","slice","output","predict","history","input","entities","trim","split","map","w","entitySummaries","entity","get","buffer","saveContext","outputs","inputData","existingSummary","summary","set","clear"],"sources":["/Users/mayamagavi/instalily/case-study/node_modules/langchain/dist/memory/entity_memory.js"],"sourcesContent":["import { BaseChatMemory } from \"./chat_memory.js\";\nimport { ENTITY_EXTRACTION_PROMPT, ENTITY_SUMMARIZATION_PROMPT, } from \"./prompt.js\";\nimport { getBufferString, getPromptInputKey, } from \"./base.js\";\nimport { LLMChain } from \"../chains/llm_chain.js\";\nimport { InMemoryEntityStore } from \"./stores/entity/in_memory.js\";\n// Entity extractor & summarizer to memory.\n/**\n * Class for managing entity extraction and summarization to memory in\n * chatbot applications. Extends the BaseChatMemory class and implements\n * the EntityMemoryInput interface.\n */\nexport class EntityMemory extends BaseChatMemory {\n    constructor(fields) {\n        super({\n            chatHistory: fields.chatHistory,\n            returnMessages: fields.returnMessages ?? false,\n            inputKey: fields.inputKey,\n            outputKey: fields.outputKey,\n        });\n        Object.defineProperty(this, \"entityExtractionChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"entitySummarizationChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"entityStore\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"entityCache\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"k\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 3\n        });\n        Object.defineProperty(this, \"chatHistoryKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"history\"\n        });\n        Object.defineProperty(this, \"llm\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"entitiesKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"entities\"\n        });\n        Object.defineProperty(this, \"humanPrefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"aiPrefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.llm = fields.llm;\n        this.humanPrefix = fields.humanPrefix;\n        this.aiPrefix = fields.aiPrefix;\n        this.chatHistoryKey = fields.chatHistoryKey ?? this.chatHistoryKey;\n        this.entitiesKey = fields.entitiesKey ?? this.entitiesKey;\n        this.entityExtractionChain = new LLMChain({\n            llm: this.llm,\n            prompt: fields.entityExtractionPrompt ?? ENTITY_EXTRACTION_PROMPT,\n        });\n        this.entitySummarizationChain = new LLMChain({\n            llm: this.llm,\n            prompt: fields.entitySummarizationPrompt ?? ENTITY_SUMMARIZATION_PROMPT,\n        });\n        this.entityStore = fields.entityStore ?? new InMemoryEntityStore();\n        this.entityCache = fields.entityCache ?? this.entityCache;\n        this.k = fields.k ?? this.k;\n    }\n    get memoryKeys() {\n        return [this.chatHistoryKey];\n    }\n    // Will always return list of memory variables.\n    get memoryVariables() {\n        return [this.entitiesKey, this.chatHistoryKey];\n    }\n    // Return history buffer.\n    /**\n     * Method to load memory variables and perform entity extraction.\n     * @param inputs Input values for the method.\n     * @returns Promise resolving to an object containing memory variables.\n     */\n    async loadMemoryVariables(inputs) {\n        const promptInputKey = this.inputKey ?? getPromptInputKey(inputs, this.memoryVariables);\n        const messages = await this.chatHistory.getMessages();\n        const serializedMessages = getBufferString(messages.slice(-this.k * 2), this.humanPrefix, this.aiPrefix);\n        const output = await this.entityExtractionChain.predict({\n            history: serializedMessages,\n            input: inputs[promptInputKey],\n        });\n        const entities = output.trim() === \"NONE\" ? [] : output.split(\",\").map((w) => w.trim());\n        const entitySummaries = {};\n        for (const entity of entities) {\n            entitySummaries[entity] = await this.entityStore.get(entity, \"No current information known.\");\n        }\n        this.entityCache = [...entities];\n        const buffer = this.returnMessages\n            ? messages.slice(-this.k * 2)\n            : serializedMessages;\n        return {\n            [this.chatHistoryKey]: buffer,\n            [this.entitiesKey]: entitySummaries,\n        };\n    }\n    // Save context from this conversation to buffer.\n    /**\n     * Method to save the context from a conversation to a buffer and perform\n     * entity summarization.\n     * @param inputs Input values for the method.\n     * @param outputs Output values from the method.\n     * @returns Promise resolving to void.\n     */\n    async saveContext(inputs, outputs) {\n        await super.saveContext(inputs, outputs);\n        const promptInputKey = this.inputKey ?? getPromptInputKey(inputs, this.memoryVariables);\n        const messages = await this.chatHistory.getMessages();\n        const serializedMessages = getBufferString(messages.slice(-this.k * 2), this.humanPrefix, this.aiPrefix);\n        const inputData = inputs[promptInputKey];\n        for (const entity of this.entityCache) {\n            const existingSummary = await this.entityStore.get(entity, \"No current information known.\");\n            const output = await this.entitySummarizationChain.predict({\n                summary: existingSummary,\n                entity,\n                history: serializedMessages,\n                input: inputData,\n            });\n            if (output.trim() !== \"UNCHANGED\") {\n                await this.entityStore.set(entity, output.trim());\n            }\n        }\n    }\n    // Clear memory contents.\n    /**\n     * Method to clear the memory contents.\n     * @returns Promise resolving to void.\n     */\n    async clear() {\n        await super.clear();\n        await this.entityStore.clear();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}