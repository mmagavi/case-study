{"ast":null,"code":"import { BaseStringPromptTemplate } from \"./base.js\";\nimport { checkValidTemplate, renderTemplate } from \"./template.js\";\nimport { PromptTemplate } from \"./prompt.js\";\n/**\n * Prompt template that contains few-shot examples.\n * @augments BasePromptTemplate\n * @augments FewShotPromptTemplateInput\n */\nexport class FewShotPromptTemplate extends BaseStringPromptTemplate {\n  constructor(input) {\n    super(input);\n    Object.defineProperty(this, \"lc_serializable\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"examples\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"exampleSelector\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"examplePrompt\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"suffix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"\"\n    });\n    Object.defineProperty(this, \"exampleSeparator\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"\\n\\n\"\n    });\n    Object.defineProperty(this, \"prefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"\"\n    });\n    Object.defineProperty(this, \"templateFormat\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"f-string\"\n    });\n    Object.defineProperty(this, \"validateTemplate\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.assign(this, input);\n    if (this.examples !== undefined && this.exampleSelector !== undefined) {\n      throw new Error(\"Only one of 'examples' and 'example_selector' should be provided\");\n    }\n    if (this.examples === undefined && this.exampleSelector === undefined) {\n      throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n    }\n    if (this.validateTemplate) {\n      let totalInputVariables = this.inputVariables;\n      if (this.partialVariables) {\n        totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n      }\n      checkValidTemplate(this.prefix + this.suffix, this.templateFormat, totalInputVariables);\n    }\n  }\n  _getPromptType() {\n    return \"few_shot\";\n  }\n  async getExamples(inputVariables) {\n    if (this.examples !== undefined) {\n      return this.examples;\n    }\n    if (this.exampleSelector !== undefined) {\n      return this.exampleSelector.selectExamples(inputVariables);\n    }\n    throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n  }\n  async partial(values) {\n    const newInputVariables = this.inputVariables.filter(iv => !(iv in values));\n    const newPartialVariables = {\n      ...(this.partialVariables ?? {}),\n      ...values\n    };\n    const promptDict = {\n      ...this,\n      inputVariables: newInputVariables,\n      partialVariables: newPartialVariables\n    };\n    return new FewShotPromptTemplate(promptDict);\n  }\n  /**\n   * Formats the prompt with the given values.\n   * @param values The values to format the prompt with.\n   * @returns A promise that resolves to a string representing the formatted prompt.\n   */\n  async format(values) {\n    const allValues = await this.mergePartialAndUserVariables(values);\n    const examples = await this.getExamples(allValues);\n    const exampleStrings = await Promise.all(examples.map(example => this.examplePrompt.format(example)));\n    const template = [this.prefix, ...exampleStrings, this.suffix].join(this.exampleSeparator);\n    return renderTemplate(template, this.templateFormat, allValues);\n  }\n  serialize() {\n    if (this.exampleSelector || !this.examples) {\n      throw new Error(\"Serializing an example selector is not currently supported\");\n    }\n    if (this.outputParser !== undefined) {\n      throw new Error(\"Serializing an output parser is not currently supported\");\n    }\n    return {\n      _type: this._getPromptType(),\n      input_variables: this.inputVariables,\n      example_prompt: this.examplePrompt.serialize(),\n      example_separator: this.exampleSeparator,\n      suffix: this.suffix,\n      prefix: this.prefix,\n      template_format: this.templateFormat,\n      examples: this.examples\n    };\n  }\n  static async deserialize(data) {\n    const {\n      example_prompt\n    } = data;\n    if (!example_prompt) {\n      throw new Error(\"Missing example prompt\");\n    }\n    const examplePrompt = await PromptTemplate.deserialize(example_prompt);\n    let examples;\n    if (Array.isArray(data.examples)) {\n      examples = data.examples;\n    } else {\n      throw new Error(\"Invalid examples format. Only list or string are supported.\");\n    }\n    return new FewShotPromptTemplate({\n      inputVariables: data.input_variables,\n      examplePrompt,\n      examples,\n      exampleSeparator: data.example_separator,\n      prefix: data.prefix,\n      suffix: data.suffix,\n      templateFormat: data.template_format\n    });\n  }\n}","map":{"version":3,"names":["BaseStringPromptTemplate","checkValidTemplate","renderTemplate","PromptTemplate","FewShotPromptTemplate","constructor","input","Object","defineProperty","enumerable","configurable","writable","value","assign","examples","undefined","exampleSelector","Error","validateTemplate","totalInputVariables","inputVariables","partialVariables","concat","keys","prefix","suffix","templateFormat","_getPromptType","getExamples","selectExamples","partial","values","newInputVariables","filter","iv","newPartialVariables","promptDict","format","allValues","mergePartialAndUserVariables","exampleStrings","Promise","all","map","example","examplePrompt","template","join","exampleSeparator","serialize","outputParser","_type","input_variables","example_prompt","example_separator","template_format","deserialize","data","Array","isArray"],"sources":["/Users/mayamagavi/instalily/case-study/node_modules/langchain/dist/prompts/few_shot.js"],"sourcesContent":["import { BaseStringPromptTemplate, } from \"./base.js\";\nimport { checkValidTemplate, renderTemplate, } from \"./template.js\";\nimport { PromptTemplate } from \"./prompt.js\";\n/**\n * Prompt template that contains few-shot examples.\n * @augments BasePromptTemplate\n * @augments FewShotPromptTemplateInput\n */\nexport class FewShotPromptTemplate extends BaseStringPromptTemplate {\n    constructor(input) {\n        super(input);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"examples\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleSelector\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"examplePrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"suffix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"exampleSeparator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\\n\\n\"\n        });\n        Object.defineProperty(this, \"prefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"templateFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"f-string\"\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.assign(this, input);\n        if (this.examples !== undefined && this.exampleSelector !== undefined) {\n            throw new Error(\"Only one of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.examples === undefined && this.exampleSelector === undefined) {\n            throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.validateTemplate) {\n            let totalInputVariables = this.inputVariables;\n            if (this.partialVariables) {\n                totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n            }\n            checkValidTemplate(this.prefix + this.suffix, this.templateFormat, totalInputVariables);\n        }\n    }\n    _getPromptType() {\n        return \"few_shot\";\n    }\n    async getExamples(inputVariables) {\n        if (this.examples !== undefined) {\n            return this.examples;\n        }\n        if (this.exampleSelector !== undefined) {\n            return this.exampleSelector.selectExamples(inputVariables);\n        }\n        throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n    }\n    async partial(values) {\n        const newInputVariables = this.inputVariables.filter((iv) => !(iv in values));\n        const newPartialVariables = {\n            ...(this.partialVariables ?? {}),\n            ...values,\n        };\n        const promptDict = {\n            ...this,\n            inputVariables: newInputVariables,\n            partialVariables: newPartialVariables,\n        };\n        return new FewShotPromptTemplate(promptDict);\n    }\n    /**\n     * Formats the prompt with the given values.\n     * @param values The values to format the prompt with.\n     * @returns A promise that resolves to a string representing the formatted prompt.\n     */\n    async format(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        const examples = await this.getExamples(allValues);\n        const exampleStrings = await Promise.all(examples.map((example) => this.examplePrompt.format(example)));\n        const template = [this.prefix, ...exampleStrings, this.suffix].join(this.exampleSeparator);\n        return renderTemplate(template, this.templateFormat, allValues);\n    }\n    serialize() {\n        if (this.exampleSelector || !this.examples) {\n            throw new Error(\"Serializing an example selector is not currently supported\");\n        }\n        if (this.outputParser !== undefined) {\n            throw new Error(\"Serializing an output parser is not currently supported\");\n        }\n        return {\n            _type: this._getPromptType(),\n            input_variables: this.inputVariables,\n            example_prompt: this.examplePrompt.serialize(),\n            example_separator: this.exampleSeparator,\n            suffix: this.suffix,\n            prefix: this.prefix,\n            template_format: this.templateFormat,\n            examples: this.examples,\n        };\n    }\n    static async deserialize(data) {\n        const { example_prompt } = data;\n        if (!example_prompt) {\n            throw new Error(\"Missing example prompt\");\n        }\n        const examplePrompt = await PromptTemplate.deserialize(example_prompt);\n        let examples;\n        if (Array.isArray(data.examples)) {\n            examples = data.examples;\n        }\n        else {\n            throw new Error(\"Invalid examples format. Only list or string are supported.\");\n        }\n        return new FewShotPromptTemplate({\n            inputVariables: data.input_variables,\n            examplePrompt,\n            examples,\n            exampleSeparator: data.example_separator,\n            prefix: data.prefix,\n            suffix: data.suffix,\n            templateFormat: data.template_format,\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}