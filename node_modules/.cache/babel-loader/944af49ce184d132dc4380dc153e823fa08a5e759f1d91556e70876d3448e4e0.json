{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === 'm') throw new TypeError('Private method is not writable');\n  if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a setter');\n  if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver)) throw new TypeError('Cannot write private member to an object whose class did not declare it');\n  return kind === 'a' ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a getter');\n  if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver)) throw new TypeError('Cannot read private member from an object whose class did not declare it');\n  return kind === 'm' ? f : kind === 'a' ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AbstractPage_client;\nimport { VERSION } from './version.mjs';\nimport { Stream } from './streaming.mjs';\nimport { APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError } from './error.mjs';\nimport { getDefaultAgent } from 'openai/_shims/agent';\nimport { fetch, isPolyfilled as fetchIsPolyfilled } from 'openai/_shims/fetch';\nimport { isMultipartBody } from './uploads.mjs';\nexport { maybeMultipartFormRequestOptions, multipartFormRequestOptions, createForm } from './uploads.mjs';\nconst MAX_RETRIES = 2;\nasync function defaultParseResponse(props) {\n  const {\n    response\n  } = props;\n  if (props.options.stream) {\n    // Note: there is an invariant here that isn't represented in the type system\n    // that if you set `stream: true` the response type must also be `Stream<T>`\n    return new Stream(response, props.controller);\n  }\n  const contentType = response.headers.get('content-type');\n  if (contentType === null || contentType === void 0 ? void 0 : contentType.includes('application/json')) {\n    const json = await response.json();\n    debug('response', response.status, response.url, response.headers, json);\n    return json;\n  }\n  // TODO handle blob, arraybuffer, other content types, etc.\n  const text = await response.text();\n  debug('response', response.status, response.url, response.headers, text);\n  return text;\n}\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */\nexport class APIPromise extends Promise {\n  constructor(responsePromise, parseResponse = defaultParseResponse) {\n    super(resolve => {\n      // this is maybe a bit weird but this has to be a no-op to not implicitly\n      // parse the response body; instead .then, .catch, .finally are overridden\n      // to parse the response\n      resolve(null);\n    });\n    this.responsePromise = responsePromise;\n    this.parseResponse = parseResponse;\n  }\n  _thenUnwrap(transform) {\n    return new APIPromise(this.responsePromise, async props => transform(await this.parseResponse(props)));\n  }\n  /**\n   * Gets the raw `Response` instance instead of parsing the response\n   * data.\n   *\n   * If you want to parse the response body but still get the `Response`\n   * instance, you can use {@link withResponse()}.\n   */\n  asResponse() {\n    return this.responsePromise.then(p => p.response);\n  }\n  /**\n   * Gets the parsed response data and the raw `Response` instance.\n   *\n   * If you just want to get the raw `Response` instance without parsing it,\n   * you can use {@link asResponse()}.\n   */\n  async withResponse() {\n    const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\n    return {\n      data,\n      response\n    };\n  }\n  parse() {\n    if (!this.parsedPromise) {\n      this.parsedPromise = this.responsePromise.then(this.parseResponse);\n    }\n    return this.parsedPromise;\n  }\n  then(onfulfilled, onrejected) {\n    return this.parse().then(onfulfilled, onrejected);\n  }\n  catch(onrejected) {\n    return this.parse().catch(onrejected);\n  }\n  finally(onfinally) {\n    return this.parse().finally(onfinally);\n  }\n}\nexport class APIClient {\n  constructor({\n    baseURL,\n    maxRetries,\n    timeout = 600000,\n    // 10 minutes\n    httpAgent,\n    fetch: overridenFetch\n  }) {\n    this.baseURL = baseURL;\n    this.maxRetries = validatePositiveInteger('maxRetries', maxRetries !== null && maxRetries !== void 0 ? maxRetries : MAX_RETRIES);\n    this.timeout = validatePositiveInteger('timeout', timeout);\n    this.httpAgent = httpAgent;\n    this.fetch = overridenFetch !== null && overridenFetch !== void 0 ? overridenFetch : fetch;\n  }\n  authHeaders(opts) {\n    return {};\n  }\n  /**\n   * Override this to add your own default headers, for example:\n   *\n   *  {\n   *    ...super.defaultHeaders(),\n   *    Authorization: 'Bearer 123',\n   *  }\n   */\n  defaultHeaders(opts) {\n    return {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'User-Agent': this.getUserAgent(),\n      ...getPlatformHeaders(),\n      ...this.authHeaders(opts)\n    };\n  }\n  /**\n   * Override this to add your own headers validation:\n   */\n  validateHeaders(headers, customHeaders) {}\n  defaultIdempotencyKey() {\n    return `stainless-node-retry-${uuid4()}`;\n  }\n  get(path, opts) {\n    return this.methodRequest('get', path, opts);\n  }\n  post(path, opts) {\n    return this.methodRequest('post', path, opts);\n  }\n  patch(path, opts) {\n    return this.methodRequest('patch', path, opts);\n  }\n  put(path, opts) {\n    return this.methodRequest('put', path, opts);\n  }\n  delete(path, opts) {\n    return this.methodRequest('delete', path, opts);\n  }\n  methodRequest(method, path, opts) {\n    return this.request(Promise.resolve(opts).then(opts => ({\n      method,\n      path,\n      ...opts\n    })));\n  }\n  getAPIList(path, Page, opts) {\n    return this.requestAPIList(Page, {\n      method: 'get',\n      path,\n      ...opts\n    });\n  }\n  calculateContentLength(body) {\n    if (typeof body === 'string') {\n      if (typeof Buffer !== 'undefined') {\n        return Buffer.byteLength(body, 'utf8').toString();\n      }\n      if (typeof TextEncoder !== 'undefined') {\n        const encoder = new TextEncoder();\n        const encoded = encoder.encode(body);\n        return encoded.length.toString();\n      }\n    }\n    return null;\n  }\n  buildRequest(options) {\n    var _a, _b, _c, _d, _e, _f;\n    const {\n      method,\n      path,\n      query,\n      headers = {}\n    } = options;\n    const body = isMultipartBody(options.body) ? options.body.body : options.body ? JSON.stringify(options.body, null, 2) : null;\n    const contentLength = this.calculateContentLength(body);\n    const url = this.buildURL(path, query);\n    if ('timeout' in options) validatePositiveInteger('timeout', options.timeout);\n    const timeout = (_a = options.timeout) !== null && _a !== void 0 ? _a : this.timeout;\n    const httpAgent = (_c = (_b = options.httpAgent) !== null && _b !== void 0 ? _b : this.httpAgent) !== null && _c !== void 0 ? _c : getDefaultAgent(url);\n    const minAgentTimeout = timeout + 1000;\n    if (typeof ((_d = httpAgent === null || httpAgent === void 0 ? void 0 : httpAgent.options) === null || _d === void 0 ? void 0 : _d.timeout) === 'number' && minAgentTimeout > ((_e = httpAgent.options.timeout) !== null && _e !== void 0 ? _e : 0)) {\n      // Allow any given request to bump our agent active socket timeout.\n      // This may seem strange, but leaking active sockets should be rare and not particularly problematic,\n      // and without mutating agent we would need to create more of them.\n      // This tradeoff optimizes for performance.\n      httpAgent.options.timeout = minAgentTimeout;\n    }\n    if (this.idempotencyHeader && method !== 'get') {\n      if (!options.idempotencyKey) options.idempotencyKey = this.defaultIdempotencyKey();\n      headers[this.idempotencyHeader] = options.idempotencyKey;\n    }\n    const reqHeaders = {\n      ...(contentLength && {\n        'Content-Length': contentLength\n      }),\n      ...this.defaultHeaders(options),\n      ...headers\n    };\n    // let builtin fetch set the Content-Type for multipart bodies\n    if (isMultipartBody(options.body) && !fetchIsPolyfilled) {\n      delete reqHeaders['Content-Type'];\n    }\n    // Strip any headers being explicitly omitted with null\n    Object.keys(reqHeaders).forEach(key => reqHeaders[key] === null && delete reqHeaders[key]);\n    const req = {\n      method,\n      ...(body && {\n        body: body\n      }),\n      headers: reqHeaders,\n      ...(httpAgent && {\n        agent: httpAgent\n      }),\n      // @ts-ignore node-fetch uses a custom AbortSignal type that is\n      // not compatible with standard web types\n      signal: (_f = options.signal) !== null && _f !== void 0 ? _f : null\n    };\n    this.validateHeaders(reqHeaders, headers);\n    return {\n      req,\n      url,\n      timeout\n    };\n  }\n  /**\n   * Used as a callback for mutating the given `RequestInit` object.\n   *\n   * This is useful for cases where you want to add certain headers based off of\n   * the request properties, e.g. `method` or `url`.\n   */\n  async prepareRequest(request, {\n    url,\n    options\n  }) {}\n  parseHeaders(headers) {\n    return !headers ? {} : Symbol.iterator in headers ? Object.fromEntries(Array.from(headers).map(header => [...header])) : {\n      ...headers\n    };\n  }\n  makeStatusError(status, error, message, headers) {\n    return APIError.generate(status, error, message, headers);\n  }\n  request(options, remainingRetries = null) {\n    return new APIPromise(this.makeRequest(options, remainingRetries));\n  }\n  async makeRequest(optionsInput, retriesRemaining) {\n    var _a, _b, _c;\n    const options = await optionsInput;\n    if (retriesRemaining == null) {\n      retriesRemaining = (_a = options.maxRetries) !== null && _a !== void 0 ? _a : this.maxRetries;\n    }\n    const {\n      req,\n      url,\n      timeout\n    } = this.buildRequest(options);\n    await this.prepareRequest(req, {\n      url,\n      options\n    });\n    debug('request', url, options, req.headers);\n    if ((_b = options.signal) === null || _b === void 0 ? void 0 : _b.aborted) {\n      throw new APIUserAbortError();\n    }\n    const controller = new AbortController();\n    const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);\n    if (response instanceof Error) {\n      if ((_c = options.signal) === null || _c === void 0 ? void 0 : _c.aborted) {\n        throw new APIUserAbortError();\n      }\n      if (retriesRemaining) {\n        return this.retryRequest(options, retriesRemaining);\n      }\n      if (response.name === 'AbortError') {\n        throw new APIConnectionTimeoutError();\n      }\n      throw new APIConnectionError({\n        cause: response\n      });\n    }\n    const responseHeaders = createResponseHeaders(response.headers);\n    if (!response.ok) {\n      if (retriesRemaining && this.shouldRetry(response)) {\n        return this.retryRequest(options, retriesRemaining, responseHeaders);\n      }\n      const errText = await response.text().catch(() => 'Unknown');\n      const errJSON = safeJSON(errText);\n      const errMessage = errJSON ? undefined : errText;\n      debug('response', response.status, url, responseHeaders, errMessage);\n      const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);\n      throw err;\n    }\n    return {\n      response,\n      options,\n      controller\n    };\n  }\n  requestAPIList(Page, options) {\n    const request = this.makeRequest(options, null);\n    return new PagePromise(this, request, Page);\n  }\n  buildURL(path, query) {\n    const url = isAbsoluteURL(path) ? new URL(path) : new URL(this.baseURL + (this.baseURL.endsWith('/') && path.startsWith('/') ? path.slice(1) : path));\n    const defaultQuery = this.defaultQuery();\n    if (!isEmptyObj(defaultQuery)) {\n      query = {\n        ...defaultQuery,\n        ...query\n      };\n    }\n    if (query) {\n      url.search = this.stringifyQuery(query);\n    }\n    return url.toString();\n  }\n  stringifyQuery(query) {\n    return Object.entries(query).filter(([_, value]) => typeof value !== 'undefined').map(([key, value]) => {\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n      }\n      if (value === null) {\n        return `${encodeURIComponent(key)}=`;\n      }\n      throw new Error(`Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`);\n    }).join('&');\n  }\n  async fetchWithTimeout(url, init, ms, controller) {\n    const {\n      signal,\n      ...options\n    } = init || {};\n    if (signal) signal.addEventListener('abort', () => controller.abort());\n    const timeout = setTimeout(() => controller.abort(), ms);\n    return this.getRequestClient().fetch(url, {\n      signal: controller.signal,\n      ...options\n    }).finally(() => {\n      clearTimeout(timeout);\n    });\n  }\n  getRequestClient() {\n    return {\n      fetch: this.fetch\n    };\n  }\n  shouldRetry(response) {\n    // Note this is not a standard header.\n    const shouldRetryHeader = response.headers.get('x-should-retry');\n    // If the server explicitly says whether or not to retry, obey.\n    if (shouldRetryHeader === 'true') return true;\n    if (shouldRetryHeader === 'false') return false;\n    // Retry on lock timeouts.\n    if (response.status === 409) return true;\n    // Retry on rate limits.\n    if (response.status === 429) return true;\n    // Retry internal errors.\n    if (response.status >= 500) return true;\n    return false;\n  }\n  async retryRequest(options, retriesRemaining, responseHeaders) {\n    var _a;\n    retriesRemaining -= 1;\n    // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n    //\n    // TODO: we may want to handle the case where the header is using the http-date syntax: \"Retry-After: <http-date>\".\n    // See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After#syntax for details.\n    const retryAfter = parseInt((responseHeaders === null || responseHeaders === void 0 ? void 0 : responseHeaders['retry-after']) || '');\n    const maxRetries = (_a = options.maxRetries) !== null && _a !== void 0 ? _a : this.maxRetries;\n    const timeout = this.calculateRetryTimeoutSeconds(retriesRemaining, retryAfter, maxRetries) * 1000;\n    await sleep(timeout);\n    return this.makeRequest(options, retriesRemaining);\n  }\n  calculateRetryTimeoutSeconds(retriesRemaining, retryAfter, maxRetries) {\n    const initialRetryDelay = 0.5;\n    const maxRetryDelay = 2;\n    // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n    // just do what it says.\n    if (Number.isInteger(retryAfter) && retryAfter <= 60) {\n      return retryAfter;\n    }\n    const numRetries = maxRetries - retriesRemaining;\n    // Apply exponential backoff, but not more than the max.\n    const sleepSeconds = Math.min(initialRetryDelay * Math.pow(numRetries - 1, 2), maxRetryDelay);\n    // Apply some jitter, plus-or-minus half a second.\n    const jitter = Math.random() - 0.5;\n    return sleepSeconds + jitter;\n  }\n  getUserAgent() {\n    return `${this.constructor.name}/JS ${VERSION}`;\n  }\n}\nexport class APIResource {\n  constructor(client) {\n    this.client = client;\n    this.get = client.get.bind(client);\n    this.post = client.post.bind(client);\n    this.patch = client.patch.bind(client);\n    this.put = client.put.bind(client);\n    this.delete = client.delete.bind(client);\n    this.getAPIList = client.getAPIList.bind(client);\n  }\n}\nexport class AbstractPage {\n  constructor(client, response, body, options) {\n    _AbstractPage_client.set(this, void 0);\n    __classPrivateFieldSet(this, _AbstractPage_client, client, 'f');\n    this.options = options;\n    this.response = response;\n    this.body = body;\n  }\n  hasNextPage() {\n    const items = this.getPaginatedItems();\n    if (!items.length) return false;\n    return this.nextPageInfo() != null;\n  }\n  async getNextPage() {\n    const nextInfo = this.nextPageInfo();\n    if (!nextInfo) {\n      throw new Error('No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.');\n    }\n    const nextOptions = {\n      ...this.options\n    };\n    if ('params' in nextInfo) {\n      nextOptions.query = {\n        ...nextOptions.query,\n        ...nextInfo.params\n      };\n    } else if ('url' in nextInfo) {\n      const params = [...Object.entries(nextOptions.query || {}), ...nextInfo.url.searchParams.entries()];\n      for (const [key, value] of params) {\n        nextInfo.url.searchParams.set(key, value);\n      }\n      nextOptions.query = undefined;\n      nextOptions.path = nextInfo.url.toString();\n    }\n    return await __classPrivateFieldGet(this, _AbstractPage_client, 'f').requestAPIList(this.constructor, nextOptions);\n  }\n  async *iterPages() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let page = this;\n    yield page;\n    while (page.hasNextPage()) {\n      page = await page.getNextPage();\n      yield page;\n    }\n  }\n  async *[(_AbstractPage_client = new WeakMap(), Symbol.asyncIterator)]() {\n    for await (const page of this.iterPages()) {\n      for (const item of page.getPaginatedItems()) {\n        yield item;\n      }\n    }\n  }\n}\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */\nexport class PagePromise extends APIPromise {\n  constructor(client, request, Page) {\n    super(request, async props => new Page(client, props.response, await defaultParseResponse(props), props.options));\n  }\n  /**\n   * Allow auto-paginating iteration on an unawaited list call, eg:\n   *\n   *    for await (const item of client.items.list()) {\n   *      console.log(item)\n   *    }\n   */\n  async *[Symbol.asyncIterator]() {\n    const page = await this;\n    for await (const item of page) {\n      yield item;\n    }\n  }\n}\nexport const createResponseHeaders = headers => {\n  return new Proxy(Object.fromEntries(\n  // @ts-ignore\n  headers.entries()), {\n    get(target, name) {\n      const key = name.toString();\n      return target[key.toLowerCase()] || target[key];\n    }\n  });\n};\n// This is required so that we can determine if a given object matches the RequestOptions\n// type at runtime. While this requires duplication, it is enforced by the TypeScript\n// compiler such that any missing / extraneous keys will cause an error.\nconst requestOptionsKeys = {\n  method: true,\n  path: true,\n  query: true,\n  body: true,\n  headers: true,\n  maxRetries: true,\n  stream: true,\n  timeout: true,\n  httpAgent: true,\n  signal: true,\n  idempotencyKey: true\n};\nexport const isRequestOptions = obj => {\n  return typeof obj === 'object' && obj !== null && !isEmptyObj(obj) && Object.keys(obj).every(k => hasOwn(requestOptionsKeys, k));\n};\nconst getPlatformProperties = () => {\n  if (typeof Deno !== 'undefined' && Deno.build != null) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': normalizePlatform(Deno.build.os),\n      'X-Stainless-Arch': normalizeArch(Deno.build.arch),\n      'X-Stainless-Runtime': 'deno',\n      'X-Stainless-Runtime-Version': Deno.version\n    };\n  }\n  if (typeof EdgeRuntime !== 'undefined') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': `other:${EdgeRuntime}`,\n      'X-Stainless-Runtime': 'edge',\n      'X-Stainless-Runtime-Version': process.version\n    };\n  }\n  // Check if Node.js\n  if (Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': normalizePlatform(process.platform),\n      'X-Stainless-Arch': normalizeArch(process.arch),\n      'X-Stainless-Runtime': 'node',\n      'X-Stainless-Runtime-Version': process.version\n    };\n  }\n  const browserInfo = getBrowserInfo();\n  if (browserInfo) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': 'unknown',\n      'X-Stainless-Runtime': `browser:${browserInfo.browser}`,\n      'X-Stainless-Runtime-Version': browserInfo.version\n    };\n  }\n  // TODO add support for Cloudflare workers, etc.\n  return {\n    'X-Stainless-Lang': 'js',\n    'X-Stainless-Package-Version': VERSION,\n    'X-Stainless-OS': 'Unknown',\n    'X-Stainless-Arch': 'unknown',\n    'X-Stainless-Runtime': 'unknown',\n    'X-Stainless-Runtime-Version': 'unknown'\n  };\n};\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo() {\n  if (typeof navigator === 'undefined' || !navigator) {\n    return null;\n  }\n  // NOTE: The order matters here!\n  const browserPatterns = [{\n    key: 'edge',\n    pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'ie',\n    pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'ie',\n    pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'chrome',\n    pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'firefox',\n    pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'safari',\n    pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/\n  }];\n  // Find the FIRST matching browser\n  for (const {\n    key,\n    pattern\n  } of browserPatterns) {\n    const match = pattern.exec(navigator.userAgent);\n    if (match) {\n      const major = match[1] || 0;\n      const minor = match[2] || 0;\n      const patch = match[3] || 0;\n      return {\n        browser: key,\n        version: `${major}.${minor}.${patch}`\n      };\n    }\n  }\n  return null;\n}\nconst normalizeArch = arch => {\n  // Node docs:\n  // - https://nodejs.org/api/process.html#processarch\n  // Deno docs:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  if (arch === 'x32') return 'x32';\n  if (arch === 'x86_64' || arch === 'x64') return 'x64';\n  if (arch === 'arm') return 'arm';\n  if (arch === 'aarch64' || arch === 'arm64') return 'arm64';\n  if (arch) return `other:${arch}`;\n  return 'unknown';\n};\nconst normalizePlatform = platform => {\n  // Node platforms:\n  // - https://nodejs.org/api/process.html#processplatform\n  // Deno platforms:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  // - https://github.com/denoland/deno/issues/14799\n  platform = platform.toLowerCase();\n  // NOTE: this iOS check is untested and may not work\n  // Node does not work natively on IOS, there is a fork at\n  // https://github.com/nodejs-mobile/nodejs-mobile\n  // however it is unknown at the time of writing how to detect if it is running\n  if (platform.includes('ios')) return 'iOS';\n  if (platform === 'android') return 'Android';\n  if (platform === 'darwin') return 'MacOS';\n  if (platform === 'win32') return 'Windows';\n  if (platform === 'freebsd') return 'FreeBSD';\n  if (platform === 'openbsd') return 'OpenBSD';\n  if (platform === 'linux') return 'Linux';\n  if (platform) return `Other:${platform}`;\n  return 'Unknown';\n};\nlet _platformHeaders;\nconst getPlatformHeaders = () => {\n  return _platformHeaders !== null && _platformHeaders !== void 0 ? _platformHeaders : _platformHeaders = getPlatformProperties();\n};\nexport const safeJSON = text => {\n  try {\n    return JSON.parse(text);\n  } catch (err) {\n    return undefined;\n  }\n};\n// https://stackoverflow.com/a/19709846\nconst startsWithSchemeRegexp = new RegExp('^(?:[a-z]+:)?//', 'i');\nconst isAbsoluteURL = url => {\n  return startsWithSchemeRegexp.test(url);\n};\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\nconst validatePositiveInteger = (name, n) => {\n  if (typeof n !== 'number' || !Number.isInteger(n)) {\n    throw new Error(`${name} must be an integer`);\n  }\n  if (n < 0) {\n    throw new Error(`${name} must be a positive integer`);\n  }\n  return n;\n};\nexport const castToError = err => {\n  if (err instanceof Error) return err;\n  return new Error(err);\n};\nexport const ensurePresent = value => {\n  if (value == null) throw new Error(`Expected a value to be given but received ${value} instead.`);\n  return value;\n};\n/**\n * Read an environment variable.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */\nexport const readEnv = env => {\n  var _a, _b, _c, _d;\n  if (typeof process !== 'undefined') {\n    return (_b = (_a = process.env) === null || _a === void 0 ? void 0 : _a[env]) !== null && _b !== void 0 ? _b : undefined;\n  }\n  if (typeof Deno !== 'undefined') {\n    return (_d = (_c = Deno.env) === null || _c === void 0 ? void 0 : _c.get) === null || _d === void 0 ? void 0 : _d.call(_c, env);\n  }\n  return undefined;\n};\nexport const coerceInteger = value => {\n  if (typeof value === 'number') return Math.round(value);\n  if (typeof value === 'string') return parseInt(value, 10);\n  throw new Error(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nexport const coerceFloat = value => {\n  if (typeof value === 'number') return value;\n  if (typeof value === 'string') return parseFloat(value);\n  throw new Error(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nexport const coerceBoolean = value => {\n  if (typeof value === 'boolean') return value;\n  if (typeof value === 'string') return value === 'true';\n  return Boolean(value);\n};\nexport const maybeCoerceInteger = value => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceInteger(value);\n};\nexport const maybeCoerceFloat = value => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceFloat(value);\n};\nexport const maybeCoerceBoolean = value => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceBoolean(value);\n};\n// https://stackoverflow.com/a/34491287\nexport function isEmptyObj(obj) {\n  if (!obj) return true;\n  for (const _k in obj) return false;\n  return true;\n}\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nexport function hasOwn(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\nexport function debug(action, ...args) {\n  if (typeof process !== 'undefined' && process.env['DEBUG'] === 'true') {\n    console.log(`OpenAI:DEBUG:${action}`, ...args);\n  }\n}\n/**\n * https://stackoverflow.com/a/2117523\n */\nconst uuid4 = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n};\nexport const isRunningInBrowser = () => {\n  return (\n    // @ts-ignore\n    typeof window !== 'undefined' &&\n    // @ts-ignore\n    typeof window.document !== 'undefined' &&\n    // @ts-ignore\n    typeof navigator !== 'undefined'\n  );\n};\nexport const isHeadersProtocol = headers => {\n  return typeof (headers === null || headers === void 0 ? void 0 : headers.get) === 'function';\n};\nexport const getHeader = (headers, key) => {\n  const lowerKey = key.toLowerCase();\n  if (isHeadersProtocol(headers)) return headers.get(key) || headers.get(lowerKey);\n  const value = headers[key] || headers[lowerKey];\n  if (Array.isArray(value)) {\n    if (value.length <= 1) return value[0];\n    console.warn(`Received ${value.length} entries for the ${key} header, using the first entry.`);\n    return value[0];\n  }\n  return value;\n};\n/**\n * Encodes a string to Base64 format.\n */\nexport const toBase64 = str => {\n  if (!str) return '';\n  if (typeof Buffer !== 'undefined') {\n    return Buffer.from(str).toString('base64');\n  }\n  if (typeof btoa !== 'undefined') {\n    return btoa(str);\n  }\n  throw new Error('Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined');\n};","map":{"version":3,"names":["__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","call","value","get","_AbstractPage_client","VERSION","Stream","APIError","APIConnectionError","APIConnectionTimeoutError","APIUserAbortError","getDefaultAgent","fetch","isPolyfilled","fetchIsPolyfilled","isMultipartBody","maybeMultipartFormRequestOptions","multipartFormRequestOptions","createForm","MAX_RETRIES","defaultParseResponse","props","response","options","stream","controller","contentType","headers","includes","json","status","url","text","responsePromise","asResponse","then","p","withResponse","data","Promise","all","parse","parsedPromise","parseResponse","onrejected","onfulfilled","catch","finally","onfinally","timeout","baseURL","validatePositiveInteger","maxRetries","overridenFetch","authHeaders","opts","defaultHeaders","getUserAgent","getPlatformHeaders","validateHeaders","customHeaders","defaultIdempotencyKey","uuid4","methodRequest","path","put","delete","method","request","resolve","getAPIList","Page","requestAPIList","calculateContentLength","body","Buffer","byteLength","toString","TextEncoder","encoder","encoded","encode","length","buildRequest","_b","_c","_d","_e","_f","query","JSON","stringify","contentLength","buildURL","_a","httpAgent","minAgentTimeout","idempotencyHeader","idempotencyKey","reqHeaders","keys","forEach","key","req","agent","signal","prepareRequest","parseHeaders","iterator","Object","fromEntries","Array","from","map","header","makeStatusError","error","message","generate","remainingRetries","APIPromise","makeRequest","optionsInput","retriesRemaining","aborted","AbortController","fetchWithTimeout","castToError","Error","retryRequest","name","cause","createResponseHeaders","ok","shouldRetry","responseHeaders","errJSON","safeJSON","errText","errMessage","undefined","err","PagePromise","isAbsoluteURL","URL","endsWith","startsWith","slice","defaultQuery","isEmptyObj","stringifyQuery","entries","_","encodeURIComponent","init","ms","addEventListener","abort","setTimeout","getRequestClient","clearTimeout","shouldRetryHeader","retryAfter","parseInt","calculateRetryTimeoutSeconds","sleep","initialRetryDelay","maxRetryDelay","Number","isInteger","numRetries","sleepSeconds","Math","min","pow","jitter","random","constructor","APIResource","client","bind","post","patch","AbstractPage","set","__classPrivateFieldSet","hasNextPage","items","getPaginatedItems","nextPageInfo","nextOptions","nextInfo","params","searchParams","iterPages","page","getNextPage","WeakMap","Symbol","asyncIterator","item","Proxy","target","toLowerCase","isRequestOptions","obj","every","k","hasOwn","requestOptionsKeys","getPlatformProperties","Deno","build","normalizePlatform","os","normalizeArch","arch","version","EdgeRuntime","process","prototype","platform","browserInfo","getBrowserInfo","browser","navigator","browserPatterns","pattern","match","exec","userAgent","major","minor","_platformHeaders","startsWithSchemeRegexp","RegExp","test","n","ensurePresent","readEnv","env","coerceInteger","round","coerceFloat","parseFloat","coerceBoolean","Boolean","maybeCoerceInteger","maybeCoerceFloat","maybeCoerceBoolean","_k","hasOwnProperty","debug","action","args","log","r","v","c","isRunningInBrowser","window","document"],"sources":["/Users/mayamagavi/instalily/case-study/node_modules/openai/src/core.ts"],"sourcesContent":["import { VERSION } from './version';\nimport { Stream } from './streaming';\nimport { APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError } from './error';\nimport type { Readable } from './_shims/node-readable';\nimport { getDefaultAgent, type Agent } from './_shims/agent';\nimport {\n  fetch,\n  isPolyfilled as fetchIsPolyfilled,\n  type RequestInfo,\n  type RequestInit,\n  type Response,\n  type HeadersInit,\n} from './_shims/fetch.js';\nexport { type Response };\nimport { isMultipartBody } from './uploads';\nexport {\n  maybeMultipartFormRequestOptions,\n  multipartFormRequestOptions,\n  createForm,\n  type Uploadable,\n} from './uploads';\n\nconst MAX_RETRIES = 2;\n\nexport type Fetch = (url: RequestInfo, init?: RequestInit) => Promise<Response>;\n\ntype PromiseOrValue<T> = T | Promise<T>;\n\ntype APIResponseProps = {\n  response: Response;\n  options: FinalRequestOptions;\n  controller: AbortController;\n};\n\nasync function defaultParseResponse<T>(props: APIResponseProps): Promise<T> {\n  const { response } = props;\n  if (props.options.stream) {\n    // Note: there is an invariant here that isn't represented in the type system\n    // that if you set `stream: true` the response type must also be `Stream<T>`\n    return new Stream(response, props.controller) as any;\n  }\n\n  const contentType = response.headers.get('content-type');\n  if (contentType?.includes('application/json')) {\n    const json = await response.json();\n\n    debug('response', response.status, response.url, response.headers, json);\n\n    return json as T;\n  }\n\n  // TODO handle blob, arraybuffer, other content types, etc.\n  const text = await response.text();\n  debug('response', response.status, response.url, response.headers, text);\n  return text as T;\n}\n\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */\nexport class APIPromise<T> extends Promise<T> {\n  private parsedPromise: Promise<T> | undefined;\n\n  constructor(\n    private responsePromise: Promise<APIResponseProps>,\n    private parseResponse: (props: APIResponseProps) => PromiseOrValue<T> = defaultParseResponse,\n  ) {\n    super((resolve) => {\n      // this is maybe a bit weird but this has to be a no-op to not implicitly\n      // parse the response body; instead .then, .catch, .finally are overridden\n      // to parse the response\n      resolve(null as any);\n    });\n  }\n\n  _thenUnwrap<U>(transform: (data: T) => U): APIPromise<U> {\n    return new APIPromise(this.responsePromise, async (props) => transform(await this.parseResponse(props)));\n  }\n\n  /**\n   * Gets the raw `Response` instance instead of parsing the response\n   * data.\n   *\n   * If you want to parse the response body but still get the `Response`\n   * instance, you can use {@link withResponse()}.\n   */\n  asResponse(): Promise<Response> {\n    return this.responsePromise.then((p) => p.response);\n  }\n  /**\n   * Gets the parsed response data and the raw `Response` instance.\n   *\n   * If you just want to get the raw `Response` instance without parsing it,\n   * you can use {@link asResponse()}.\n   */\n  async withResponse(): Promise<{ data: T; response: Response }> {\n    const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\n    return { data, response };\n  }\n\n  private parse(): Promise<T> {\n    if (!this.parsedPromise) {\n      this.parsedPromise = this.responsePromise.then(this.parseResponse);\n    }\n    return this.parsedPromise;\n  }\n\n  override then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n  ): Promise<TResult1 | TResult2> {\n    return this.parse().then(onfulfilled, onrejected);\n  }\n\n  override catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null,\n  ): Promise<T | TResult> {\n    return this.parse().catch(onrejected);\n  }\n\n  override finally(onfinally?: (() => void) | undefined | null): Promise<T> {\n    return this.parse().finally(onfinally);\n  }\n}\n\nexport abstract class APIClient {\n  baseURL: string;\n  maxRetries: number;\n  timeout: number;\n  httpAgent: Agent | undefined;\n\n  private fetch: Fetch;\n  protected idempotencyHeader?: string;\n\n  constructor({\n    baseURL,\n    maxRetries,\n    timeout = 600000, // 10 minutes\n    httpAgent,\n    fetch: overridenFetch,\n  }: {\n    baseURL: string;\n    maxRetries?: number | undefined;\n    timeout: number | undefined;\n    httpAgent: Agent | undefined;\n    fetch: Fetch | undefined;\n  }) {\n    this.baseURL = baseURL;\n    this.maxRetries = validatePositiveInteger('maxRetries', maxRetries ?? MAX_RETRIES);\n    this.timeout = validatePositiveInteger('timeout', timeout);\n    this.httpAgent = httpAgent;\n\n    this.fetch = overridenFetch ?? fetch;\n  }\n\n  protected authHeaders(opts: FinalRequestOptions): Headers {\n    return {};\n  }\n\n  /**\n   * Override this to add your own default headers, for example:\n   *\n   *  {\n   *    ...super.defaultHeaders(),\n   *    Authorization: 'Bearer 123',\n   *  }\n   */\n  protected defaultHeaders(opts: FinalRequestOptions): Headers {\n    return {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'User-Agent': this.getUserAgent(),\n      ...getPlatformHeaders(),\n      ...this.authHeaders(opts),\n    };\n  }\n\n  protected abstract defaultQuery(): DefaultQuery | undefined;\n\n  /**\n   * Override this to add your own headers validation:\n   */\n  protected validateHeaders(headers: Headers, customHeaders: Headers) {}\n\n  protected defaultIdempotencyKey(): string {\n    return `stainless-node-retry-${uuid4()}`;\n  }\n\n  get<Req extends {}, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('get', path, opts);\n  }\n\n  post<Req extends {}, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('post', path, opts);\n  }\n\n  patch<Req extends {}, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('patch', path, opts);\n  }\n\n  put<Req extends {}, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('put', path, opts);\n  }\n\n  delete<Req extends {}, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('delete', path, opts);\n  }\n\n  private methodRequest<Req extends {}, Rsp>(\n    method: HTTPMethod,\n    path: string,\n    opts?: PromiseOrValue<RequestOptions<Req>>,\n  ): APIPromise<Rsp> {\n    return this.request(Promise.resolve(opts).then((opts) => ({ method, path, ...opts })));\n  }\n\n  getAPIList<Item, PageClass extends AbstractPage<Item> = AbstractPage<Item>>(\n    path: string,\n    Page: new (...args: any[]) => PageClass,\n    opts?: RequestOptions<any>,\n  ): PagePromise<PageClass, Item> {\n    return this.requestAPIList(Page, { method: 'get', path, ...opts });\n  }\n\n  private calculateContentLength(body: unknown): string | null {\n    if (typeof body === 'string') {\n      if (typeof Buffer !== 'undefined') {\n        return Buffer.byteLength(body, 'utf8').toString();\n      }\n\n      if (typeof TextEncoder !== 'undefined') {\n        const encoder = new TextEncoder();\n        const encoded = encoder.encode(body);\n        return encoded.length.toString();\n      }\n    }\n\n    return null;\n  }\n\n  buildRequest<Req extends {}>(\n    options: FinalRequestOptions<Req>,\n  ): { req: RequestInit; url: string; timeout: number } {\n    const { method, path, query, headers: headers = {} } = options;\n\n    const body =\n      isMultipartBody(options.body) ? options.body.body\n      : options.body ? JSON.stringify(options.body, null, 2)\n      : null;\n    const contentLength = this.calculateContentLength(body);\n\n    const url = this.buildURL(path!, query);\n    if ('timeout' in options) validatePositiveInteger('timeout', options.timeout);\n    const timeout = options.timeout ?? this.timeout;\n    const httpAgent = options.httpAgent ?? this.httpAgent ?? getDefaultAgent(url);\n    const minAgentTimeout = timeout + 1000;\n    if (\n      typeof (httpAgent as any)?.options?.timeout === 'number' &&\n      minAgentTimeout > ((httpAgent as any).options.timeout ?? 0)\n    ) {\n      // Allow any given request to bump our agent active socket timeout.\n      // This may seem strange, but leaking active sockets should be rare and not particularly problematic,\n      // and without mutating agent we would need to create more of them.\n      // This tradeoff optimizes for performance.\n      (httpAgent as any).options.timeout = minAgentTimeout;\n    }\n\n    if (this.idempotencyHeader && method !== 'get') {\n      if (!options.idempotencyKey) options.idempotencyKey = this.defaultIdempotencyKey();\n      headers[this.idempotencyHeader] = options.idempotencyKey;\n    }\n\n    const reqHeaders: Record<string, string> = {\n      ...(contentLength && { 'Content-Length': contentLength }),\n      ...this.defaultHeaders(options),\n      ...headers,\n    };\n    // let builtin fetch set the Content-Type for multipart bodies\n    if (isMultipartBody(options.body) && !fetchIsPolyfilled) {\n      delete reqHeaders['Content-Type'];\n    }\n\n    // Strip any headers being explicitly omitted with null\n    Object.keys(reqHeaders).forEach((key) => reqHeaders[key] === null && delete reqHeaders[key]);\n\n    const req: RequestInit = {\n      method,\n      ...(body && { body: body as any }),\n      headers: reqHeaders,\n      ...(httpAgent && { agent: httpAgent }),\n      // @ts-ignore node-fetch uses a custom AbortSignal type that is\n      // not compatible with standard web types\n      signal: options.signal ?? null,\n    };\n\n    this.validateHeaders(reqHeaders, headers);\n\n    return { req, url, timeout };\n  }\n\n  /**\n   * Used as a callback for mutating the given `RequestInit` object.\n   *\n   * This is useful for cases where you want to add certain headers based off of\n   * the request properties, e.g. `method` or `url`.\n   */\n  protected async prepareRequest(\n    request: RequestInit,\n    { url, options }: { url: string; options: FinalRequestOptions },\n  ): Promise<void> {}\n\n  protected parseHeaders(headers: HeadersInit | null | undefined): Record<string, string> {\n    return (\n      !headers ? {}\n      : Symbol.iterator in headers ? Object.fromEntries(Array.from(headers).map((header) => [...header]))\n      : { ...headers }\n    );\n  }\n\n  protected makeStatusError(\n    status: number | undefined,\n    error: Object | undefined,\n    message: string | undefined,\n    headers: Headers | undefined,\n  ) {\n    return APIError.generate(status, error, message, headers);\n  }\n\n  request<Req extends {}, Rsp>(\n    options: PromiseOrValue<FinalRequestOptions<Req>>,\n    remainingRetries: number | null = null,\n  ): APIPromise<Rsp> {\n    return new APIPromise(this.makeRequest(options, remainingRetries));\n  }\n\n  private async makeRequest(\n    optionsInput: PromiseOrValue<FinalRequestOptions>,\n    retriesRemaining: number | null,\n  ): Promise<APIResponseProps> {\n    const options = await optionsInput;\n    if (retriesRemaining == null) {\n      retriesRemaining = options.maxRetries ?? this.maxRetries;\n    }\n\n    const { req, url, timeout } = this.buildRequest(options);\n\n    await this.prepareRequest(req, { url, options });\n\n    debug('request', url, options, req.headers);\n\n    if (options.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n\n    const controller = new AbortController();\n    const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);\n\n    if (response instanceof Error) {\n      if (options.signal?.aborted) {\n        throw new APIUserAbortError();\n      }\n      if (retriesRemaining) {\n        return this.retryRequest(options, retriesRemaining);\n      }\n      if (response.name === 'AbortError') {\n        throw new APIConnectionTimeoutError();\n      }\n      throw new APIConnectionError({ cause: response });\n    }\n\n    const responseHeaders = createResponseHeaders(response.headers);\n\n    if (!response.ok) {\n      if (retriesRemaining && this.shouldRetry(response)) {\n        return this.retryRequest(options, retriesRemaining, responseHeaders);\n      }\n\n      const errText = await response.text().catch(() => 'Unknown');\n      const errJSON = safeJSON(errText);\n      const errMessage = errJSON ? undefined : errText;\n\n      debug('response', response.status, url, responseHeaders, errMessage);\n\n      const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);\n      throw err;\n    }\n\n    return { response, options, controller };\n  }\n\n  requestAPIList<Item = unknown, PageClass extends AbstractPage<Item> = AbstractPage<Item>>(\n    Page: new (...args: ConstructorParameters<typeof AbstractPage>) => PageClass,\n    options: FinalRequestOptions,\n  ): PagePromise<PageClass, Item> {\n    const request = this.makeRequest(options, null);\n    return new PagePromise<PageClass, Item>(this, request, Page);\n  }\n\n  buildURL<Req>(path: string, query: Req | undefined): string {\n    const url =\n      isAbsoluteURL(path) ?\n        new URL(path)\n      : new URL(this.baseURL + (this.baseURL.endsWith('/') && path.startsWith('/') ? path.slice(1) : path));\n\n    const defaultQuery = this.defaultQuery();\n    if (!isEmptyObj(defaultQuery)) {\n      query = { ...defaultQuery, ...query } as Req;\n    }\n\n    if (query) {\n      url.search = this.stringifyQuery(query);\n    }\n\n    return url.toString();\n  }\n\n  protected stringifyQuery(query: Record<string, unknown>): string {\n    return Object.entries(query)\n      .filter(([_, value]) => typeof value !== 'undefined')\n      .map(([key, value]) => {\n        if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n          return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n        }\n        if (value === null) {\n          return `${encodeURIComponent(key)}=`;\n        }\n        throw new Error(\n          `Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`,\n        );\n      })\n      .join('&');\n  }\n\n  async fetchWithTimeout(\n    url: RequestInfo,\n    init: RequestInit | undefined,\n    ms: number,\n    controller: AbortController,\n  ): Promise<Response> {\n    const { signal, ...options } = init || {};\n    if (signal) signal.addEventListener('abort', () => controller.abort());\n\n    const timeout = setTimeout(() => controller.abort(), ms);\n\n    return this.getRequestClient()\n      .fetch(url, { signal: controller.signal as any, ...options })\n      .finally(() => {\n        clearTimeout(timeout);\n      });\n  }\n\n  protected getRequestClient(): RequestClient {\n    return { fetch: this.fetch };\n  }\n\n  private shouldRetry(response: Response): boolean {\n    // Note this is not a standard header.\n    const shouldRetryHeader = response.headers.get('x-should-retry');\n\n    // If the server explicitly says whether or not to retry, obey.\n    if (shouldRetryHeader === 'true') return true;\n    if (shouldRetryHeader === 'false') return false;\n\n    // Retry on lock timeouts.\n    if (response.status === 409) return true;\n\n    // Retry on rate limits.\n    if (response.status === 429) return true;\n\n    // Retry internal errors.\n    if (response.status >= 500) return true;\n\n    return false;\n  }\n\n  private async retryRequest(\n    options: FinalRequestOptions,\n    retriesRemaining: number,\n    responseHeaders?: Headers | undefined,\n  ): Promise<APIResponseProps> {\n    retriesRemaining -= 1;\n\n    // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n    //\n    // TODO: we may want to handle the case where the header is using the http-date syntax: \"Retry-After: <http-date>\".\n    // See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After#syntax for details.\n    const retryAfter = parseInt(responseHeaders?.['retry-after'] || '');\n\n    const maxRetries = options.maxRetries ?? this.maxRetries;\n    const timeout = this.calculateRetryTimeoutSeconds(retriesRemaining, retryAfter, maxRetries) * 1000;\n    await sleep(timeout);\n\n    return this.makeRequest(options, retriesRemaining);\n  }\n\n  private calculateRetryTimeoutSeconds(\n    retriesRemaining: number,\n    retryAfter: number,\n    maxRetries: number,\n  ): number {\n    const initialRetryDelay = 0.5;\n    const maxRetryDelay = 2;\n\n    // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n    // just do what it says.\n    if (Number.isInteger(retryAfter) && retryAfter <= 60) {\n      return retryAfter;\n    }\n\n    const numRetries = maxRetries - retriesRemaining;\n\n    // Apply exponential backoff, but not more than the max.\n    const sleepSeconds = Math.min(initialRetryDelay * Math.pow(numRetries - 1, 2), maxRetryDelay);\n\n    // Apply some jitter, plus-or-minus half a second.\n    const jitter = Math.random() - 0.5;\n\n    return sleepSeconds + jitter;\n  }\n\n  private getUserAgent(): string {\n    return `${this.constructor.name}/JS ${VERSION}`;\n  }\n}\n\nexport class APIResource {\n  protected client: APIClient;\n  constructor(client: APIClient) {\n    this.client = client;\n\n    this.get = client.get.bind(client);\n    this.post = client.post.bind(client);\n    this.patch = client.patch.bind(client);\n    this.put = client.put.bind(client);\n    this.delete = client.delete.bind(client);\n    this.getAPIList = client.getAPIList.bind(client);\n  }\n\n  protected get: APIClient['get'];\n  protected post: APIClient['post'];\n  protected patch: APIClient['patch'];\n  protected put: APIClient['put'];\n  protected delete: APIClient['delete'];\n  protected getAPIList: APIClient['getAPIList'];\n}\n\nexport type PageInfo = { url: URL } | { params: Record<string, unknown> | null };\n\nexport abstract class AbstractPage<Item> implements AsyncIterable<Item> {\n  #client: APIClient;\n  protected options: FinalRequestOptions;\n\n  protected response: Response;\n  protected body: unknown;\n\n  constructor(client: APIClient, response: Response, body: unknown, options: FinalRequestOptions) {\n    this.#client = client;\n    this.options = options;\n    this.response = response;\n    this.body = body;\n  }\n\n  /**\n   * @deprecated Use nextPageInfo instead\n   */\n  abstract nextPageParams(): Partial<Record<string, unknown>> | null;\n  abstract nextPageInfo(): PageInfo | null;\n\n  abstract getPaginatedItems(): Item[];\n\n  hasNextPage(): boolean {\n    const items = this.getPaginatedItems();\n    if (!items.length) return false;\n    return this.nextPageInfo() != null;\n  }\n\n  async getNextPage(): Promise<this> {\n    const nextInfo = this.nextPageInfo();\n    if (!nextInfo) {\n      throw new Error(\n        'No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.',\n      );\n    }\n    const nextOptions = { ...this.options };\n    if ('params' in nextInfo) {\n      nextOptions.query = { ...nextOptions.query, ...nextInfo.params };\n    } else if ('url' in nextInfo) {\n      const params = [...Object.entries(nextOptions.query || {}), ...nextInfo.url.searchParams.entries()];\n      for (const [key, value] of params) {\n        nextInfo.url.searchParams.set(key, value);\n      }\n      nextOptions.query = undefined;\n      nextOptions.path = nextInfo.url.toString();\n    }\n    return await this.#client.requestAPIList(this.constructor as any, nextOptions);\n  }\n\n  async *iterPages() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let page: AbstractPage<Item> = this;\n    yield page;\n    while (page.hasNextPage()) {\n      page = await page.getNextPage();\n      yield page;\n    }\n  }\n\n  async *[Symbol.asyncIterator]() {\n    for await (const page of this.iterPages()) {\n      for (const item of page.getPaginatedItems()) {\n        yield item;\n      }\n    }\n  }\n}\n\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */\nexport class PagePromise<\n    PageClass extends AbstractPage<Item>,\n    Item = ReturnType<PageClass['getPaginatedItems']>[number],\n  >\n  extends APIPromise<PageClass>\n  implements AsyncIterable<Item>\n{\n  constructor(\n    client: APIClient,\n    request: Promise<APIResponseProps>,\n    Page: new (...args: ConstructorParameters<typeof AbstractPage>) => PageClass,\n  ) {\n    super(\n      request,\n      async (props) => new Page(client, props.response, await defaultParseResponse(props), props.options),\n    );\n  }\n\n  /**\n   * Allow auto-paginating iteration on an unawaited list call, eg:\n   *\n   *    for await (const item of client.items.list()) {\n   *      console.log(item)\n   *    }\n   */\n  async *[Symbol.asyncIterator]() {\n    const page = await this;\n    for await (const item of page) {\n      yield item;\n    }\n  }\n}\n\nexport const createResponseHeaders = (\n  headers: Awaited<ReturnType<Fetch>>['headers'],\n): Record<string, string> => {\n  return new Proxy(\n    Object.fromEntries(\n      // @ts-ignore\n      headers.entries(),\n    ),\n    {\n      get(target, name) {\n        const key = name.toString();\n        return target[key.toLowerCase()] || target[key];\n      },\n    },\n  );\n};\n\ntype HTTPMethod = 'get' | 'post' | 'put' | 'patch' | 'delete';\n\nexport type RequestClient = { fetch: Fetch };\nexport type Headers = Record<string, string | null | undefined>;\nexport type DefaultQuery = Record<string, string | undefined>;\nexport type KeysEnum<T> = { [P in keyof Required<T>]: true };\n\nexport type RequestOptions<Req extends {} = Record<string, unknown> | Readable> = {\n  method?: HTTPMethod;\n  path?: string;\n  query?: Req | undefined;\n  body?: Req | undefined;\n  headers?: Headers | undefined;\n\n  maxRetries?: number;\n  stream?: boolean | undefined;\n  timeout?: number;\n  httpAgent?: Agent;\n  signal?: AbortSignal | undefined | null;\n  idempotencyKey?: string;\n};\n\n// This is required so that we can determine if a given object matches the RequestOptions\n// type at runtime. While this requires duplication, it is enforced by the TypeScript\n// compiler such that any missing / extraneous keys will cause an error.\nconst requestOptionsKeys: KeysEnum<RequestOptions> = {\n  method: true,\n  path: true,\n  query: true,\n  body: true,\n  headers: true,\n\n  maxRetries: true,\n  stream: true,\n  timeout: true,\n  httpAgent: true,\n  signal: true,\n  idempotencyKey: true,\n};\n\nexport const isRequestOptions = (obj: unknown): obj is RequestOptions => {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    !isEmptyObj(obj) &&\n    Object.keys(obj).every((k) => hasOwn(requestOptionsKeys, k))\n  );\n};\n\nexport type FinalRequestOptions<Req extends {} = Record<string, unknown> | Readable> = RequestOptions<Req> & {\n  method: HTTPMethod;\n  path: string;\n};\n\ndeclare const Deno: any;\ndeclare const EdgeRuntime: any;\ntype Arch = 'x32' | 'x64' | 'arm' | 'arm64' | `other:${string}` | 'unknown';\ntype PlatformName =\n  | 'MacOS'\n  | 'Linux'\n  | 'Windows'\n  | 'FreeBSD'\n  | 'OpenBSD'\n  | 'iOS'\n  | 'Android'\n  | `Other:${string}`\n  | 'Unknown';\ntype Browser = 'ie' | 'edge' | 'chrome' | 'firefox' | 'safari';\ntype PlatformProperties = {\n  'X-Stainless-Lang': 'js';\n  'X-Stainless-Package-Version': string;\n  'X-Stainless-OS': PlatformName;\n  'X-Stainless-Arch': Arch;\n  'X-Stainless-Runtime': 'node' | 'deno' | 'edge' | `browser:${Browser}` | 'unknown';\n  'X-Stainless-Runtime-Version': string;\n};\nconst getPlatformProperties = (): PlatformProperties => {\n  if (typeof Deno !== 'undefined' && Deno.build != null) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': normalizePlatform(Deno.build.os),\n      'X-Stainless-Arch': normalizeArch(Deno.build.arch),\n      'X-Stainless-Runtime': 'deno',\n      'X-Stainless-Runtime-Version': Deno.version,\n    };\n  }\n  if (typeof EdgeRuntime !== 'undefined') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': `other:${EdgeRuntime}`,\n      'X-Stainless-Runtime': 'edge',\n      'X-Stainless-Runtime-Version': process.version,\n    };\n  }\n  // Check if Node.js\n  if (Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': normalizePlatform(process.platform),\n      'X-Stainless-Arch': normalizeArch(process.arch),\n      'X-Stainless-Runtime': 'node',\n      'X-Stainless-Runtime-Version': process.version,\n    };\n  }\n\n  const browserInfo = getBrowserInfo();\n  if (browserInfo) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': 'unknown',\n      'X-Stainless-Runtime': `browser:${browserInfo.browser}`,\n      'X-Stainless-Runtime-Version': browserInfo.version,\n    };\n  }\n\n  // TODO add support for Cloudflare workers, etc.\n  return {\n    'X-Stainless-Lang': 'js',\n    'X-Stainless-Package-Version': VERSION,\n    'X-Stainless-OS': 'Unknown',\n    'X-Stainless-Arch': 'unknown',\n    'X-Stainless-Runtime': 'unknown',\n    'X-Stainless-Runtime-Version': 'unknown',\n  };\n};\n\ntype BrowserInfo = {\n  browser: Browser;\n  version: string;\n};\n\ndeclare const navigator: { userAgent: string } | undefined;\n\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo(): BrowserInfo | null {\n  if (typeof navigator === 'undefined' || !navigator) {\n    return null;\n  }\n\n  // NOTE: The order matters here!\n  const browserPatterns = [\n    { key: 'edge' as const, pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'ie' as const, pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'ie' as const, pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'chrome' as const, pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'firefox' as const, pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'safari' as const, pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/ },\n  ];\n\n  // Find the FIRST matching browser\n  for (const { key, pattern } of browserPatterns) {\n    const match = pattern.exec(navigator.userAgent);\n    if (match) {\n      const major = match[1] || 0;\n      const minor = match[2] || 0;\n      const patch = match[3] || 0;\n\n      return { browser: key, version: `${major}.${minor}.${patch}` };\n    }\n  }\n\n  return null;\n}\n\nconst normalizeArch = (arch: string): Arch => {\n  // Node docs:\n  // - https://nodejs.org/api/process.html#processarch\n  // Deno docs:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  if (arch === 'x32') return 'x32';\n  if (arch === 'x86_64' || arch === 'x64') return 'x64';\n  if (arch === 'arm') return 'arm';\n  if (arch === 'aarch64' || arch === 'arm64') return 'arm64';\n  if (arch) return `other:${arch}`;\n  return 'unknown';\n};\n\nconst normalizePlatform = (platform: string): PlatformName => {\n  // Node platforms:\n  // - https://nodejs.org/api/process.html#processplatform\n  // Deno platforms:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  // - https://github.com/denoland/deno/issues/14799\n\n  platform = platform.toLowerCase();\n\n  // NOTE: this iOS check is untested and may not work\n  // Node does not work natively on IOS, there is a fork at\n  // https://github.com/nodejs-mobile/nodejs-mobile\n  // however it is unknown at the time of writing how to detect if it is running\n  if (platform.includes('ios')) return 'iOS';\n  if (platform === 'android') return 'Android';\n  if (platform === 'darwin') return 'MacOS';\n  if (platform === 'win32') return 'Windows';\n  if (platform === 'freebsd') return 'FreeBSD';\n  if (platform === 'openbsd') return 'OpenBSD';\n  if (platform === 'linux') return 'Linux';\n  if (platform) return `Other:${platform}`;\n  return 'Unknown';\n};\n\nlet _platformHeaders: PlatformProperties;\nconst getPlatformHeaders = () => {\n  return (_platformHeaders ??= getPlatformProperties());\n};\n\nexport const safeJSON = (text: string) => {\n  try {\n    return JSON.parse(text);\n  } catch (err) {\n    return undefined;\n  }\n};\n\n// https://stackoverflow.com/a/19709846\nconst startsWithSchemeRegexp = new RegExp('^(?:[a-z]+:)?//', 'i');\nconst isAbsoluteURL = (url: string): boolean => {\n  return startsWithSchemeRegexp.test(url);\n};\n\nconst sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst validatePositiveInteger = (name: string, n: unknown): number => {\n  if (typeof n !== 'number' || !Number.isInteger(n)) {\n    throw new Error(`${name} must be an integer`);\n  }\n  if (n < 0) {\n    throw new Error(`${name} must be a positive integer`);\n  }\n  return n;\n};\n\nexport const castToError = (err: any): Error => {\n  if (err instanceof Error) return err;\n  return new Error(err);\n};\n\nexport const ensurePresent = <T>(value: T | null | undefined): T => {\n  if (value == null) throw new Error(`Expected a value to be given but received ${value} instead.`);\n  return value;\n};\n\n/**\n * Read an environment variable.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */\nexport const readEnv = (env: string): string | undefined => {\n  if (typeof process !== 'undefined') {\n    return process.env?.[env] ?? undefined;\n  }\n  if (typeof Deno !== 'undefined') {\n    return Deno.env?.get?.(env);\n  }\n  return undefined;\n};\n\nexport const coerceInteger = (value: unknown): number => {\n  if (typeof value === 'number') return Math.round(value);\n  if (typeof value === 'string') return parseInt(value, 10);\n\n  throw new Error(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\n\nexport const coerceFloat = (value: unknown): number => {\n  if (typeof value === 'number') return value;\n  if (typeof value === 'string') return parseFloat(value);\n\n  throw new Error(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\n\nexport const coerceBoolean = (value: unknown): boolean => {\n  if (typeof value === 'boolean') return value;\n  if (typeof value === 'string') return value === 'true';\n  return Boolean(value);\n};\n\nexport const maybeCoerceInteger = (value: unknown): number | undefined => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceInteger(value);\n};\n\nexport const maybeCoerceFloat = (value: unknown): number | undefined => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceFloat(value);\n};\n\nexport const maybeCoerceBoolean = (value: unknown): boolean | undefined => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceBoolean(value);\n};\n\n// https://stackoverflow.com/a/34491287\nexport function isEmptyObj(obj: Object | null | undefined): boolean {\n  if (!obj) return true;\n  for (const _k in obj) return false;\n  return true;\n}\n\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nexport function hasOwn(obj: Object, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function debug(action: string, ...args: any[]) {\n  if (typeof process !== 'undefined' && process.env['DEBUG'] === 'true') {\n    console.log(`OpenAI:DEBUG:${action}`, ...args);\n  }\n}\n\n/**\n * https://stackoverflow.com/a/2117523\n */\nconst uuid4 = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n};\n\nexport const isRunningInBrowser = () => {\n  return (\n    // @ts-ignore\n    typeof window !== 'undefined' &&\n    // @ts-ignore\n    typeof window.document !== 'undefined' &&\n    // @ts-ignore\n    typeof navigator !== 'undefined'\n  );\n};\n\nexport interface HeadersProtocol {\n  get: (header: string) => string | null | undefined;\n}\nexport type HeadersLike = Record<string, string | string[] | undefined> | HeadersProtocol;\n\nexport const isHeadersProtocol = (headers: any): headers is HeadersProtocol => {\n  return typeof headers?.get === 'function';\n};\n\nexport const getHeader = (headers: HeadersLike, key: string): string | null | undefined => {\n  const lowerKey = key.toLowerCase();\n  if (isHeadersProtocol(headers)) return headers.get(key) || headers.get(lowerKey);\n  const value = headers[key] || headers[lowerKey];\n  if (Array.isArray(value)) {\n    if (value.length <= 1) return value[0];\n    console.warn(`Received ${value.length} entries for the ${key} header, using the first entry.`);\n    return value[0];\n  }\n  return value;\n};\n\n/**\n * Encodes a string to Base64 format.\n */\nexport const toBase64 = (str: string | null | undefined): string => {\n  if (!str) return '';\n  if (typeof Buffer !== 'undefined') {\n    return Buffer.from(str).toString('base64');\n  }\n\n  if (typeof btoa !== 'undefined') {\n    return btoa(str);\n  }\n\n  throw new Error('Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined');\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}