{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LogManager = void 0;\nconst protocol_js_1 = require(\"../../../protocol/protocol.js\");\nconst logHelper_js_1 = require(\"./logHelper.js\");\n/** Converts CDP StackTrace object to BiDi StackTrace object. */\nfunction getBidiStackTrace(cdpStackTrace) {\n  const stackFrames = cdpStackTrace?.callFrames.map(callFrame => {\n    return {\n      columnNumber: callFrame.columnNumber,\n      functionName: callFrame.functionName,\n      lineNumber: callFrame.lineNumber,\n      url: callFrame.url\n    };\n  });\n  return stackFrames ? {\n    callFrames: stackFrames\n  } : undefined;\n}\nfunction getLogLevel(consoleApiType) {\n  if (['assert', 'error'].includes(consoleApiType)) {\n    return 'error';\n  }\n  if (['debug', 'trace'].includes(consoleApiType)) {\n    return 'debug';\n  }\n  if (['warn', 'warning'].includes(consoleApiType)) {\n    return 'warn';\n  }\n  return 'info';\n}\nclass LogManager {\n  #eventManager;\n  #realmStorage;\n  #cdpTarget;\n  constructor(cdpTarget, realmStorage, eventManager) {\n    this.#cdpTarget = cdpTarget;\n    this.#realmStorage = realmStorage;\n    this.#eventManager = eventManager;\n  }\n  static create(cdpTarget, realmStorage, eventManager) {\n    const logManager = new LogManager(cdpTarget, realmStorage, eventManager);\n    logManager.#initialize();\n    return logManager;\n  }\n  #initialize() {\n    this.#initializeLogEntryAddedEventListener();\n  }\n  #initializeLogEntryAddedEventListener() {\n    this.#cdpTarget.cdpClient.on('Runtime.consoleAPICalled', params => {\n      // Try to find realm by `cdpSessionId` and `executionContextId`,\n      // if provided.\n      const realm = this.#realmStorage.findRealm({\n        cdpSessionId: this.#cdpTarget.cdpSessionId,\n        executionContextId: params.executionContextId\n      });\n      const argsPromise = realm === undefined ? Promise.resolve(params.args) :\n      // Properly serialize arguments if possible.\n      Promise.all(params.args.map(arg => {\n        return realm.serializeCdpObject(arg, 'none');\n      }));\n      this.#eventManager.registerPromiseEvent(argsPromise.then(args => ({\n        method: protocol_js_1.Log.EventNames.LogEntryAddedEvent,\n        params: {\n          level: getLogLevel(params.type),\n          source: {\n            realm: realm?.realmId ?? 'UNKNOWN',\n            context: realm?.browsingContextId ?? 'UNKNOWN'\n          },\n          text: (0, logHelper_js_1.getRemoteValuesText)(args, true),\n          timestamp: Math.round(params.timestamp),\n          stackTrace: getBidiStackTrace(params.stackTrace),\n          type: 'console',\n          // Console method is `warn`, not `warning`.\n          method: params.type === 'warning' ? 'warn' : params.type,\n          args\n        }\n      })), realm?.browsingContextId ?? 'UNKNOWN', protocol_js_1.Log.EventNames.LogEntryAddedEvent);\n    });\n    this.#cdpTarget.cdpClient.on('Runtime.exceptionThrown', params => {\n      // Try to find realm by `cdpSessionId` and `executionContextId`,\n      // if provided.\n      const realm = this.#realmStorage.findRealm({\n        cdpSessionId: this.#cdpTarget.cdpSessionId,\n        executionContextId: params.exceptionDetails.executionContextId\n      });\n      // Try all the best to get the exception text.\n      const textPromise = (async () => {\n        if (!params.exceptionDetails.exception) {\n          return params.exceptionDetails.text;\n        }\n        if (realm === undefined) {\n          return JSON.stringify(params.exceptionDetails.exception);\n        }\n        return realm.stringifyObject(params.exceptionDetails.exception);\n      })();\n      this.#eventManager.registerPromiseEvent(textPromise.then(text => ({\n        method: protocol_js_1.Log.EventNames.LogEntryAddedEvent,\n        params: {\n          level: 'error',\n          source: {\n            realm: realm?.realmId ?? 'UNKNOWN',\n            context: realm?.browsingContextId ?? 'UNKNOWN'\n          },\n          text,\n          timestamp: Math.round(params.timestamp),\n          stackTrace: getBidiStackTrace(params.exceptionDetails.stackTrace),\n          type: 'javascript'\n        }\n      })), realm?.browsingContextId ?? 'UNKNOWN', protocol_js_1.Log.EventNames.LogEntryAddedEvent);\n    });\n  }\n}\nexports.LogManager = LogManager;","map":{"version":3,"names":["protocol_js_1","require","logHelper_js_1","getBidiStackTrace","cdpStackTrace","stackFrames","callFrames","map","callFrame","columnNumber","functionName","lineNumber","url","undefined","getLogLevel","consoleApiType","includes","LogManager","eventManager","realmStorage","cdpTarget","constructor","create","logManager","initialize","#initialize","initializeLogEntryAddedEventListener","#initializeLogEntryAddedEventListener","cdpClient","on","params","realm","findRealm","cdpSessionId","executionContextId","argsPromise","Promise","resolve","args","all","arg","serializeCdpObject","registerPromiseEvent","then","method","Log","EventNames","LogEntryAddedEvent","level","type","source","realmId","context","browsingContextId","text","getRemoteValuesText","timestamp","Math","round","stackTrace","exceptionDetails","textPromise","exception","JSON","stringify","stringifyObject","exports"],"sources":["../../../../../src/bidiMapper/domains/log/logManager.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}