{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseBigintDef = void 0;\nconst errorMessages_1 = require(\"../errorMessages\");\nfunction parseBigintDef(def, refs) {\n  const res = {\n    type: \"integer\",\n    format: \"int64\"\n  };\n  if (!def.checks) return res;\n  for (const check of def.checks) {\n    switch (check.kind) {\n      case \"min\":\n        if (refs.target === \"jsonSchema7\") {\n          if (check.inclusive) {\n            (0, errorMessages_1.setResponseValueAndErrors)(res, \"minimum\", check.value, check.message, refs);\n          } else {\n            (0, errorMessages_1.setResponseValueAndErrors)(res, \"exclusiveMinimum\", check.value, check.message, refs);\n          }\n        } else {\n          if (!check.inclusive) {\n            res.exclusiveMinimum = true;\n          }\n          (0, errorMessages_1.setResponseValueAndErrors)(res, \"minimum\", check.value, check.message, refs);\n        }\n        break;\n      case \"max\":\n        if (refs.target === \"jsonSchema7\") {\n          if (check.inclusive) {\n            (0, errorMessages_1.setResponseValueAndErrors)(res, \"maximum\", check.value, check.message, refs);\n          } else {\n            (0, errorMessages_1.setResponseValueAndErrors)(res, \"exclusiveMaximum\", check.value, check.message, refs);\n          }\n        } else {\n          if (!check.inclusive) {\n            res.exclusiveMaximum = true;\n          }\n          (0, errorMessages_1.setResponseValueAndErrors)(res, \"maximum\", check.value, check.message, refs);\n        }\n        break;\n      case \"multipleOf\":\n        (0, errorMessages_1.setResponseValueAndErrors)(res, \"multipleOf\", check.value, check.message, refs);\n        break;\n    }\n  }\n  return res;\n}\nexports.parseBigintDef = parseBigintDef;","map":{"version":3,"names":["Object","defineProperty","exports","value","parseBigintDef","errorMessages_1","require","def","refs","res","type","format","checks","check","kind","target","inclusive","setResponseValueAndErrors","message","exclusiveMinimum","exclusiveMaximum"],"sources":["/Users/mayamagavi/instalily/case-study/node_modules/zod-to-json-schema/src/parsers/bigint.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseBigintDef = void 0;\nconst errorMessages_1 = require(\"../errorMessages\");\nfunction parseBigintDef(def, refs) {\n    const res = {\n        type: \"integer\",\n        format: \"int64\",\n    };\n    if (!def.checks)\n        return res;\n    for (const check of def.checks) {\n        switch (check.kind) {\n            case \"min\":\n                if (refs.target === \"jsonSchema7\") {\n                    if (check.inclusive) {\n                        (0, errorMessages_1.setResponseValueAndErrors)(res, \"minimum\", check.value, check.message, refs);\n                    }\n                    else {\n                        (0, errorMessages_1.setResponseValueAndErrors)(res, \"exclusiveMinimum\", check.value, check.message, refs);\n                    }\n                }\n                else {\n                    if (!check.inclusive) {\n                        res.exclusiveMinimum = true;\n                    }\n                    (0, errorMessages_1.setResponseValueAndErrors)(res, \"minimum\", check.value, check.message, refs);\n                }\n                break;\n            case \"max\":\n                if (refs.target === \"jsonSchema7\") {\n                    if (check.inclusive) {\n                        (0, errorMessages_1.setResponseValueAndErrors)(res, \"maximum\", check.value, check.message, refs);\n                    }\n                    else {\n                        (0, errorMessages_1.setResponseValueAndErrors)(res, \"exclusiveMaximum\", check.value, check.message, refs);\n                    }\n                }\n                else {\n                    if (!check.inclusive) {\n                        res.exclusiveMaximum = true;\n                    }\n                    (0, errorMessages_1.setResponseValueAndErrors)(res, \"maximum\", check.value, check.message, refs);\n                }\n                break;\n            case \"multipleOf\":\n                (0, errorMessages_1.setResponseValueAndErrors)(res, \"multipleOf\", check.value, check.message, refs);\n                break;\n        }\n    }\n    return res;\n}\nexports.parseBigintDef = parseBigintDef;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,cAAc,GAAG,KAAK,CAAC;AAC/B,MAAMC,eAAe,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACnD,SAASF,cAAcA,CAACG,GAAG,EAAEC,IAAI,EAAE;EAC/B,MAAMC,GAAG,GAAG;IACRC,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE;EACZ,CAAC;EACD,IAAI,CAACJ,GAAG,CAACK,MAAM,EACX,OAAOH,GAAG;EACd,KAAK,MAAMI,KAAK,IAAIN,GAAG,CAACK,MAAM,EAAE;IAC5B,QAAQC,KAAK,CAACC,IAAI;MACd,KAAK,KAAK;QACN,IAAIN,IAAI,CAACO,MAAM,KAAK,aAAa,EAAE;UAC/B,IAAIF,KAAK,CAACG,SAAS,EAAE;YACjB,CAAC,CAAC,EAAEX,eAAe,CAACY,yBAAyB,EAAER,GAAG,EAAE,SAAS,EAAEI,KAAK,CAACV,KAAK,EAAEU,KAAK,CAACK,OAAO,EAAEV,IAAI,CAAC;UACpG,CAAC,MACI;YACD,CAAC,CAAC,EAAEH,eAAe,CAACY,yBAAyB,EAAER,GAAG,EAAE,kBAAkB,EAAEI,KAAK,CAACV,KAAK,EAAEU,KAAK,CAACK,OAAO,EAAEV,IAAI,CAAC;UAC7G;QACJ,CAAC,MACI;UACD,IAAI,CAACK,KAAK,CAACG,SAAS,EAAE;YAClBP,GAAG,CAACU,gBAAgB,GAAG,IAAI;UAC/B;UACA,CAAC,CAAC,EAAEd,eAAe,CAACY,yBAAyB,EAAER,GAAG,EAAE,SAAS,EAAEI,KAAK,CAACV,KAAK,EAAEU,KAAK,CAACK,OAAO,EAAEV,IAAI,CAAC;QACpG;QACA;MACJ,KAAK,KAAK;QACN,IAAIA,IAAI,CAACO,MAAM,KAAK,aAAa,EAAE;UAC/B,IAAIF,KAAK,CAACG,SAAS,EAAE;YACjB,CAAC,CAAC,EAAEX,eAAe,CAACY,yBAAyB,EAAER,GAAG,EAAE,SAAS,EAAEI,KAAK,CAACV,KAAK,EAAEU,KAAK,CAACK,OAAO,EAAEV,IAAI,CAAC;UACpG,CAAC,MACI;YACD,CAAC,CAAC,EAAEH,eAAe,CAACY,yBAAyB,EAAER,GAAG,EAAE,kBAAkB,EAAEI,KAAK,CAACV,KAAK,EAAEU,KAAK,CAACK,OAAO,EAAEV,IAAI,CAAC;UAC7G;QACJ,CAAC,MACI;UACD,IAAI,CAACK,KAAK,CAACG,SAAS,EAAE;YAClBP,GAAG,CAACW,gBAAgB,GAAG,IAAI;UAC/B;UACA,CAAC,CAAC,EAAEf,eAAe,CAACY,yBAAyB,EAAER,GAAG,EAAE,SAAS,EAAEI,KAAK,CAACV,KAAK,EAAEU,KAAK,CAACK,OAAO,EAAEV,IAAI,CAAC;QACpG;QACA;MACJ,KAAK,YAAY;QACb,CAAC,CAAC,EAAEH,eAAe,CAACY,yBAAyB,EAAER,GAAG,EAAE,YAAY,EAAEI,KAAK,CAACV,KAAK,EAAEU,KAAK,CAACK,OAAO,EAAEV,IAAI,CAAC;QACnG;IACR;EACJ;EACA,OAAOC,GAAG;AACd;AACAP,OAAO,CAACE,cAAc,GAAGA,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}