{"ast":null,"code":"let conversationHistory = [{\n  role: \"system\",\n  content: `You are an AI assistant helping a user on an appliance part website, PartSelect.com. \n    You will not answer any questions not about appliances and PartSelect.com. You keep your responses helpful, short and generic.\n    If you cannot find an answer you are confident in, you redirect the user to visit the product page.\n    `\n}];\nexport const getAIMessage = async userQuery => {\n  conversationHistory.push({\n    role: \"user\",\n    content: userQuery\n  });\n  try {\n    const completion = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": 'Bearer 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'\n      },\n      body: JSON.stringify({\n        model: \"gpt-4o-mini\",\n        messages: conversationHistory\n      })\n    });\n\n    // Check the response\n    if (!completion.ok) {\n      throw new Error(`API Error: ${completion.statusText}`);\n    }\n    const data = await completion.json();\n    if (data.choices && data.choices.length > 0) {\n      let get_response = data.choices[0].message.content;\n      console.log(get_response);\n      conversationHistory.push({\n        role: \"assistant\",\n        content: get_response\n      });\n      return get_response;\n    } else {\n      throw new Error(\"No choices in the response\");\n    }\n  } catch (error) {\n    return \"Sorry, something went wrong with the request. Please try again later.\";\n  }\n};","map":{"version":3,"names":["conversationHistory","role","content","getAIMessage","userQuery","push","completion","fetch","method","headers","body","JSON","stringify","model","messages","ok","Error","statusText","data","json","choices","length","get_response","message","console","log","error"],"sources":["/Users/mayamagavi/instalily/case-study/src/api/api.js"],"sourcesContent":["\nlet conversationHistory = [\n  { role: \"system\", content: `You are an AI assistant helping a user on an appliance part website, PartSelect.com. \n    You will not answer any questions not about appliances and PartSelect.com. You keep your responses helpful, short and generic.\n    If you cannot find an answer you are confident in, you redirect the user to visit the product page.\n    ` }\n];\n\nexport const getAIMessage = async (userQuery) => {\n\n  conversationHistory.push({ role: \"user\", content: userQuery });\n\n  try {\n    const completion = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": 'Bearer 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',\n      },\n      body: JSON.stringify({\n          model: \"gpt-4o-mini\",\n          messages: conversationHistory\n      })\n    });\n\n    // Check the response\n    if (!completion.ok) {\n      throw new Error(`API Error: ${completion.statusText}`);\n    }\n\n    const data = await completion.json();\n\n    if (data.choices && data.choices.length > 0) {\n      let get_response = data.choices[0].message.content;\n      console.log(get_response);\n      conversationHistory.push({ role: \"assistant\", content: get_response });\n      return get_response;\n    } else {\n      throw new Error(\"No choices in the response\");\n    }\n  }  catch (error) {\n    return \"Sorry, something went wrong with the request. Please try again later.\";\n  }\n\n};"],"mappings":"AACA,IAAIA,mBAAmB,GAAG,CACxB;EAAEC,IAAI,EAAE,QAAQ;EAAEC,OAAO,EAAG;AAC9B;AACA;AACA;AAAM,CAAC,CACN;AAED,OAAO,MAAMC,YAAY,GAAG,MAAOC,SAAS,IAAK;EAE/CJ,mBAAmB,CAACK,IAAI,CAAC;IAAEJ,IAAI,EAAE,MAAM;IAAEC,OAAO,EAAEE;EAAU,CAAC,CAAC;EAE9D,IAAI;IACF,MAAME,UAAU,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;MAC3EC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE;MACrB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBC,KAAK,EAAE,aAAa;QACpBC,QAAQ,EAAEd;MACd,CAAC;IACH,CAAC,CAAC;;IAEF;IACA,IAAI,CAACM,UAAU,CAACS,EAAE,EAAE;MAClB,MAAM,IAAIC,KAAK,CAAE,cAAaV,UAAU,CAACW,UAAW,EAAC,CAAC;IACxD;IAEA,MAAMC,IAAI,GAAG,MAAMZ,UAAU,CAACa,IAAI,CAAC,CAAC;IAEpC,IAAID,IAAI,CAACE,OAAO,IAAIF,IAAI,CAACE,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;MAC3C,IAAIC,YAAY,GAAGJ,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACG,OAAO,CAACrB,OAAO;MAClDsB,OAAO,CAACC,GAAG,CAACH,YAAY,CAAC;MACzBtB,mBAAmB,CAACK,IAAI,CAAC;QAAEJ,IAAI,EAAE,WAAW;QAAEC,OAAO,EAAEoB;MAAa,CAAC,CAAC;MACtE,OAAOA,YAAY;IACrB,CAAC,MAAM;MACL,MAAM,IAAIN,KAAK,CAAC,4BAA4B,CAAC;IAC/C;EACF,CAAC,CAAE,OAAOU,KAAK,EAAE;IACf,OAAO,uEAAuE;EAChF;AAEF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}