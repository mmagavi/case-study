{"ast":null,"code":"import { LLMChain } from \"../chains/llm_chain.js\";\nimport { SystemMessage } from \"../schema/index.js\";\nimport { getBufferString } from \"./base.js\";\nimport { BaseChatMemory } from \"./chat_memory.js\";\nimport { SUMMARY_PROMPT } from \"./prompt.js\";\n/**\n * Abstract class that provides a structure for storing and managing the\n * memory of a conversation. It includes methods for predicting a new\n * summary for the conversation given the existing messages and summary.\n */\nexport class BaseConversationSummaryMemory extends BaseChatMemory {\n  constructor(fields) {\n    const {\n      returnMessages,\n      inputKey,\n      outputKey,\n      chatHistory,\n      humanPrefix,\n      aiPrefix,\n      llm,\n      prompt,\n      summaryChatMessageClass\n    } = fields;\n    super({\n      returnMessages,\n      inputKey,\n      outputKey,\n      chatHistory\n    });\n    Object.defineProperty(this, \"memoryKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"history\"\n    });\n    Object.defineProperty(this, \"humanPrefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"Human\"\n    });\n    Object.defineProperty(this, \"aiPrefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"AI\"\n    });\n    Object.defineProperty(this, \"llm\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"prompt\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: SUMMARY_PROMPT\n    });\n    Object.defineProperty(this, \"summaryChatMessageClass\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: SystemMessage\n    });\n    this.memoryKey = fields?.memoryKey ?? this.memoryKey;\n    this.humanPrefix = humanPrefix ?? this.humanPrefix;\n    this.aiPrefix = aiPrefix ?? this.aiPrefix;\n    this.llm = llm;\n    this.prompt = prompt ?? this.prompt;\n    this.summaryChatMessageClass = summaryChatMessageClass ?? this.summaryChatMessageClass;\n  }\n  /**\n   * Predicts a new summary for the conversation given the existing messages\n   * and summary.\n   * @param messages Existing messages in the conversation.\n   * @param existingSummary Current summary of the conversation.\n   * @returns A promise that resolves to a new summary string.\n   */\n  async predictNewSummary(messages, existingSummary) {\n    const newLines = getBufferString(messages, this.humanPrefix, this.aiPrefix);\n    const chain = new LLMChain({\n      llm: this.llm,\n      prompt: this.prompt\n    });\n    return await chain.predict({\n      summary: existingSummary,\n      new_lines: newLines\n    });\n  }\n}\n/**\n * Class that provides a concrete implementation of the conversation\n * memory. It includes methods for loading memory variables, saving\n * context, and clearing the memory.\n */\nexport class ConversationSummaryMemory extends BaseConversationSummaryMemory {\n  constructor(fields) {\n    super(fields);\n    Object.defineProperty(this, \"buffer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"\"\n    });\n  }\n  get memoryKeys() {\n    return [this.memoryKey];\n  }\n  /**\n   * Loads the memory variables for the conversation memory.\n   * @returns A promise that resolves to an object containing the memory variables.\n   */\n  async loadMemoryVariables(_) {\n    if (this.returnMessages) {\n      const result = {\n        [this.memoryKey]: [new this.summaryChatMessageClass(this.buffer)]\n      };\n      return result;\n    }\n    const result = {\n      [this.memoryKey]: this.buffer\n    };\n    return result;\n  }\n  /**\n   * Saves the context of the conversation memory.\n   * @param inputValues Input values for the conversation.\n   * @param outputValues Output values from the conversation.\n   * @returns A promise that resolves when the context has been saved.\n   */\n  async saveContext(inputValues, outputValues) {\n    await super.saveContext(inputValues, outputValues);\n    const messages = await this.chatHistory.getMessages();\n    this.buffer = await this.predictNewSummary(messages.slice(-2), this.buffer);\n  }\n  /**\n   * Clears the conversation memory.\n   * @returns A promise that resolves when the memory has been cleared.\n   */\n  async clear() {\n    await super.clear();\n    this.buffer = \"\";\n  }\n}","map":{"version":3,"names":["LLMChain","SystemMessage","getBufferString","BaseChatMemory","SUMMARY_PROMPT","BaseConversationSummaryMemory","constructor","fields","returnMessages","inputKey","outputKey","chatHistory","humanPrefix","aiPrefix","llm","prompt","summaryChatMessageClass","Object","defineProperty","enumerable","configurable","writable","value","memoryKey","predictNewSummary","messages","existingSummary","newLines","chain","predict","summary","new_lines","ConversationSummaryMemory","memoryKeys","loadMemoryVariables","_","result","buffer","saveContext","inputValues","outputValues","getMessages","slice","clear"],"sources":["/Users/mayamagavi/instalily/case-study/node_modules/langchain/dist/memory/summary.js"],"sourcesContent":["import { LLMChain } from \"../chains/llm_chain.js\";\nimport { SystemMessage } from \"../schema/index.js\";\nimport { getBufferString, } from \"./base.js\";\nimport { BaseChatMemory } from \"./chat_memory.js\";\nimport { SUMMARY_PROMPT } from \"./prompt.js\";\n/**\n * Abstract class that provides a structure for storing and managing the\n * memory of a conversation. It includes methods for predicting a new\n * summary for the conversation given the existing messages and summary.\n */\nexport class BaseConversationSummaryMemory extends BaseChatMemory {\n    constructor(fields) {\n        const { returnMessages, inputKey, outputKey, chatHistory, humanPrefix, aiPrefix, llm, prompt, summaryChatMessageClass, } = fields;\n        super({ returnMessages, inputKey, outputKey, chatHistory });\n        Object.defineProperty(this, \"memoryKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"history\"\n        });\n        Object.defineProperty(this, \"humanPrefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Human\"\n        });\n        Object.defineProperty(this, \"aiPrefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"AI\"\n        });\n        Object.defineProperty(this, \"llm\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"prompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: SUMMARY_PROMPT\n        });\n        Object.defineProperty(this, \"summaryChatMessageClass\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: SystemMessage\n        });\n        this.memoryKey = fields?.memoryKey ?? this.memoryKey;\n        this.humanPrefix = humanPrefix ?? this.humanPrefix;\n        this.aiPrefix = aiPrefix ?? this.aiPrefix;\n        this.llm = llm;\n        this.prompt = prompt ?? this.prompt;\n        this.summaryChatMessageClass =\n            summaryChatMessageClass ?? this.summaryChatMessageClass;\n    }\n    /**\n     * Predicts a new summary for the conversation given the existing messages\n     * and summary.\n     * @param messages Existing messages in the conversation.\n     * @param existingSummary Current summary of the conversation.\n     * @returns A promise that resolves to a new summary string.\n     */\n    async predictNewSummary(messages, existingSummary) {\n        const newLines = getBufferString(messages, this.humanPrefix, this.aiPrefix);\n        const chain = new LLMChain({ llm: this.llm, prompt: this.prompt });\n        return await chain.predict({\n            summary: existingSummary,\n            new_lines: newLines,\n        });\n    }\n}\n/**\n * Class that provides a concrete implementation of the conversation\n * memory. It includes methods for loading memory variables, saving\n * context, and clearing the memory.\n */\nexport class ConversationSummaryMemory extends BaseConversationSummaryMemory {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"buffer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n    }\n    get memoryKeys() {\n        return [this.memoryKey];\n    }\n    /**\n     * Loads the memory variables for the conversation memory.\n     * @returns A promise that resolves to an object containing the memory variables.\n     */\n    async loadMemoryVariables(_) {\n        if (this.returnMessages) {\n            const result = {\n                [this.memoryKey]: [new this.summaryChatMessageClass(this.buffer)],\n            };\n            return result;\n        }\n        const result = { [this.memoryKey]: this.buffer };\n        return result;\n    }\n    /**\n     * Saves the context of the conversation memory.\n     * @param inputValues Input values for the conversation.\n     * @param outputValues Output values from the conversation.\n     * @returns A promise that resolves when the context has been saved.\n     */\n    async saveContext(inputValues, outputValues) {\n        await super.saveContext(inputValues, outputValues);\n        const messages = await this.chatHistory.getMessages();\n        this.buffer = await this.predictNewSummary(messages.slice(-2), this.buffer);\n    }\n    /**\n     * Clears the conversation memory.\n     * @returns A promise that resolves when the memory has been cleared.\n     */\n    async clear() {\n        await super.clear();\n        this.buffer = \"\";\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}