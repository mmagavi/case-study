{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectBrowserPlatform = void 0;\nconst os_1 = __importDefault(require(\"os\"));\nconst browser_data_js_1 = require(\"./browser-data/browser-data.js\");\n/**\n * @public\n */\nfunction detectBrowserPlatform() {\n  const platform = os_1.default.platform();\n  switch (platform) {\n    case 'darwin':\n      return os_1.default.arch() === 'arm64' ? browser_data_js_1.BrowserPlatform.MAC_ARM : browser_data_js_1.BrowserPlatform.MAC;\n    case 'linux':\n      return browser_data_js_1.BrowserPlatform.LINUX;\n    case 'win32':\n      return os_1.default.arch() === 'x64' ||\n      // Windows 11 for ARM supports x64 emulation\n      os_1.default.arch() === 'arm64' && isWindows11(os_1.default.release()) ? browser_data_js_1.BrowserPlatform.WIN64 : browser_data_js_1.BrowserPlatform.WIN32;\n    default:\n      return undefined;\n  }\n}\nexports.detectBrowserPlatform = detectBrowserPlatform;\n/**\n * Windows 11 is identified by the version 10.0.22000 or greater\n * @internal\n */\nfunction isWindows11(version) {\n  const parts = version.split('.');\n  if (parts.length > 2) {\n    const major = parseInt(parts[0], 10);\n    const minor = parseInt(parts[1], 10);\n    const patch = parseInt(parts[2], 10);\n    return major > 10 || major === 10 && minor > 0 || major === 10 && minor === 0 && patch >= 22000;\n  }\n  return false;\n}","map":{"version":3,"names":["os_1","__importDefault","require","browser_data_js_1","detectBrowserPlatform","platform","default","arch","BrowserPlatform","MAC_ARM","MAC","LINUX","isWindows11","release","WIN64","WIN32","undefined","exports","version","parts","split","length","major","parseInt","minor","patch"],"sources":["../../src/detectPlatform.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,MAAAA,IAAA,GAAAC,eAAA,CAAAC,OAAA;AAEA,MAAAC,iBAAA,GAAAD,OAAA;AAEA;;;AAGA,SAAgBE,qBAAqBA,CAAA;EACnC,MAAMC,QAAQ,GAAGL,IAAA,CAAAM,OAAE,CAACD,QAAQ,EAAE;EAC9B,QAAQA,QAAQ;IACd,KAAK,QAAQ;MACX,OAAOL,IAAA,CAAAM,OAAE,CAACC,IAAI,EAAE,KAAK,OAAO,GACxBJ,iBAAA,CAAAK,eAAe,CAACC,OAAO,GACvBN,iBAAA,CAAAK,eAAe,CAACE,GAAG;IACzB,KAAK,OAAO;MACV,OAAOP,iBAAA,CAAAK,eAAe,CAACG,KAAK;IAC9B,KAAK,OAAO;MACV,OAAOX,IAAA,CAAAM,OAAE,CAACC,IAAI,EAAE,KAAK,KAAK;MACxB;MACCP,IAAA,CAAAM,OAAE,CAACC,IAAI,EAAE,KAAK,OAAO,IAAIK,WAAW,CAACZ,IAAA,CAAAM,OAAE,CAACO,OAAO,EAAE,CAAE,GAClDV,iBAAA,CAAAK,eAAe,CAACM,KAAK,GACrBX,iBAAA,CAAAK,eAAe,CAACO,KAAK;IAC3B;MACE,OAAOC,SAAS;;AAEtB;AAlBAC,OAAA,CAAAb,qBAAA,GAAAA,qBAAA;AAoBA;;;;AAIA,SAASQ,WAAWA,CAACM,OAAe;EAClC,MAAMC,KAAK,GAAGD,OAAO,CAACE,KAAK,CAAC,GAAG,CAAC;EAChC,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;IACpB,MAAMC,KAAK,GAAGC,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAW,EAAE,EAAE,CAAC;IAC9C,MAAMK,KAAK,GAAGD,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAW,EAAE,EAAE,CAAC;IAC9C,MAAMM,KAAK,GAAGF,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAW,EAAE,EAAE,CAAC;IAC9C,OACEG,KAAK,GAAG,EAAE,IACTA,KAAK,KAAK,EAAE,IAAIE,KAAK,GAAG,CAAE,IAC1BF,KAAK,KAAK,EAAE,IAAIE,KAAK,KAAK,CAAC,IAAIC,KAAK,IAAI,KAAM;;EAGnD,OAAO,KAAK;AACd"},"metadata":{},"sourceType":"script","externalDependencies":[]}