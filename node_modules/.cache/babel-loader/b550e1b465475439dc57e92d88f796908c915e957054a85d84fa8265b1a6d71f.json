{"ast":null,"code":"/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _NetworkManager_instances, _NetworkManager_client, _NetworkManager_ignoreHTTPSErrors, _NetworkManager_frameManager, _NetworkManager_networkEventManager, _NetworkManager_extraHTTPHeaders, _NetworkManager_credentials, _NetworkManager_attemptedAuthentications, _NetworkManager_userRequestInterceptionEnabled, _NetworkManager_protocolRequestInterceptionEnabled, _NetworkManager_userCacheDisabled, _NetworkManager_emulatedNetworkConditions, _NetworkManager_deferredInitPromise, _NetworkManager_updateNetworkConditions, _NetworkManager_updateProtocolRequestInterception, _NetworkManager_cacheDisabled, _NetworkManager_updateProtocolCacheDisabled, _NetworkManager_onRequestWillBeSent, _NetworkManager_onAuthRequired, _NetworkManager_onRequestPaused, _NetworkManager_patchRequestEventHeaders, _NetworkManager_onRequestWithoutNetworkInstrumentation, _NetworkManager_onRequest, _NetworkManager_onRequestServedFromCache, _NetworkManager_handleRequestRedirect, _NetworkManager_emitResponseEvent, _NetworkManager_onResponseReceived, _NetworkManager_onResponseReceivedExtraInfo, _NetworkManager_forgetRequest, _NetworkManager_onLoadingFinished, _NetworkManager_emitLoadingFinished, _NetworkManager_onLoadingFailed, _NetworkManager_emitLoadingFailed;\nimport { assert } from '../util/assert.js';\nimport { createDebuggableDeferredPromise } from '../util/DebuggableDeferredPromise.js';\nimport { EventEmitter } from './EventEmitter.js';\nimport { HTTPRequest } from './HTTPRequest.js';\nimport { HTTPResponse } from './HTTPResponse.js';\nimport { NetworkEventManager } from './NetworkEventManager.js';\nimport { debugError, isString } from './util.js';\n/**\n * We use symbols to prevent any external parties listening to these events.\n * They are internal to Puppeteer.\n *\n * @internal\n */\nexport const NetworkManagerEmittedEvents = {\n  Request: Symbol('NetworkManager.Request'),\n  RequestServedFromCache: Symbol('NetworkManager.RequestServedFromCache'),\n  Response: Symbol('NetworkManager.Response'),\n  RequestFailed: Symbol('NetworkManager.RequestFailed'),\n  RequestFinished: Symbol('NetworkManager.RequestFinished')\n};\n/**\n * @internal\n */\nexport class NetworkManager extends EventEmitter {\n  constructor(client, ignoreHTTPSErrors, frameManager) {\n    super();\n    _NetworkManager_instances.add(this);\n    _NetworkManager_client.set(this, void 0);\n    _NetworkManager_ignoreHTTPSErrors.set(this, void 0);\n    _NetworkManager_frameManager.set(this, void 0);\n    _NetworkManager_networkEventManager.set(this, new NetworkEventManager());\n    _NetworkManager_extraHTTPHeaders.set(this, {});\n    _NetworkManager_credentials.set(this, void 0);\n    _NetworkManager_attemptedAuthentications.set(this, new Set());\n    _NetworkManager_userRequestInterceptionEnabled.set(this, false);\n    _NetworkManager_protocolRequestInterceptionEnabled.set(this, false);\n    _NetworkManager_userCacheDisabled.set(this, false);\n    _NetworkManager_emulatedNetworkConditions.set(this, {\n      offline: false,\n      upload: -1,\n      download: -1,\n      latency: 0\n    });\n    _NetworkManager_deferredInitPromise.set(this, void 0);\n    __classPrivateFieldSet(this, _NetworkManager_client, client, \"f\");\n    __classPrivateFieldSet(this, _NetworkManager_ignoreHTTPSErrors, ignoreHTTPSErrors, \"f\");\n    __classPrivateFieldSet(this, _NetworkManager_frameManager, frameManager, \"f\");\n    __classPrivateFieldGet(this, _NetworkManager_client, \"f\").on('Fetch.requestPaused', __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onRequestPaused).bind(this));\n    __classPrivateFieldGet(this, _NetworkManager_client, \"f\").on('Fetch.authRequired', __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onAuthRequired).bind(this));\n    __classPrivateFieldGet(this, _NetworkManager_client, \"f\").on('Network.requestWillBeSent', __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onRequestWillBeSent).bind(this));\n    __classPrivateFieldGet(this, _NetworkManager_client, \"f\").on('Network.requestServedFromCache', __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onRequestServedFromCache).bind(this));\n    __classPrivateFieldGet(this, _NetworkManager_client, \"f\").on('Network.responseReceived', __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onResponseReceived).bind(this));\n    __classPrivateFieldGet(this, _NetworkManager_client, \"f\").on('Network.loadingFinished', __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onLoadingFinished).bind(this));\n    __classPrivateFieldGet(this, _NetworkManager_client, \"f\").on('Network.loadingFailed', __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onLoadingFailed).bind(this));\n    __classPrivateFieldGet(this, _NetworkManager_client, \"f\").on('Network.responseReceivedExtraInfo', __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onResponseReceivedExtraInfo).bind(this));\n  }\n  /**\n   * Initialize calls should avoid async dependencies between CDP calls as those\n   * might not resolve until after the target is resumed causing a deadlock.\n   */\n  initialize() {\n    if (__classPrivateFieldGet(this, _NetworkManager_deferredInitPromise, \"f\")) {\n      return __classPrivateFieldGet(this, _NetworkManager_deferredInitPromise, \"f\");\n    }\n    __classPrivateFieldSet(this, _NetworkManager_deferredInitPromise, createDebuggableDeferredPromise('NetworkManager initialization timed out'), \"f\");\n    const init = Promise.all([__classPrivateFieldGet(this, _NetworkManager_ignoreHTTPSErrors, \"f\") ? __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Security.setIgnoreCertificateErrors', {\n      ignore: true\n    }) : null, __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Network.enable')]);\n    const deferredInitPromise = __classPrivateFieldGet(this, _NetworkManager_deferredInitPromise, \"f\");\n    init.then(() => {\n      deferredInitPromise.resolve();\n    }).catch(err => {\n      deferredInitPromise.reject(err);\n    });\n    return __classPrivateFieldGet(this, _NetworkManager_deferredInitPromise, \"f\");\n  }\n  async authenticate(credentials) {\n    __classPrivateFieldSet(this, _NetworkManager_credentials, credentials, \"f\");\n    await __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_updateProtocolRequestInterception).call(this);\n  }\n  async setExtraHTTPHeaders(extraHTTPHeaders) {\n    __classPrivateFieldSet(this, _NetworkManager_extraHTTPHeaders, {}, \"f\");\n    for (const key of Object.keys(extraHTTPHeaders)) {\n      const value = extraHTTPHeaders[key];\n      assert(isString(value), `Expected value of header \"${key}\" to be String, but \"${typeof value}\" is found.`);\n      __classPrivateFieldGet(this, _NetworkManager_extraHTTPHeaders, \"f\")[key.toLowerCase()] = value;\n    }\n    await __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Network.setExtraHTTPHeaders', {\n      headers: __classPrivateFieldGet(this, _NetworkManager_extraHTTPHeaders, \"f\")\n    });\n  }\n  extraHTTPHeaders() {\n    return Object.assign({}, __classPrivateFieldGet(this, _NetworkManager_extraHTTPHeaders, \"f\"));\n  }\n  numRequestsInProgress() {\n    return __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").numRequestsInProgress();\n  }\n  async setOfflineMode(value) {\n    __classPrivateFieldGet(this, _NetworkManager_emulatedNetworkConditions, \"f\").offline = value;\n    await __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_updateNetworkConditions).call(this);\n  }\n  async emulateNetworkConditions(networkConditions) {\n    __classPrivateFieldGet(this, _NetworkManager_emulatedNetworkConditions, \"f\").upload = networkConditions ? networkConditions.upload : -1;\n    __classPrivateFieldGet(this, _NetworkManager_emulatedNetworkConditions, \"f\").download = networkConditions ? networkConditions.download : -1;\n    __classPrivateFieldGet(this, _NetworkManager_emulatedNetworkConditions, \"f\").latency = networkConditions ? networkConditions.latency : 0;\n    await __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_updateNetworkConditions).call(this);\n  }\n  async setUserAgent(userAgent, userAgentMetadata) {\n    await __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Network.setUserAgentOverride', {\n      userAgent: userAgent,\n      userAgentMetadata: userAgentMetadata\n    });\n  }\n  async setCacheEnabled(enabled) {\n    __classPrivateFieldSet(this, _NetworkManager_userCacheDisabled, !enabled, \"f\");\n    await __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_updateProtocolCacheDisabled).call(this);\n  }\n  async setRequestInterception(value) {\n    __classPrivateFieldSet(this, _NetworkManager_userRequestInterceptionEnabled, value, \"f\");\n    await __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_updateProtocolRequestInterception).call(this);\n  }\n}\n_NetworkManager_client = new WeakMap(), _NetworkManager_ignoreHTTPSErrors = new WeakMap(), _NetworkManager_frameManager = new WeakMap(), _NetworkManager_networkEventManager = new WeakMap(), _NetworkManager_extraHTTPHeaders = new WeakMap(), _NetworkManager_credentials = new WeakMap(), _NetworkManager_attemptedAuthentications = new WeakMap(), _NetworkManager_userRequestInterceptionEnabled = new WeakMap(), _NetworkManager_protocolRequestInterceptionEnabled = new WeakMap(), _NetworkManager_userCacheDisabled = new WeakMap(), _NetworkManager_emulatedNetworkConditions = new WeakMap(), _NetworkManager_deferredInitPromise = new WeakMap(), _NetworkManager_instances = new WeakSet(), _NetworkManager_updateNetworkConditions = async function _NetworkManager_updateNetworkConditions() {\n  await __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Network.emulateNetworkConditions', {\n    offline: __classPrivateFieldGet(this, _NetworkManager_emulatedNetworkConditions, \"f\").offline,\n    latency: __classPrivateFieldGet(this, _NetworkManager_emulatedNetworkConditions, \"f\").latency,\n    uploadThroughput: __classPrivateFieldGet(this, _NetworkManager_emulatedNetworkConditions, \"f\").upload,\n    downloadThroughput: __classPrivateFieldGet(this, _NetworkManager_emulatedNetworkConditions, \"f\").download\n  });\n}, _NetworkManager_updateProtocolRequestInterception = async function _NetworkManager_updateProtocolRequestInterception() {\n  const enabled = __classPrivateFieldGet(this, _NetworkManager_userRequestInterceptionEnabled, \"f\") || !!__classPrivateFieldGet(this, _NetworkManager_credentials, \"f\");\n  if (enabled === __classPrivateFieldGet(this, _NetworkManager_protocolRequestInterceptionEnabled, \"f\")) {\n    return;\n  }\n  __classPrivateFieldSet(this, _NetworkManager_protocolRequestInterceptionEnabled, enabled, \"f\");\n  if (enabled) {\n    await Promise.all([__classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_updateProtocolCacheDisabled).call(this), __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Fetch.enable', {\n      handleAuthRequests: true,\n      patterns: [{\n        urlPattern: '*'\n      }]\n    })]);\n  } else {\n    await Promise.all([__classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_updateProtocolCacheDisabled).call(this), __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Fetch.disable')]);\n  }\n}, _NetworkManager_cacheDisabled = function _NetworkManager_cacheDisabled() {\n  return __classPrivateFieldGet(this, _NetworkManager_userCacheDisabled, \"f\");\n}, _NetworkManager_updateProtocolCacheDisabled = async function _NetworkManager_updateProtocolCacheDisabled() {\n  await __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Network.setCacheDisabled', {\n    cacheDisabled: __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_cacheDisabled).call(this)\n  });\n}, _NetworkManager_onRequestWillBeSent = function _NetworkManager_onRequestWillBeSent(event) {\n  // Request interception doesn't happen for data URLs with Network Service.\n  if (__classPrivateFieldGet(this, _NetworkManager_userRequestInterceptionEnabled, \"f\") && !event.request.url.startsWith('data:')) {\n    const {\n      requestId: networkRequestId\n    } = event;\n    __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").storeRequestWillBeSent(networkRequestId, event);\n    /**\n     * CDP may have sent a Fetch.requestPaused event already. Check for it.\n     */\n    const requestPausedEvent = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getRequestPaused(networkRequestId);\n    if (requestPausedEvent) {\n      const {\n        requestId: fetchRequestId\n      } = requestPausedEvent;\n      __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_patchRequestEventHeaders).call(this, event, requestPausedEvent);\n      __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onRequest).call(this, event, fetchRequestId);\n      __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").forgetRequestPaused(networkRequestId);\n    }\n    return;\n  }\n  __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onRequest).call(this, event, undefined);\n}, _NetworkManager_onAuthRequired = function _NetworkManager_onAuthRequired(event) {\n  let response = 'Default';\n  if (__classPrivateFieldGet(this, _NetworkManager_attemptedAuthentications, \"f\").has(event.requestId)) {\n    response = 'CancelAuth';\n  } else if (__classPrivateFieldGet(this, _NetworkManager_credentials, \"f\")) {\n    response = 'ProvideCredentials';\n    __classPrivateFieldGet(this, _NetworkManager_attemptedAuthentications, \"f\").add(event.requestId);\n  }\n  const {\n    username,\n    password\n  } = __classPrivateFieldGet(this, _NetworkManager_credentials, \"f\") || {\n    username: undefined,\n    password: undefined\n  };\n  __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Fetch.continueWithAuth', {\n    requestId: event.requestId,\n    authChallengeResponse: {\n      response,\n      username,\n      password\n    }\n  }).catch(debugError);\n}, _NetworkManager_onRequestPaused = function _NetworkManager_onRequestPaused(event) {\n  if (!__classPrivateFieldGet(this, _NetworkManager_userRequestInterceptionEnabled, \"f\") && __classPrivateFieldGet(this, _NetworkManager_protocolRequestInterceptionEnabled, \"f\")) {\n    __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Fetch.continueRequest', {\n      requestId: event.requestId\n    }).catch(debugError);\n  }\n  const {\n    networkId: networkRequestId,\n    requestId: fetchRequestId\n  } = event;\n  if (!networkRequestId) {\n    __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onRequestWithoutNetworkInstrumentation).call(this, event);\n    return;\n  }\n  const requestWillBeSentEvent = (() => {\n    const requestWillBeSentEvent = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getRequestWillBeSent(networkRequestId);\n    // redirect requests have the same `requestId`,\n    if (requestWillBeSentEvent && (requestWillBeSentEvent.request.url !== event.request.url || requestWillBeSentEvent.request.method !== event.request.method)) {\n      __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").forgetRequestWillBeSent(networkRequestId);\n      return;\n    }\n    return requestWillBeSentEvent;\n  })();\n  if (requestWillBeSentEvent) {\n    __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_patchRequestEventHeaders).call(this, requestWillBeSentEvent, event);\n    __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onRequest).call(this, requestWillBeSentEvent, fetchRequestId);\n  } else {\n    __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").storeRequestPaused(networkRequestId, event);\n  }\n}, _NetworkManager_patchRequestEventHeaders = function _NetworkManager_patchRequestEventHeaders(requestWillBeSentEvent, requestPausedEvent) {\n  requestWillBeSentEvent.request.headers = {\n    ...requestWillBeSentEvent.request.headers,\n    // includes extra headers, like: Accept, Origin\n    ...requestPausedEvent.request.headers\n  };\n}, _NetworkManager_onRequestWithoutNetworkInstrumentation = function _NetworkManager_onRequestWithoutNetworkInstrumentation(event) {\n  // If an event has no networkId it should not have any network events. We\n  // still want to dispatch it for the interception by the user.\n  const frame = event.frameId ? __classPrivateFieldGet(this, _NetworkManager_frameManager, \"f\").frame(event.frameId) : null;\n  const request = new HTTPRequest(__classPrivateFieldGet(this, _NetworkManager_client, \"f\"), frame, event.requestId, __classPrivateFieldGet(this, _NetworkManager_userRequestInterceptionEnabled, \"f\"), event, []);\n  this.emit(NetworkManagerEmittedEvents.Request, request);\n  request.finalizeInterceptions();\n}, _NetworkManager_onRequest = function _NetworkManager_onRequest(event, fetchRequestId) {\n  let redirectChain = [];\n  if (event.redirectResponse) {\n    // We want to emit a response and requestfinished for the\n    // redirectResponse, but we can't do so unless we have a\n    // responseExtraInfo ready to pair it up with. If we don't have any\n    // responseExtraInfos saved in our queue, they we have to wait until\n    // the next one to emit response and requestfinished, *and* we should\n    // also wait to emit this Request too because it should come after the\n    // response/requestfinished.\n    let redirectResponseExtraInfo = null;\n    if (event.redirectHasExtraInfo) {\n      redirectResponseExtraInfo = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").responseExtraInfo(event.requestId).shift();\n      if (!redirectResponseExtraInfo) {\n        __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").queueRedirectInfo(event.requestId, {\n          event,\n          fetchRequestId\n        });\n        return;\n      }\n    }\n    const request = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getRequest(event.requestId);\n    // If we connect late to the target, we could have missed the\n    // requestWillBeSent event.\n    if (request) {\n      __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_handleRequestRedirect).call(this, request, event.redirectResponse, redirectResponseExtraInfo);\n      redirectChain = request._redirectChain;\n    }\n  }\n  const frame = event.frameId ? __classPrivateFieldGet(this, _NetworkManager_frameManager, \"f\").frame(event.frameId) : null;\n  const request = new HTTPRequest(__classPrivateFieldGet(this, _NetworkManager_client, \"f\"), frame, fetchRequestId, __classPrivateFieldGet(this, _NetworkManager_userRequestInterceptionEnabled, \"f\"), event, redirectChain);\n  __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").storeRequest(event.requestId, request);\n  this.emit(NetworkManagerEmittedEvents.Request, request);\n  request.finalizeInterceptions();\n}, _NetworkManager_onRequestServedFromCache = function _NetworkManager_onRequestServedFromCache(event) {\n  const request = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getRequest(event.requestId);\n  if (request) {\n    request._fromMemoryCache = true;\n  }\n  this.emit(NetworkManagerEmittedEvents.RequestServedFromCache, request);\n}, _NetworkManager_handleRequestRedirect = function _NetworkManager_handleRequestRedirect(request, responsePayload, extraInfo) {\n  const response = new HTTPResponse(__classPrivateFieldGet(this, _NetworkManager_client, \"f\"), request, responsePayload, extraInfo);\n  request._response = response;\n  request._redirectChain.push(request);\n  response._resolveBody(new Error('Response body is unavailable for redirect responses'));\n  __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_forgetRequest).call(this, request, false);\n  this.emit(NetworkManagerEmittedEvents.Response, response);\n  this.emit(NetworkManagerEmittedEvents.RequestFinished, request);\n}, _NetworkManager_emitResponseEvent = function _NetworkManager_emitResponseEvent(responseReceived, extraInfo) {\n  const request = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getRequest(responseReceived.requestId);\n  // FileUpload sends a response without a matching request.\n  if (!request) {\n    return;\n  }\n  const extraInfos = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").responseExtraInfo(responseReceived.requestId);\n  if (extraInfos.length) {\n    debugError(new Error('Unexpected extraInfo events for request ' + responseReceived.requestId));\n  }\n  // Chromium sends wrong extraInfo events for responses served from cache.\n  // See https://github.com/puppeteer/puppeteer/issues/9965 and\n  // https://crbug.com/1340398.\n  if (responseReceived.response.fromDiskCache) {\n    extraInfo = null;\n  }\n  const response = new HTTPResponse(__classPrivateFieldGet(this, _NetworkManager_client, \"f\"), request, responseReceived.response, extraInfo);\n  request._response = response;\n  this.emit(NetworkManagerEmittedEvents.Response, response);\n}, _NetworkManager_onResponseReceived = function _NetworkManager_onResponseReceived(event) {\n  const request = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getRequest(event.requestId);\n  let extraInfo = null;\n  if (request && !request._fromMemoryCache && event.hasExtraInfo) {\n    extraInfo = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").responseExtraInfo(event.requestId).shift();\n    if (!extraInfo) {\n      // Wait until we get the corresponding ExtraInfo event.\n      __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").queueEventGroup(event.requestId, {\n        responseReceivedEvent: event\n      });\n      return;\n    }\n  }\n  __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_emitResponseEvent).call(this, event, extraInfo);\n}, _NetworkManager_onResponseReceivedExtraInfo = function _NetworkManager_onResponseReceivedExtraInfo(event) {\n  // We may have skipped a redirect response/request pair due to waiting for\n  // this ExtraInfo event. If so, continue that work now that we have the\n  // request.\n  const redirectInfo = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").takeQueuedRedirectInfo(event.requestId);\n  if (redirectInfo) {\n    __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").responseExtraInfo(event.requestId).push(event);\n    __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onRequest).call(this, redirectInfo.event, redirectInfo.fetchRequestId);\n    return;\n  }\n  // We may have skipped response and loading events because we didn't have\n  // this ExtraInfo event yet. If so, emit those events now.\n  const queuedEvents = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getQueuedEventGroup(event.requestId);\n  if (queuedEvents) {\n    __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").forgetQueuedEventGroup(event.requestId);\n    __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_emitResponseEvent).call(this, queuedEvents.responseReceivedEvent, event);\n    if (queuedEvents.loadingFinishedEvent) {\n      __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_emitLoadingFinished).call(this, queuedEvents.loadingFinishedEvent);\n    }\n    if (queuedEvents.loadingFailedEvent) {\n      __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_emitLoadingFailed).call(this, queuedEvents.loadingFailedEvent);\n    }\n    return;\n  }\n  // Wait until we get another event that can use this ExtraInfo event.\n  __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").responseExtraInfo(event.requestId).push(event);\n}, _NetworkManager_forgetRequest = function _NetworkManager_forgetRequest(request, events) {\n  const requestId = request._requestId;\n  const interceptionId = request._interceptionId;\n  __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").forgetRequest(requestId);\n  interceptionId !== undefined && __classPrivateFieldGet(this, _NetworkManager_attemptedAuthentications, \"f\").delete(interceptionId);\n  if (events) {\n    __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").forget(requestId);\n  }\n}, _NetworkManager_onLoadingFinished = function _NetworkManager_onLoadingFinished(event) {\n  // If the response event for this request is still waiting on a\n  // corresponding ExtraInfo event, then wait to emit this event too.\n  const queuedEvents = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getQueuedEventGroup(event.requestId);\n  if (queuedEvents) {\n    queuedEvents.loadingFinishedEvent = event;\n  } else {\n    __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_emitLoadingFinished).call(this, event);\n  }\n}, _NetworkManager_emitLoadingFinished = function _NetworkManager_emitLoadingFinished(event) {\n  var _a;\n  const request = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getRequest(event.requestId);\n  // For certain requestIds we never receive requestWillBeSent event.\n  // @see https://crbug.com/750469\n  if (!request) {\n    return;\n  }\n  // Under certain conditions we never get the Network.responseReceived\n  // event from protocol. @see https://crbug.com/883475\n  if (request.response()) {\n    (_a = request.response()) === null || _a === void 0 ? void 0 : _a._resolveBody(null);\n  }\n  __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_forgetRequest).call(this, request, true);\n  this.emit(NetworkManagerEmittedEvents.RequestFinished, request);\n}, _NetworkManager_onLoadingFailed = function _NetworkManager_onLoadingFailed(event) {\n  // If the response event for this request is still waiting on a\n  // corresponding ExtraInfo event, then wait to emit this event too.\n  const queuedEvents = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getQueuedEventGroup(event.requestId);\n  if (queuedEvents) {\n    queuedEvents.loadingFailedEvent = event;\n  } else {\n    __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_emitLoadingFailed).call(this, event);\n  }\n}, _NetworkManager_emitLoadingFailed = function _NetworkManager_emitLoadingFailed(event) {\n  const request = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getRequest(event.requestId);\n  // For certain requestIds we never receive requestWillBeSent event.\n  // @see https://crbug.com/750469\n  if (!request) {\n    return;\n  }\n  request._failureText = event.errorText;\n  const response = request.response();\n  if (response) {\n    response._resolveBody(null);\n  }\n  __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_forgetRequest).call(this, request, true);\n  this.emit(NetworkManagerEmittedEvents.RequestFailed, request);\n};","map":{"version":3,"names":["assert","createDebuggableDeferredPromise","EventEmitter","HTTPRequest","HTTPResponse","NetworkEventManager","debugError","isString","NetworkManagerEmittedEvents","Request","Symbol","RequestServedFromCache","Response","RequestFailed","RequestFinished","NetworkManager","constructor","client","ignoreHTTPSErrors","frameManager","_NetworkManager_client","set","_NetworkManager_ignoreHTTPSErrors","_NetworkManager_frameManager","_NetworkManager_networkEventManager","_NetworkManager_extraHTTPHeaders","_NetworkManager_credentials","_NetworkManager_attemptedAuthentications","Set","_NetworkManager_userRequestInterceptionEnabled","_NetworkManager_protocolRequestInterceptionEnabled","_NetworkManager_userCacheDisabled","_NetworkManager_emulatedNetworkConditions","offline","upload","download","latency","_NetworkManager_deferredInitPromise","__classPrivateFieldSet","__classPrivateFieldGet","on","_NetworkManager_instances","_NetworkManager_onRequestPaused","bind","_NetworkManager_onAuthRequired","_NetworkManager_onRequestWillBeSent","_NetworkManager_onRequestServedFromCache","_NetworkManager_onResponseReceived","_NetworkManager_onLoadingFinished","_NetworkManager_onLoadingFailed","_NetworkManager_onResponseReceivedExtraInfo","initialize","init","Promise","all","send","ignore","deferredInitPromise","then","resolve","catch","err","reject","authenticate","credentials","_NetworkManager_updateProtocolRequestInterception","call","setExtraHTTPHeaders","extraHTTPHeaders","key","Object","keys","value","toLowerCase","headers","assign","numRequestsInProgress","setOfflineMode","_NetworkManager_updateNetworkConditions","emulateNetworkConditions","networkConditions","setUserAgent","userAgent","userAgentMetadata","setCacheEnabled","enabled","_NetworkManager_updateProtocolCacheDisabled","setRequestInterception","uploadThroughput","downloadThroughput","handleAuthRequests","patterns","urlPattern","_NetworkManager_cacheDisabled","cacheDisabled","event","request","url","startsWith","requestId","networkRequestId","storeRequestWillBeSent","requestPausedEvent","getRequestPaused","fetchRequestId","_NetworkManager_patchRequestEventHeaders","_NetworkManager_onRequest","forgetRequestPaused","undefined","response","has","add","username","password","authChallengeResponse","networkId","_NetworkManager_onRequestWithoutNetworkInstrumentation","requestWillBeSentEvent","getRequestWillBeSent","method","forgetRequestWillBeSent","storeRequestPaused","frame","frameId","emit","finalizeInterceptions","redirectChain","redirectResponse","redirectResponseExtraInfo","redirectHasExtraInfo","responseExtraInfo","shift","queueRedirectInfo","getRequest","_NetworkManager_handleRequestRedirect","_redirectChain","storeRequest","_fromMemoryCache","responsePayload","extraInfo","_response","push","_resolveBody","Error","_NetworkManager_forgetRequest","_NetworkManager_emitResponseEvent","responseReceived","extraInfos","length","fromDiskCache","hasExtraInfo","queueEventGroup","responseReceivedEvent","redirectInfo","takeQueuedRedirectInfo","queuedEvents","getQueuedEventGroup","forgetQueuedEventGroup","loadingFinishedEvent","_NetworkManager_emitLoadingFinished","loadingFailedEvent","_NetworkManager_emitLoadingFailed","events","_requestId","interceptionId","_interceptionId","forgetRequest","delete","forget","_a","_failureText","errorText"],"sources":["../../../../src/common/NetworkManager.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}