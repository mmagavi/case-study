{"ast":null,"code":"import { Document } from \"../document.js\";\nimport { BaseMemory, getInputValue } from \"./base.js\";\n/**\n * Class for managing long-term memory in Large Language Model (LLM)\n * applications. It provides a way to persist and retrieve relevant\n * documents from a vector store database, which can be useful for\n * maintaining conversation history or other types of memory in an LLM\n * application.\n */\nexport class VectorStoreRetrieverMemory extends BaseMemory {\n  constructor(fields) {\n    super();\n    Object.defineProperty(this, \"vectorStoreRetriever\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"inputKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"memoryKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"returnDocs\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.vectorStoreRetriever = fields.vectorStoreRetriever;\n    this.inputKey = fields.inputKey;\n    this.memoryKey = fields.memoryKey ?? \"memory\";\n    this.returnDocs = fields.returnDocs ?? false;\n  }\n  get memoryKeys() {\n    return [this.memoryKey];\n  }\n  /**\n   * Method to load memory variables. It uses the vectorStoreRetriever to\n   * get relevant documents based on the query obtained from the input\n   * values.\n   * @param values An InputValues object.\n   * @returns A Promise that resolves to a MemoryVariables object.\n   */\n  async loadMemoryVariables(values) {\n    const query = getInputValue(values, this.inputKey);\n    const results = await this.vectorStoreRetriever.getRelevantDocuments(query);\n    return {\n      [this.memoryKey]: this.returnDocs ? results : results.map(r => r.pageContent).join(\"\\n\")\n    };\n  }\n  /**\n   * Method to save context. It constructs a document from the input and\n   * output values (excluding the memory key) and adds it to the vector\n   * store database using the vectorStoreRetriever.\n   * @param inputValues An InputValues object.\n   * @param outputValues An OutputValues object.\n   * @returns A Promise that resolves to void.\n   */\n  async saveContext(inputValues, outputValues) {\n    const text = Object.entries(inputValues).filter(([k]) => k !== this.memoryKey).concat(Object.entries(outputValues)).map(([k, v]) => `${k}: ${v}`).join(\"\\n\");\n    await this.vectorStoreRetriever.addDocuments([new Document({\n      pageContent: text\n    })]);\n  }\n}","map":{"version":3,"names":["Document","BaseMemory","getInputValue","VectorStoreRetrieverMemory","constructor","fields","Object","defineProperty","enumerable","configurable","writable","value","vectorStoreRetriever","inputKey","memoryKey","returnDocs","memoryKeys","loadMemoryVariables","values","query","results","getRelevantDocuments","map","r","pageContent","join","saveContext","inputValues","outputValues","text","entries","filter","k","concat","v","addDocuments"],"sources":["/Users/mayamagavi/instalily/case-study/node_modules/langchain/dist/memory/vector_store.js"],"sourcesContent":["import { Document } from \"../document.js\";\nimport { BaseMemory, getInputValue, } from \"./base.js\";\n/**\n * Class for managing long-term memory in Large Language Model (LLM)\n * applications. It provides a way to persist and retrieve relevant\n * documents from a vector store database, which can be useful for\n * maintaining conversation history or other types of memory in an LLM\n * application.\n */\nexport class VectorStoreRetrieverMemory extends BaseMemory {\n    constructor(fields) {\n        super();\n        Object.defineProperty(this, \"vectorStoreRetriever\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"memoryKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnDocs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.vectorStoreRetriever = fields.vectorStoreRetriever;\n        this.inputKey = fields.inputKey;\n        this.memoryKey = fields.memoryKey ?? \"memory\";\n        this.returnDocs = fields.returnDocs ?? false;\n    }\n    get memoryKeys() {\n        return [this.memoryKey];\n    }\n    /**\n     * Method to load memory variables. It uses the vectorStoreRetriever to\n     * get relevant documents based on the query obtained from the input\n     * values.\n     * @param values An InputValues object.\n     * @returns A Promise that resolves to a MemoryVariables object.\n     */\n    async loadMemoryVariables(values) {\n        const query = getInputValue(values, this.inputKey);\n        const results = await this.vectorStoreRetriever.getRelevantDocuments(query);\n        return {\n            [this.memoryKey]: this.returnDocs\n                ? results\n                : results.map((r) => r.pageContent).join(\"\\n\"),\n        };\n    }\n    /**\n     * Method to save context. It constructs a document from the input and\n     * output values (excluding the memory key) and adds it to the vector\n     * store database using the vectorStoreRetriever.\n     * @param inputValues An InputValues object.\n     * @param outputValues An OutputValues object.\n     * @returns A Promise that resolves to void.\n     */\n    async saveContext(inputValues, outputValues) {\n        const text = Object.entries(inputValues)\n            .filter(([k]) => k !== this.memoryKey)\n            .concat(Object.entries(outputValues))\n            .map(([k, v]) => `${k}: ${v}`)\n            .join(\"\\n\");\n        await this.vectorStoreRetriever.addDocuments([\n            new Document({ pageContent: text }),\n        ]);\n    }\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,UAAU,EAAEC,aAAa,QAAS,WAAW;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,0BAA0B,SAASF,UAAU,CAAC;EACvDG,WAAWA,CAACC,MAAM,EAAE;IAChB,KAAK,CAAC,CAAC;IACPC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,sBAAsB,EAAE;MAChDC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE;MACpCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,WAAW,EAAE;MACrCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,YAAY,EAAE;MACtCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACC,oBAAoB,GAAGP,MAAM,CAACO,oBAAoB;IACvD,IAAI,CAACC,QAAQ,GAAGR,MAAM,CAACQ,QAAQ;IAC/B,IAAI,CAACC,SAAS,GAAGT,MAAM,CAACS,SAAS,IAAI,QAAQ;IAC7C,IAAI,CAACC,UAAU,GAAGV,MAAM,CAACU,UAAU,IAAI,KAAK;EAChD;EACA,IAAIC,UAAUA,CAAA,EAAG;IACb,OAAO,CAAC,IAAI,CAACF,SAAS,CAAC;EAC3B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAMG,mBAAmBA,CAACC,MAAM,EAAE;IAC9B,MAAMC,KAAK,GAAGjB,aAAa,CAACgB,MAAM,EAAE,IAAI,CAACL,QAAQ,CAAC;IAClD,MAAMO,OAAO,GAAG,MAAM,IAAI,CAACR,oBAAoB,CAACS,oBAAoB,CAACF,KAAK,CAAC;IAC3E,OAAO;MACH,CAAC,IAAI,CAACL,SAAS,GAAG,IAAI,CAACC,UAAU,GAC3BK,OAAO,GACPA,OAAO,CAACE,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,WAAW,CAAC,CAACC,IAAI,CAAC,IAAI;IACrD,CAAC;EACL;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,WAAWA,CAACC,WAAW,EAAEC,YAAY,EAAE;IACzC,MAAMC,IAAI,GAAGvB,MAAM,CAACwB,OAAO,CAACH,WAAW,CAAC,CACnCI,MAAM,CAAC,CAAC,CAACC,CAAC,CAAC,KAAKA,CAAC,KAAK,IAAI,CAAClB,SAAS,CAAC,CACrCmB,MAAM,CAAC3B,MAAM,CAACwB,OAAO,CAACF,YAAY,CAAC,CAAC,CACpCN,GAAG,CAAC,CAAC,CAACU,CAAC,EAAEE,CAAC,CAAC,KAAM,GAAEF,CAAE,KAAIE,CAAE,EAAC,CAAC,CAC7BT,IAAI,CAAC,IAAI,CAAC;IACf,MAAM,IAAI,CAACb,oBAAoB,CAACuB,YAAY,CAAC,CACzC,IAAInC,QAAQ,CAAC;MAAEwB,WAAW,EAAEK;IAAK,CAAC,CAAC,CACtC,CAAC;EACN;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}