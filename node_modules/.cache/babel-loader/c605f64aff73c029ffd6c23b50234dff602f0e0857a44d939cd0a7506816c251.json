{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cosmiconfig = cosmiconfig;\nexports.cosmiconfigSync = cosmiconfigSync;\nexports.metaSearchPlaces = exports.defaultLoaders = void 0;\nvar _os = _interopRequireDefault(require(\"os\"));\nvar _Explorer = require(\"./Explorer\");\nvar _ExplorerSync = require(\"./ExplorerSync\");\nvar _loaders = require(\"./loaders\");\nvar _types = require(\"./types\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n// this needs to be hardcoded, as this is intended for end users, who can't supply options at this point\nconst metaSearchPlaces = ['package.json', '.config.json', '.config.yaml', '.config.yml', '.config.js', '.config.cjs']; // do not allow mutation of default loaders. Make sure it is set inside options\n\nexports.metaSearchPlaces = metaSearchPlaces;\nconst defaultLoaders = Object.freeze({\n  '.cjs': _loaders.loaders.loadJs,\n  '.js': _loaders.loaders.loadJs,\n  '.json': _loaders.loaders.loadJson,\n  '.yaml': _loaders.loaders.loadYaml,\n  '.yml': _loaders.loaders.loadYaml,\n  noExt: _loaders.loaders.loadYaml\n});\nexports.defaultLoaders = defaultLoaders;\nconst identity = function identity(x) {\n  return x;\n};\nfunction replaceMetaPlaceholders(paths, moduleName) {\n  return paths.map(path => path.replace('{name}', moduleName));\n}\nfunction getExplorerOptions(moduleName, options) {\n  var _metaConfig$config;\n  const metaExplorer = new _ExplorerSync.ExplorerSync({\n    packageProp: 'cosmiconfig',\n    stopDir: process.cwd(),\n    searchPlaces: metaSearchPlaces,\n    ignoreEmptySearchPlaces: false,\n    usePackagePropInConfigFiles: true,\n    loaders: defaultLoaders,\n    transform: identity,\n    cache: true,\n    metaConfigFilePath: null\n  });\n  const metaConfig = metaExplorer.searchSync();\n  if (!metaConfig) {\n    return normalizeOptions(moduleName, options);\n  }\n  if ((_metaConfig$config = metaConfig.config) !== null && _metaConfig$config !== void 0 && _metaConfig$config.loaders) {\n    throw new Error('Can not specify loaders in meta config file');\n  }\n  const overrideOptions = metaConfig.config ?? {};\n  if (overrideOptions.searchPlaces) {\n    overrideOptions.searchPlaces = replaceMetaPlaceholders(overrideOptions.searchPlaces, moduleName);\n  }\n  overrideOptions.metaConfigFilePath = metaConfig.filepath;\n  const mergedOptions = {\n    ...options,\n    ...overrideOptions\n  };\n  return normalizeOptions(moduleName, mergedOptions);\n}\nfunction cosmiconfig(moduleName, options = {}) {\n  const normalizedOptions = getExplorerOptions(moduleName, options);\n  const explorer = new _Explorer.Explorer(normalizedOptions);\n  return {\n    search: explorer.search.bind(explorer),\n    load: explorer.load.bind(explorer),\n    clearLoadCache: explorer.clearLoadCache.bind(explorer),\n    clearSearchCache: explorer.clearSearchCache.bind(explorer),\n    clearCaches: explorer.clearCaches.bind(explorer)\n  };\n} // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n\nfunction cosmiconfigSync(moduleName, options = {}) {\n  const normalizedOptions = getExplorerOptions(moduleName, options);\n  const explorerSync = new _ExplorerSync.ExplorerSync(normalizedOptions);\n  return {\n    search: explorerSync.searchSync.bind(explorerSync),\n    load: explorerSync.loadSync.bind(explorerSync),\n    clearLoadCache: explorerSync.clearLoadCache.bind(explorerSync),\n    clearSearchCache: explorerSync.clearSearchCache.bind(explorerSync),\n    clearCaches: explorerSync.clearCaches.bind(explorerSync)\n  };\n}\nfunction normalizeOptions(moduleName, options) {\n  const defaults = {\n    packageProp: moduleName,\n    searchPlaces: ['package.json', `.${moduleName}rc`, `.${moduleName}rc.json`, `.${moduleName}rc.yaml`, `.${moduleName}rc.yml`, `.${moduleName}rc.js`, `.${moduleName}rc.cjs`, `.config/${moduleName}rc`, `.config/${moduleName}rc.json`, `.config/${moduleName}rc.yaml`, `.config/${moduleName}rc.yml`, `.config/${moduleName}rc.js`, `.config/${moduleName}rc.cjs`, `${moduleName}.config.js`, `${moduleName}.config.cjs`],\n    ignoreEmptySearchPlaces: true,\n    stopDir: _os.default.homedir(),\n    cache: true,\n    transform: identity,\n    loaders: defaultLoaders,\n    metaConfigFilePath: null\n  };\n  let loaders = {\n    ...defaults.loaders\n  };\n  if (options.loaders) {\n    Object.assign(loaders, options.loaders);\n  }\n  return {\n    ...defaults,\n    ...options,\n    loaders\n  };\n}","map":{"version":3,"names":["_os","_interopRequireDefault","require","_Explorer","_ExplorerSync","_loaders","_types","metaSearchPlaces","defaultLoaders","Object","freeze","loaders","loadJs","loadJson","loadYaml","noExt","identity","x","replaceMetaPlaceholders","paths","moduleName","map","path","replace","getExplorerOptions","options","_metaConfig$config","metaExplorer","ExplorerSync","packageProp","stopDir","process","cwd","searchPlaces","ignoreEmptySearchPlaces","usePackagePropInConfigFiles","transform","cache","metaConfigFilePath","metaConfig","searchSync","normalizeOptions","config","Error","overrideOptions","filepath","mergedOptions","cosmiconfig","normalizedOptions","explorer","Explorer","search","bind","load","clearLoadCache","clearSearchCache","clearCaches","cosmiconfigSync","explorerSync","loadSync","defaults","default","homedir","assign"],"sources":["/Users/mayamagavi/instalily/case-study/node_modules/puppeteer/node_modules/cosmiconfig/src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport os from 'os';\nimport { Explorer } from './Explorer';\nimport { ExplorerSync } from './ExplorerSync';\nimport { loaders } from './loaders';\nimport {\n  Config,\n  CosmiconfigResult,\n  ExplorerOptions,\n  ExplorerOptionsSync,\n  Loaders,\n  LoadersSync,\n} from './types';\n\ntype LoaderResult = Config | null;\nexport type Loader =\n  | ((filepath: string, content: string) => Promise<LoaderResult>)\n  | LoaderSync;\nexport type LoaderSync = (filepath: string, content: string) => LoaderResult;\n\nexport type Transform =\n  | ((CosmiconfigResult: CosmiconfigResult) => Promise<CosmiconfigResult>)\n  | TransformSync;\n\nexport type TransformSync = (\n  CosmiconfigResult: CosmiconfigResult,\n) => CosmiconfigResult;\n\ninterface OptionsBase {\n  packageProp?: string | Array<string>;\n  searchPlaces?: Array<string>;\n  ignoreEmptySearchPlaces?: boolean;\n  stopDir?: string;\n  cache?: boolean;\n}\n\nexport interface Options extends OptionsBase {\n  loaders?: Loaders;\n  transform?: Transform;\n}\n\nexport interface OptionsSync extends OptionsBase {\n  loaders?: LoadersSync;\n  transform?: TransformSync;\n}\n\nexport interface PublicExplorerBase {\n  clearLoadCache: () => void;\n  clearSearchCache: () => void;\n  clearCaches: () => void;\n}\n\nexport interface PublicExplorer extends PublicExplorerBase {\n  search: (searchFrom?: string) => Promise<CosmiconfigResult>;\n  load: (filepath: string) => Promise<CosmiconfigResult>;\n}\n\nexport interface PublicExplorerSync extends PublicExplorerBase {\n  search: (searchFrom?: string) => CosmiconfigResult;\n  load: (filepath: string) => CosmiconfigResult;\n}\n\n// this needs to be hardcoded, as this is intended for end users, who can't supply options at this point\nexport const metaSearchPlaces = [\n  'package.json',\n  '.config.json',\n  '.config.yaml',\n  '.config.yml',\n  '.config.js',\n  '.config.cjs',\n];\n\n// do not allow mutation of default loaders. Make sure it is set inside options\nconst defaultLoaders = Object.freeze({\n  '.cjs': loaders.loadJs,\n  '.js': loaders.loadJs,\n  '.json': loaders.loadJson,\n  '.yaml': loaders.loadYaml,\n  '.yml': loaders.loadYaml,\n  noExt: loaders.loadYaml,\n} as const);\n\nconst identity: TransformSync = function identity(x) {\n  return x;\n};\n\nfunction replaceMetaPlaceholders(\n  paths: Array<string>,\n  moduleName: string,\n): Array<string> {\n  return paths.map((path) => path.replace('{name}', moduleName));\n}\n\nfunction getExplorerOptions(\n  moduleName: string,\n  options: OptionsSync,\n): ExplorerOptionsSync;\nfunction getExplorerOptions(\n  moduleName: string,\n  options: Options,\n): ExplorerOptions;\nfunction getExplorerOptions(\n  moduleName: string,\n  options: Options | OptionsSync,\n): ExplorerOptions | ExplorerOptionsSync {\n  const metaExplorer = new ExplorerSync({\n    packageProp: 'cosmiconfig',\n    stopDir: process.cwd(),\n    searchPlaces: metaSearchPlaces,\n    ignoreEmptySearchPlaces: false,\n    usePackagePropInConfigFiles: true,\n    loaders: defaultLoaders,\n    transform: identity,\n    cache: true,\n    metaConfigFilePath: null,\n  });\n  const metaConfig = metaExplorer.searchSync();\n\n  if (!metaConfig) {\n    return normalizeOptions(moduleName, options);\n  }\n\n  if (metaConfig.config?.loaders) {\n    throw new Error('Can not specify loaders in meta config file');\n  }\n\n  const overrideOptions = metaConfig.config ?? {};\n\n  if (overrideOptions.searchPlaces) {\n    overrideOptions.searchPlaces = replaceMetaPlaceholders(\n      overrideOptions.searchPlaces,\n      moduleName,\n    );\n  }\n\n  overrideOptions.metaConfigFilePath = metaConfig.filepath;\n\n  const mergedOptions = { ...options, ...overrideOptions };\n\n  return normalizeOptions(moduleName, mergedOptions);\n}\n\nfunction cosmiconfig(\n  moduleName: string,\n  options: Options = {},\n): PublicExplorer {\n  const normalizedOptions: ExplorerOptions = getExplorerOptions(\n    moduleName,\n    options,\n  );\n\n  const explorer = new Explorer(normalizedOptions);\n\n  return {\n    search: explorer.search.bind(explorer),\n    load: explorer.load.bind(explorer),\n    clearLoadCache: explorer.clearLoadCache.bind(explorer),\n    clearSearchCache: explorer.clearSearchCache.bind(explorer),\n    clearCaches: explorer.clearCaches.bind(explorer),\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction cosmiconfigSync(\n  moduleName: string,\n  options: OptionsSync = {},\n): PublicExplorerSync {\n  const normalizedOptions: ExplorerOptionsSync = getExplorerOptions(\n    moduleName,\n    options,\n  );\n\n  const explorerSync = new ExplorerSync(normalizedOptions);\n\n  return {\n    search: explorerSync.searchSync.bind(explorerSync),\n    load: explorerSync.loadSync.bind(explorerSync),\n    clearLoadCache: explorerSync.clearLoadCache.bind(explorerSync),\n    clearSearchCache: explorerSync.clearSearchCache.bind(explorerSync),\n    clearCaches: explorerSync.clearCaches.bind(explorerSync),\n  };\n}\n\nfunction normalizeOptions(\n  moduleName: string,\n  options: OptionsSync,\n): ExplorerOptionsSync;\nfunction normalizeOptions(\n  moduleName: string,\n  options: Options,\n): ExplorerOptions;\nfunction normalizeOptions(\n  moduleName: string,\n  options: Options | OptionsSync,\n): ExplorerOptions | ExplorerOptionsSync {\n  const defaults: ExplorerOptions | ExplorerOptionsSync = {\n    packageProp: moduleName,\n    searchPlaces: [\n      'package.json',\n      `.${moduleName}rc`,\n      `.${moduleName}rc.json`,\n      `.${moduleName}rc.yaml`,\n      `.${moduleName}rc.yml`,\n      `.${moduleName}rc.js`,\n      `.${moduleName}rc.cjs`,\n      `.config/${moduleName}rc`,\n      `.config/${moduleName}rc.json`,\n      `.config/${moduleName}rc.yaml`,\n      `.config/${moduleName}rc.yml`,\n      `.config/${moduleName}rc.js`,\n      `.config/${moduleName}rc.cjs`,\n      `${moduleName}.config.js`,\n      `${moduleName}.config.cjs`,\n    ],\n    ignoreEmptySearchPlaces: true,\n    stopDir: os.homedir(),\n    cache: true,\n    transform: identity,\n    loaders: defaultLoaders,\n    metaConfigFilePath: null,\n  };\n\n  let loaders = {\n    ...defaults.loaders,\n  };\n\n  if (options.loaders) {\n    Object.assign(loaders, options.loaders);\n  }\n\n  return {\n    ...defaults,\n    ...options,\n    loaders,\n  };\n}\n\nexport { cosmiconfig, cosmiconfigSync, defaultLoaders };\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}