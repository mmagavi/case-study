{"ast":null,"code":"/**\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Accessibility_client, _AXNode_instances, _AXNode_richlyEditable, _AXNode_editable, _AXNode_focusable, _AXNode_hidden, _AXNode_name, _AXNode_role, _AXNode_ignored, _AXNode_cachedHasFocusableChild, _AXNode_isPlainTextField, _AXNode_isTextOnlyObject, _AXNode_hasFocusableChild;\n/**\n * The Accessibility class provides methods for inspecting Chromium's\n * accessibility tree. The accessibility tree is used by assistive technology\n * such as {@link https://en.wikipedia.org/wiki/Screen_reader | screen readers} or\n * {@link https://en.wikipedia.org/wiki/Switch_access | switches}.\n *\n * @remarks\n *\n * Accessibility is a very platform-specific thing. On different platforms,\n * there are different screen readers that might have wildly different output.\n *\n * Blink - Chrome's rendering engine - has a concept of \"accessibility tree\",\n * which is then translated into different platform-specific APIs. Accessibility\n * namespace gives users access to the Blink Accessibility Tree.\n *\n * Most of the accessibility tree gets filtered out when converting from Blink\n * AX Tree to Platform-specific AX-Tree or by assistive technologies themselves.\n * By default, Puppeteer tries to approximate this filtering, exposing only\n * the \"interesting\" nodes of the tree.\n *\n * @public\n */\nexport class Accessibility {\n  /**\n   * @internal\n   */\n  constructor(client) {\n    _Accessibility_client.set(this, void 0);\n    __classPrivateFieldSet(this, _Accessibility_client, client, \"f\");\n  }\n  /**\n   * Captures the current state of the accessibility tree.\n   * The returned object represents the root accessible node of the page.\n   *\n   * @remarks\n   *\n   * **NOTE** The Chromium accessibility tree contains nodes that go unused on\n   * most platforms and by most screen readers. Puppeteer will discard them as\n   * well for an easier to process tree, unless `interestingOnly` is set to\n   * `false`.\n   *\n   * @example\n   * An example of dumping the entire accessibility tree:\n   *\n   * ```ts\n   * const snapshot = await page.accessibility.snapshot();\n   * console.log(snapshot);\n   * ```\n   *\n   * @example\n   * An example of logging the focused node's name:\n   *\n   * ```ts\n   * const snapshot = await page.accessibility.snapshot();\n   * const node = findFocusedNode(snapshot);\n   * console.log(node && node.name);\n   *\n   * function findFocusedNode(node) {\n   *   if (node.focused) return node;\n   *   for (const child of node.children || []) {\n   *     const foundNode = findFocusedNode(child);\n   *     return foundNode;\n   *   }\n   *   return null;\n   * }\n   * ```\n   *\n   * @returns An AXNode object representing the snapshot.\n   */\n  async snapshot(options = {}) {\n    var _a, _b;\n    const {\n      interestingOnly = true,\n      root = null\n    } = options;\n    const {\n      nodes\n    } = await __classPrivateFieldGet(this, _Accessibility_client, \"f\").send('Accessibility.getFullAXTree');\n    let backendNodeId;\n    if (root) {\n      const {\n        node\n      } = await __classPrivateFieldGet(this, _Accessibility_client, \"f\").send('DOM.describeNode', {\n        objectId: root.id\n      });\n      backendNodeId = node.backendNodeId;\n    }\n    const defaultRoot = AXNode.createTree(nodes);\n    let needle = defaultRoot;\n    if (backendNodeId) {\n      needle = defaultRoot.find(node => {\n        return node.payload.backendDOMNodeId === backendNodeId;\n      });\n      if (!needle) {\n        return null;\n      }\n    }\n    if (!interestingOnly) {\n      return (_a = this.serializeTree(needle)[0]) !== null && _a !== void 0 ? _a : null;\n    }\n    const interestingNodes = new Set();\n    this.collectInterestingNodes(interestingNodes, defaultRoot, false);\n    if (!interestingNodes.has(needle)) {\n      return null;\n    }\n    return (_b = this.serializeTree(needle, interestingNodes)[0]) !== null && _b !== void 0 ? _b : null;\n  }\n  serializeTree(node, interestingNodes) {\n    const children = [];\n    for (const child of node.children) {\n      children.push(...this.serializeTree(child, interestingNodes));\n    }\n    if (interestingNodes && !interestingNodes.has(node)) {\n      return children;\n    }\n    const serializedNode = node.serialize();\n    if (children.length) {\n      serializedNode.children = children;\n    }\n    return [serializedNode];\n  }\n  collectInterestingNodes(collection, node, insideControl) {\n    if (node.isInteresting(insideControl)) {\n      collection.add(node);\n    }\n    if (node.isLeafNode()) {\n      return;\n    }\n    insideControl = insideControl || node.isControl();\n    for (const child of node.children) {\n      this.collectInterestingNodes(collection, child, insideControl);\n    }\n  }\n}\n_Accessibility_client = new WeakMap();\nclass AXNode {\n  constructor(payload) {\n    _AXNode_instances.add(this);\n    this.children = [];\n    _AXNode_richlyEditable.set(this, false);\n    _AXNode_editable.set(this, false);\n    _AXNode_focusable.set(this, false);\n    _AXNode_hidden.set(this, false);\n    _AXNode_name.set(this, void 0);\n    _AXNode_role.set(this, void 0);\n    _AXNode_ignored.set(this, void 0);\n    _AXNode_cachedHasFocusableChild.set(this, void 0);\n    this.payload = payload;\n    __classPrivateFieldSet(this, _AXNode_name, this.payload.name ? this.payload.name.value : '', \"f\");\n    __classPrivateFieldSet(this, _AXNode_role, this.payload.role ? this.payload.role.value : 'Unknown', \"f\");\n    __classPrivateFieldSet(this, _AXNode_ignored, this.payload.ignored, \"f\");\n    for (const property of this.payload.properties || []) {\n      if (property.name === 'editable') {\n        __classPrivateFieldSet(this, _AXNode_richlyEditable, property.value.value === 'richtext', \"f\");\n        __classPrivateFieldSet(this, _AXNode_editable, true, \"f\");\n      }\n      if (property.name === 'focusable') {\n        __classPrivateFieldSet(this, _AXNode_focusable, property.value.value, \"f\");\n      }\n      if (property.name === 'hidden') {\n        __classPrivateFieldSet(this, _AXNode_hidden, property.value.value, \"f\");\n      }\n    }\n  }\n  find(predicate) {\n    if (predicate(this)) {\n      return this;\n    }\n    for (const child of this.children) {\n      const result = child.find(predicate);\n      if (result) {\n        return result;\n      }\n    }\n    return null;\n  }\n  isLeafNode() {\n    if (!this.children.length) {\n      return true;\n    }\n    // These types of objects may have children that we use as internal\n    // implementation details, but we want to expose them as leaves to platform\n    // accessibility APIs because screen readers might be confused if they find\n    // any children.\n    if (__classPrivateFieldGet(this, _AXNode_instances, \"m\", _AXNode_isPlainTextField).call(this) || __classPrivateFieldGet(this, _AXNode_instances, \"m\", _AXNode_isTextOnlyObject).call(this)) {\n      return true;\n    }\n    // Roles whose children are only presentational according to the ARIA and\n    // HTML5 Specs should be hidden from screen readers.\n    // (Note that whilst ARIA buttons can have only presentational children, HTML5\n    // buttons are allowed to have content.)\n    switch (__classPrivateFieldGet(this, _AXNode_role, \"f\")) {\n      case 'doc-cover':\n      case 'graphics-symbol':\n      case 'img':\n      case 'Meter':\n      case 'scrollbar':\n      case 'slider':\n      case 'separator':\n      case 'progressbar':\n        return true;\n      default:\n        break;\n    }\n    // Here and below: Android heuristics\n    if (__classPrivateFieldGet(this, _AXNode_instances, \"m\", _AXNode_hasFocusableChild).call(this)) {\n      return false;\n    }\n    if (__classPrivateFieldGet(this, _AXNode_focusable, \"f\") && __classPrivateFieldGet(this, _AXNode_name, \"f\")) {\n      return true;\n    }\n    if (__classPrivateFieldGet(this, _AXNode_role, \"f\") === 'heading' && __classPrivateFieldGet(this, _AXNode_name, \"f\")) {\n      return true;\n    }\n    return false;\n  }\n  isControl() {\n    switch (__classPrivateFieldGet(this, _AXNode_role, \"f\")) {\n      case 'button':\n      case 'checkbox':\n      case 'ColorWell':\n      case 'combobox':\n      case 'DisclosureTriangle':\n      case 'listbox':\n      case 'menu':\n      case 'menubar':\n      case 'menuitem':\n      case 'menuitemcheckbox':\n      case 'menuitemradio':\n      case 'radio':\n      case 'scrollbar':\n      case 'searchbox':\n      case 'slider':\n      case 'spinbutton':\n      case 'switch':\n      case 'tab':\n      case 'textbox':\n      case 'tree':\n      case 'treeitem':\n        return true;\n      default:\n        return false;\n    }\n  }\n  isInteresting(insideControl) {\n    const role = __classPrivateFieldGet(this, _AXNode_role, \"f\");\n    if (role === 'Ignored' || __classPrivateFieldGet(this, _AXNode_hidden, \"f\") || __classPrivateFieldGet(this, _AXNode_ignored, \"f\")) {\n      return false;\n    }\n    if (__classPrivateFieldGet(this, _AXNode_focusable, \"f\") || __classPrivateFieldGet(this, _AXNode_richlyEditable, \"f\")) {\n      return true;\n    }\n    // If it's not focusable but has a control role, then it's interesting.\n    if (this.isControl()) {\n      return true;\n    }\n    // A non focusable child of a control is not interesting\n    if (insideControl) {\n      return false;\n    }\n    return this.isLeafNode() && !!__classPrivateFieldGet(this, _AXNode_name, \"f\");\n  }\n  serialize() {\n    const properties = new Map();\n    for (const property of this.payload.properties || []) {\n      properties.set(property.name.toLowerCase(), property.value.value);\n    }\n    if (this.payload.name) {\n      properties.set('name', this.payload.name.value);\n    }\n    if (this.payload.value) {\n      properties.set('value', this.payload.value.value);\n    }\n    if (this.payload.description) {\n      properties.set('description', this.payload.description.value);\n    }\n    const node = {\n      role: __classPrivateFieldGet(this, _AXNode_role, \"f\")\n    };\n    const userStringProperties = ['name', 'value', 'description', 'keyshortcuts', 'roledescription', 'valuetext'];\n    const getUserStringPropertyValue = key => {\n      return properties.get(key);\n    };\n    for (const userStringProperty of userStringProperties) {\n      if (!properties.has(userStringProperty)) {\n        continue;\n      }\n      node[userStringProperty] = getUserStringPropertyValue(userStringProperty);\n    }\n    const booleanProperties = ['disabled', 'expanded', 'focused', 'modal', 'multiline', 'multiselectable', 'readonly', 'required', 'selected'];\n    const getBooleanPropertyValue = key => {\n      return properties.get(key);\n    };\n    for (const booleanProperty of booleanProperties) {\n      // RootWebArea's treat focus differently than other nodes. They report whether\n      // their frame  has focus, not whether focus is specifically on the root\n      // node.\n      if (booleanProperty === 'focused' && __classPrivateFieldGet(this, _AXNode_role, \"f\") === 'RootWebArea') {\n        continue;\n      }\n      const value = getBooleanPropertyValue(booleanProperty);\n      if (!value) {\n        continue;\n      }\n      node[booleanProperty] = getBooleanPropertyValue(booleanProperty);\n    }\n    const tristateProperties = ['checked', 'pressed'];\n    for (const tristateProperty of tristateProperties) {\n      if (!properties.has(tristateProperty)) {\n        continue;\n      }\n      const value = properties.get(tristateProperty);\n      node[tristateProperty] = value === 'mixed' ? 'mixed' : value === 'true' ? true : false;\n    }\n    const numericalProperties = ['level', 'valuemax', 'valuemin'];\n    const getNumericalPropertyValue = key => {\n      return properties.get(key);\n    };\n    for (const numericalProperty of numericalProperties) {\n      if (!properties.has(numericalProperty)) {\n        continue;\n      }\n      node[numericalProperty] = getNumericalPropertyValue(numericalProperty);\n    }\n    const tokenProperties = ['autocomplete', 'haspopup', 'invalid', 'orientation'];\n    const getTokenPropertyValue = key => {\n      return properties.get(key);\n    };\n    for (const tokenProperty of tokenProperties) {\n      const value = getTokenPropertyValue(tokenProperty);\n      if (!value || value === 'false') {\n        continue;\n      }\n      node[tokenProperty] = getTokenPropertyValue(tokenProperty);\n    }\n    return node;\n  }\n  static createTree(payloads) {\n    const nodeById = new Map();\n    for (const payload of payloads) {\n      nodeById.set(payload.nodeId, new AXNode(payload));\n    }\n    for (const node of nodeById.values()) {\n      for (const childId of node.payload.childIds || []) {\n        const child = nodeById.get(childId);\n        if (child) {\n          node.children.push(child);\n        }\n      }\n    }\n    return nodeById.values().next().value;\n  }\n}\n_AXNode_richlyEditable = new WeakMap(), _AXNode_editable = new WeakMap(), _AXNode_focusable = new WeakMap(), _AXNode_hidden = new WeakMap(), _AXNode_name = new WeakMap(), _AXNode_role = new WeakMap(), _AXNode_ignored = new WeakMap(), _AXNode_cachedHasFocusableChild = new WeakMap(), _AXNode_instances = new WeakSet(), _AXNode_isPlainTextField = function _AXNode_isPlainTextField() {\n  if (__classPrivateFieldGet(this, _AXNode_richlyEditable, \"f\")) {\n    return false;\n  }\n  if (__classPrivateFieldGet(this, _AXNode_editable, \"f\")) {\n    return true;\n  }\n  return __classPrivateFieldGet(this, _AXNode_role, \"f\") === 'textbox' || __classPrivateFieldGet(this, _AXNode_role, \"f\") === 'searchbox';\n}, _AXNode_isTextOnlyObject = function _AXNode_isTextOnlyObject() {\n  const role = __classPrivateFieldGet(this, _AXNode_role, \"f\");\n  return role === 'LineBreak' || role === 'text' || role === 'InlineTextBox';\n}, _AXNode_hasFocusableChild = function _AXNode_hasFocusableChild() {\n  if (__classPrivateFieldGet(this, _AXNode_cachedHasFocusableChild, \"f\") === undefined) {\n    __classPrivateFieldSet(this, _AXNode_cachedHasFocusableChild, false, \"f\");\n    for (const child of this.children) {\n      if (__classPrivateFieldGet(child, _AXNode_focusable, \"f\") || __classPrivateFieldGet(child, _AXNode_instances, \"m\", _AXNode_hasFocusableChild).call(child)) {\n        __classPrivateFieldSet(this, _AXNode_cachedHasFocusableChild, true, \"f\");\n        break;\n      }\n    }\n  }\n  return __classPrivateFieldGet(this, _AXNode_cachedHasFocusableChild, \"f\");\n};","map":{"version":3,"names":["Accessibility","constructor","client","_Accessibility_client","set","__classPrivateFieldSet","snapshot","options","interestingOnly","root","nodes","__classPrivateFieldGet","send","backendNodeId","node","objectId","id","defaultRoot","AXNode","createTree","needle","find","payload","backendDOMNodeId","_a","serializeTree","interestingNodes","Set","collectInterestingNodes","has","_b","children","child","push","serializedNode","serialize","length","collection","insideControl","isInteresting","add","isLeafNode","isControl","_AXNode_richlyEditable","_AXNode_editable","_AXNode_focusable","_AXNode_hidden","_AXNode_name","_AXNode_role","_AXNode_ignored","_AXNode_cachedHasFocusableChild","name","value","role","ignored","property","properties","predicate","result","_AXNode_instances","_AXNode_isPlainTextField","call","_AXNode_isTextOnlyObject","_AXNode_hasFocusableChild","Map","toLowerCase","description","userStringProperties","getUserStringPropertyValue","key","get","userStringProperty","booleanProperties","getBooleanPropertyValue","booleanProperty","tristateProperties","tristateProperty","numericalProperties","getNumericalPropertyValue","numericalProperty","tokenProperties","getTokenPropertyValue","tokenProperty","payloads","nodeById","nodeId","values","childId","childIds","next","undefined"],"sources":["../../../../src/common/Accessibility.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}