{"ast":null,"code":"/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Keyboard_instances, _Keyboard_client, _Keyboard_pressedKeys, _Keyboard_modifierBit, _Keyboard_keyDescriptionForString, _Mouse_instances, _Mouse_client, _Mouse_keyboard, _Mouse__state, _Mouse_state_get, _Mouse_transactions, _Mouse_createTransaction, _Mouse_withTransaction, _Touchscreen_client, _Touchscreen_keyboard;\nimport { assert } from '../util/assert.js';\nimport { _keyDefinitions } from './USKeyboardLayout.js';\n/**\n * Keyboard provides an api for managing a virtual keyboard.\n * The high level api is {@link Keyboard.\"type\"},\n * which takes raw characters and generates proper keydown, keypress/input,\n * and keyup events on your page.\n *\n * @remarks\n * For finer control, you can use {@link Keyboard.down},\n * {@link Keyboard.up}, and {@link Keyboard.sendCharacter}\n * to manually fire events as if they were generated from a real keyboard.\n *\n * On macOS, keyboard shortcuts like `⌘ A` -\\> Select All do not work.\n * See {@link https://github.com/puppeteer/puppeteer/issues/1313 | #1313}.\n *\n * @example\n * An example of holding down `Shift` in order to select and delete some text:\n *\n * ```ts\n * await page.keyboard.type('Hello World!');\n * await page.keyboard.press('ArrowLeft');\n *\n * await page.keyboard.down('Shift');\n * for (let i = 0; i < ' World'.length; i++)\n *   await page.keyboard.press('ArrowLeft');\n * await page.keyboard.up('Shift');\n *\n * await page.keyboard.press('Backspace');\n * // Result text will end up saying 'Hello!'\n * ```\n *\n * @example\n * An example of pressing `A`\n *\n * ```ts\n * await page.keyboard.down('Shift');\n * await page.keyboard.press('KeyA');\n * await page.keyboard.up('Shift');\n * ```\n *\n * @public\n */\nexport class Keyboard {\n  /**\n   * @internal\n   */\n  constructor(client) {\n    _Keyboard_instances.add(this);\n    _Keyboard_client.set(this, void 0);\n    _Keyboard_pressedKeys.set(this, new Set());\n    /**\n     * @internal\n     */\n    this._modifiers = 0;\n    __classPrivateFieldSet(this, _Keyboard_client, client, \"f\");\n  }\n  /**\n   * Dispatches a `keydown` event.\n   *\n   * @remarks\n   * If `key` is a single character and no modifier keys besides `Shift`\n   * are being held down, a `keypress`/`input` event will also generated.\n   * The `text` option can be specified to force an input event to be generated.\n   * If `key` is a modifier key, `Shift`, `Meta`, `Control`, or `Alt`,\n   * subsequent key presses will be sent with that modifier active.\n   * To release the modifier key, use {@link Keyboard.up}.\n   *\n   * After the key is pressed once, subsequent calls to\n   * {@link Keyboard.down} will have\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat | repeat}\n   * set to true. To release the key, use {@link Keyboard.up}.\n   *\n   * Modifier keys DO influence {@link Keyboard.down}.\n   * Holding down `Shift` will type the text in upper case.\n   *\n   * @param key - Name of key to press, such as `ArrowLeft`.\n   * See {@link KeyInput} for a list of all key names.\n   *\n   * @param options - An object of options. Accepts text which, if specified,\n   * generates an input event with this text. Accepts commands which, if specified,\n   * is the commands of keyboard shortcuts,\n   * see {@link https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h | Chromium Source Code} for valid command names.\n   */\n  async down(key, options = {\n    text: undefined,\n    commands: []\n  }) {\n    const description = __classPrivateFieldGet(this, _Keyboard_instances, \"m\", _Keyboard_keyDescriptionForString).call(this, key);\n    const autoRepeat = __classPrivateFieldGet(this, _Keyboard_pressedKeys, \"f\").has(description.code);\n    __classPrivateFieldGet(this, _Keyboard_pressedKeys, \"f\").add(description.code);\n    this._modifiers |= __classPrivateFieldGet(this, _Keyboard_instances, \"m\", _Keyboard_modifierBit).call(this, description.key);\n    const text = options.text === undefined ? description.text : options.text;\n    await __classPrivateFieldGet(this, _Keyboard_client, \"f\").send('Input.dispatchKeyEvent', {\n      type: text ? 'keyDown' : 'rawKeyDown',\n      modifiers: this._modifiers,\n      windowsVirtualKeyCode: description.keyCode,\n      code: description.code,\n      key: description.key,\n      text: text,\n      unmodifiedText: text,\n      autoRepeat,\n      location: description.location,\n      isKeypad: description.location === 3,\n      commands: options.commands\n    });\n  }\n  /**\n   * Dispatches a `keyup` event.\n   *\n   * @param key - Name of key to release, such as `ArrowLeft`.\n   * See {@link KeyInput | KeyInput}\n   * for a list of all key names.\n   */\n  async up(key) {\n    const description = __classPrivateFieldGet(this, _Keyboard_instances, \"m\", _Keyboard_keyDescriptionForString).call(this, key);\n    this._modifiers &= ~__classPrivateFieldGet(this, _Keyboard_instances, \"m\", _Keyboard_modifierBit).call(this, description.key);\n    __classPrivateFieldGet(this, _Keyboard_pressedKeys, \"f\").delete(description.code);\n    await __classPrivateFieldGet(this, _Keyboard_client, \"f\").send('Input.dispatchKeyEvent', {\n      type: 'keyUp',\n      modifiers: this._modifiers,\n      key: description.key,\n      windowsVirtualKeyCode: description.keyCode,\n      code: description.code,\n      location: description.location\n    });\n  }\n  /**\n   * Dispatches a `keypress` and `input` event.\n   * This does not send a `keydown` or `keyup` event.\n   *\n   * @remarks\n   * Modifier keys DO NOT effect {@link Keyboard.sendCharacter | Keyboard.sendCharacter}.\n   * Holding down `Shift` will not type the text in upper case.\n   *\n   * @example\n   *\n   * ```ts\n   * page.keyboard.sendCharacter('嗨');\n   * ```\n   *\n   * @param char - Character to send into the page.\n   */\n  async sendCharacter(char) {\n    await __classPrivateFieldGet(this, _Keyboard_client, \"f\").send('Input.insertText', {\n      text: char\n    });\n  }\n  charIsKey(char) {\n    return !!_keyDefinitions[char];\n  }\n  /**\n   * Sends a `keydown`, `keypress`/`input`,\n   * and `keyup` event for each character in the text.\n   *\n   * @remarks\n   * To press a special key, like `Control` or `ArrowDown`,\n   * use {@link Keyboard.press}.\n   *\n   * Modifier keys DO NOT effect `keyboard.type`.\n   * Holding down `Shift` will not type the text in upper case.\n   *\n   * @example\n   *\n   * ```ts\n   * await page.keyboard.type('Hello'); // Types instantly\n   * await page.keyboard.type('World', {delay: 100}); // Types slower, like a user\n   * ```\n   *\n   * @param text - A text to type into a focused element.\n   * @param options - An object of options. Accepts delay which,\n   * if specified, is the time to wait between `keydown` and `keyup` in milliseconds.\n   * Defaults to 0.\n   */\n  async type(text, options = {}) {\n    const delay = options.delay || undefined;\n    for (const char of text) {\n      if (this.charIsKey(char)) {\n        await this.press(char, {\n          delay\n        });\n      } else {\n        if (delay) {\n          await new Promise(f => {\n            return setTimeout(f, delay);\n          });\n        }\n        await this.sendCharacter(char);\n      }\n    }\n  }\n  /**\n   * Shortcut for {@link Keyboard.down}\n   * and {@link Keyboard.up}.\n   *\n   * @remarks\n   * If `key` is a single character and no modifier keys besides `Shift`\n   * are being held down, a `keypress`/`input` event will also generated.\n   * The `text` option can be specified to force an input event to be generated.\n   *\n   * Modifier keys DO effect {@link Keyboard.press}.\n   * Holding down `Shift` will type the text in upper case.\n   *\n   * @param key - Name of key to press, such as `ArrowLeft`.\n   * See {@link KeyInput} for a list of all key names.\n   *\n   * @param options - An object of options. Accepts text which, if specified,\n   * generates an input event with this text. Accepts delay which,\n   * if specified, is the time to wait between `keydown` and `keyup` in milliseconds.\n   * Defaults to 0. Accepts commands which, if specified,\n   * is the commands of keyboard shortcuts,\n   * see {@link https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h | Chromium Source Code} for valid command names.\n   */\n  async press(key, options = {}) {\n    const {\n      delay = null\n    } = options;\n    await this.down(key, options);\n    if (delay) {\n      await new Promise(f => {\n        return setTimeout(f, options.delay);\n      });\n    }\n    await this.up(key);\n  }\n}\n_Keyboard_client = new WeakMap(), _Keyboard_pressedKeys = new WeakMap(), _Keyboard_instances = new WeakSet(), _Keyboard_modifierBit = function _Keyboard_modifierBit(key) {\n  if (key === 'Alt') {\n    return 1;\n  }\n  if (key === 'Control') {\n    return 2;\n  }\n  if (key === 'Meta') {\n    return 4;\n  }\n  if (key === 'Shift') {\n    return 8;\n  }\n  return 0;\n}, _Keyboard_keyDescriptionForString = function _Keyboard_keyDescriptionForString(keyString) {\n  const shift = this._modifiers & 8;\n  const description = {\n    key: '',\n    keyCode: 0,\n    code: '',\n    text: '',\n    location: 0\n  };\n  const definition = _keyDefinitions[keyString];\n  assert(definition, `Unknown key: \"${keyString}\"`);\n  if (definition.key) {\n    description.key = definition.key;\n  }\n  if (shift && definition.shiftKey) {\n    description.key = definition.shiftKey;\n  }\n  if (definition.keyCode) {\n    description.keyCode = definition.keyCode;\n  }\n  if (shift && definition.shiftKeyCode) {\n    description.keyCode = definition.shiftKeyCode;\n  }\n  if (definition.code) {\n    description.code = definition.code;\n  }\n  if (definition.location) {\n    description.location = definition.location;\n  }\n  if (description.key.length === 1) {\n    description.text = description.key;\n  }\n  if (definition.text) {\n    description.text = definition.text;\n  }\n  if (shift && definition.shiftText) {\n    description.text = definition.shiftText;\n  }\n  // if any modifiers besides shift are pressed, no text should be sent\n  if (this._modifiers & ~8) {\n    description.text = '';\n  }\n  return description;\n};\n/**\n * Enum of valid mouse buttons.\n *\n * @public\n */\nexport const MouseButton = Object.freeze({\n  Left: 'left',\n  Right: 'right',\n  Middle: 'middle',\n  Back: 'back',\n  Forward: 'forward'\n});\nconst getFlag = button => {\n  switch (button) {\n    case MouseButton.Left:\n      return 1 /* MouseButtonFlag.Left */;\n    case MouseButton.Right:\n      return 2 /* MouseButtonFlag.Right */;\n    case MouseButton.Middle:\n      return 4 /* MouseButtonFlag.Middle */;\n    case MouseButton.Back:\n      return 8 /* MouseButtonFlag.Back */;\n    case MouseButton.Forward:\n      return 16 /* MouseButtonFlag.Forward */;\n  }\n};\n/**\n * This should match\n * https://source.chromium.org/chromium/chromium/src/+/refs/heads/main:content/browser/renderer_host/input/web_input_event_builders_mac.mm;drc=a61b95c63b0b75c1cfe872d9c8cdf927c226046e;bpv=1;bpt=1;l=221.\n */\nconst getButtonFromPressedButtons = buttons => {\n  if (buttons & 1 /* MouseButtonFlag.Left */) {\n    return MouseButton.Left;\n  } else if (buttons & 2 /* MouseButtonFlag.Right */) {\n    return MouseButton.Right;\n  } else if (buttons & 4 /* MouseButtonFlag.Middle */) {\n    return MouseButton.Middle;\n  } else if (buttons & 8 /* MouseButtonFlag.Back */) {\n    return MouseButton.Back;\n  } else if (buttons & 16 /* MouseButtonFlag.Forward */) {\n    return MouseButton.Forward;\n  }\n  return 'none';\n};\n/**\n * The Mouse class operates in main-frame CSS pixels\n * relative to the top-left corner of the viewport.\n * @remarks\n * Every `page` object has its own Mouse, accessible with [`page.mouse`](#pagemouse).\n *\n * @example\n *\n * ```ts\n * // Using ‘page.mouse’ to trace a 100x100 square.\n * await page.mouse.move(0, 0);\n * await page.mouse.down();\n * await page.mouse.move(0, 100);\n * await page.mouse.move(100, 100);\n * await page.mouse.move(100, 0);\n * await page.mouse.move(0, 0);\n * await page.mouse.up();\n * ```\n *\n * **Note**: The mouse events trigger synthetic `MouseEvent`s.\n * This means that it does not fully replicate the functionality of what a normal user\n * would be able to do with their mouse.\n *\n * For example, dragging and selecting text is not possible using `page.mouse`.\n * Instead, you can use the {@link https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/getSelection | `DocumentOrShadowRoot.getSelection()`} functionality implemented in the platform.\n *\n * @example\n * For example, if you want to select all content between nodes:\n *\n * ```ts\n * await page.evaluate(\n *   (from, to) => {\n *     const selection = from.getRootNode().getSelection();\n *     const range = document.createRange();\n *     range.setStartBefore(from);\n *     range.setEndAfter(to);\n *     selection.removeAllRanges();\n *     selection.addRange(range);\n *   },\n *   fromJSHandle,\n *   toJSHandle\n * );\n * ```\n *\n * If you then would want to copy-paste your selection, you can use the clipboard api:\n *\n * ```ts\n * // The clipboard api does not allow you to copy, unless the tab is focused.\n * await page.bringToFront();\n * await page.evaluate(() => {\n *   // Copy the selected content to the clipboard\n *   document.execCommand('copy');\n *   // Obtain the content of the clipboard as a string\n *   return navigator.clipboard.readText();\n * });\n * ```\n *\n * **Note**: If you want access to the clipboard API,\n * you have to give it permission to do so:\n *\n * ```ts\n * await browser\n *   .defaultBrowserContext()\n *   .overridePermissions('<your origin>', [\n *     'clipboard-read',\n *     'clipboard-write',\n *   ]);\n * ```\n *\n * @public\n */\nexport class Mouse {\n  /**\n   * @internal\n   */\n  constructor(client, keyboard) {\n    _Mouse_instances.add(this);\n    _Mouse_client.set(this, void 0);\n    _Mouse_keyboard.set(this, void 0);\n    _Mouse__state.set(this, {\n      position: {\n        x: 0,\n        y: 0\n      },\n      buttons: 0 /* MouseButtonFlag.None */\n    });\n    // Transactions can run in parallel, so we store each of thme in this array.\n    _Mouse_transactions.set(this, []);\n    __classPrivateFieldSet(this, _Mouse_client, client, \"f\");\n    __classPrivateFieldSet(this, _Mouse_keyboard, keyboard, \"f\");\n  }\n  /**\n   * Moves the mouse to the given coordinate.\n   *\n   * @param x - Horizontal position of the mouse.\n   * @param y - Vertical position of the mouse.\n   * @param options - Options to configure behavior.\n   */\n  async move(x, y, options = {}) {\n    const {\n      steps = 1\n    } = options;\n    const from = __classPrivateFieldGet(this, _Mouse_instances, \"a\", _Mouse_state_get).position;\n    const to = {\n      x,\n      y\n    };\n    for (let i = 1; i <= steps; i++) {\n      await __classPrivateFieldGet(this, _Mouse_instances, \"m\", _Mouse_withTransaction).call(this, updateState => {\n        updateState({\n          position: {\n            x: from.x + (to.x - from.x) * (i / steps),\n            y: from.y + (to.y - from.y) * (i / steps)\n          }\n        });\n        const {\n          buttons,\n          position\n        } = __classPrivateFieldGet(this, _Mouse_instances, \"a\", _Mouse_state_get);\n        return __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchMouseEvent', {\n          type: 'mouseMoved',\n          modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n          buttons,\n          button: getButtonFromPressedButtons(buttons),\n          ...position\n        });\n      });\n    }\n  }\n  /**\n   * Presses the mouse.\n   *\n   * @param options - Options to configure behavior.\n   */\n  async down(options = {}) {\n    const {\n      button = MouseButton.Left,\n      clickCount = 1\n    } = options;\n    const flag = getFlag(button);\n    if (!flag) {\n      throw new Error(`Unsupported mouse button: ${button}`);\n    }\n    if (__classPrivateFieldGet(this, _Mouse_instances, \"a\", _Mouse_state_get).buttons & flag) {\n      throw new Error(`'${button}' is already pressed.`);\n    }\n    await __classPrivateFieldGet(this, _Mouse_instances, \"m\", _Mouse_withTransaction).call(this, updateState => {\n      updateState({\n        buttons: __classPrivateFieldGet(this, _Mouse_instances, \"a\", _Mouse_state_get).buttons | flag\n      });\n      const {\n        buttons,\n        position\n      } = __classPrivateFieldGet(this, _Mouse_instances, \"a\", _Mouse_state_get);\n      return __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchMouseEvent', {\n        type: 'mousePressed',\n        modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n        clickCount,\n        buttons,\n        button,\n        ...position\n      });\n    });\n  }\n  /**\n   * Releases the mouse.\n   *\n   * @param options - Options to configure behavior.\n   */\n  async up(options = {}) {\n    const {\n      button = MouseButton.Left,\n      clickCount = 1\n    } = options;\n    const flag = getFlag(button);\n    if (!flag) {\n      throw new Error(`Unsupported mouse button: ${button}`);\n    }\n    if (!(__classPrivateFieldGet(this, _Mouse_instances, \"a\", _Mouse_state_get).buttons & flag)) {\n      throw new Error(`'${button}' is not pressed.`);\n    }\n    await __classPrivateFieldGet(this, _Mouse_instances, \"m\", _Mouse_withTransaction).call(this, updateState => {\n      updateState({\n        buttons: __classPrivateFieldGet(this, _Mouse_instances, \"a\", _Mouse_state_get).buttons & ~flag\n      });\n      const {\n        buttons,\n        position\n      } = __classPrivateFieldGet(this, _Mouse_instances, \"a\", _Mouse_state_get);\n      return __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchMouseEvent', {\n        type: 'mouseReleased',\n        modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n        clickCount,\n        buttons,\n        button,\n        ...position\n      });\n    });\n  }\n  /**\n   * Shortcut for `mouse.move`, `mouse.down` and `mouse.up`.\n   *\n   * @param x - Horizontal position of the mouse.\n   * @param y - Vertical position of the mouse.\n   * @param options - Options to configure behavior.\n   */\n  async click(x, y, options = {}) {\n    const {\n      delay,\n      count = 1,\n      clickCount = count\n    } = options;\n    if (count < 1) {\n      throw new Error('Click must occur a positive number of times.');\n    }\n    const actions = [this.move(x, y)];\n    if (clickCount === count) {\n      for (let i = 1; i < count; ++i) {\n        actions.push(this.down({\n          ...options,\n          clickCount: i\n        }), this.up({\n          ...options,\n          clickCount: i\n        }));\n      }\n    }\n    actions.push(this.down({\n      ...options,\n      clickCount\n    }));\n    if (typeof delay === 'number') {\n      await Promise.all(actions);\n      actions.length = 0;\n      await new Promise(resolve => {\n        setTimeout(resolve, delay);\n      });\n    }\n    actions.push(this.up({\n      ...options,\n      clickCount\n    }));\n    await Promise.all(actions);\n  }\n  /**\n   * Dispatches a `mousewheel` event.\n   * @param options - Optional: `MouseWheelOptions`.\n   *\n   * @example\n   * An example of zooming into an element:\n   *\n   * ```ts\n   * await page.goto(\n   *   'https://mdn.mozillademos.org/en-US/docs/Web/API/Element/wheel_event$samples/Scaling_an_element_via_the_wheel?revision=1587366'\n   * );\n   *\n   * const elem = await page.$('div');\n   * const boundingBox = await elem.boundingBox();\n   * await page.mouse.move(\n   *   boundingBox.x + boundingBox.width / 2,\n   *   boundingBox.y + boundingBox.height / 2\n   * );\n   *\n   * await page.mouse.wheel({deltaY: -100});\n   * ```\n   */\n  async wheel(options = {}) {\n    const {\n      deltaX = 0,\n      deltaY = 0\n    } = options;\n    const {\n      position,\n      buttons\n    } = __classPrivateFieldGet(this, _Mouse_instances, \"a\", _Mouse_state_get);\n    await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchMouseEvent', {\n      type: 'mouseWheel',\n      pointerType: 'mouse',\n      modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n      deltaY,\n      deltaX,\n      buttons,\n      ...position\n    });\n  }\n  /**\n   * Dispatches a `drag` event.\n   * @param start - starting point for drag\n   * @param target - point to drag to\n   */\n  async drag(start, target) {\n    const promise = new Promise(resolve => {\n      __classPrivateFieldGet(this, _Mouse_client, \"f\").once('Input.dragIntercepted', event => {\n        return resolve(event.data);\n      });\n    });\n    await this.move(start.x, start.y);\n    await this.down();\n    await this.move(target.x, target.y);\n    return promise;\n  }\n  /**\n   * Dispatches a `dragenter` event.\n   * @param target - point for emitting `dragenter` event\n   * @param data - drag data containing items and operations mask\n   */\n  async dragEnter(target, data) {\n    await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchDragEvent', {\n      type: 'dragEnter',\n      x: target.x,\n      y: target.y,\n      modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n      data\n    });\n  }\n  /**\n   * Dispatches a `dragover` event.\n   * @param target - point for emitting `dragover` event\n   * @param data - drag data containing items and operations mask\n   */\n  async dragOver(target, data) {\n    await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchDragEvent', {\n      type: 'dragOver',\n      x: target.x,\n      y: target.y,\n      modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n      data\n    });\n  }\n  /**\n   * Performs a dragenter, dragover, and drop in sequence.\n   * @param target - point to drop on\n   * @param data - drag data containing items and operations mask\n   */\n  async drop(target, data) {\n    await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchDragEvent', {\n      type: 'drop',\n      x: target.x,\n      y: target.y,\n      modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n      data\n    });\n  }\n  /**\n   * Performs a drag, dragenter, dragover, and drop in sequence.\n   * @param start - point to drag from\n   * @param target - point to drop on\n   * @param options - An object of options. Accepts delay which,\n   * if specified, is the time to wait between `dragover` and `drop` in milliseconds.\n   * Defaults to 0.\n   */\n  async dragAndDrop(start, target, options = {}) {\n    const {\n      delay = null\n    } = options;\n    const data = await this.drag(start, target);\n    await this.dragEnter(target, data);\n    await this.dragOver(target, data);\n    if (delay) {\n      await new Promise(resolve => {\n        return setTimeout(resolve, delay);\n      });\n    }\n    await this.drop(target, data);\n    await this.up();\n  }\n}\n_Mouse_client = new WeakMap(), _Mouse_keyboard = new WeakMap(), _Mouse__state = new WeakMap(), _Mouse_transactions = new WeakMap(), _Mouse_instances = new WeakSet(), _Mouse_state_get = function _Mouse_state_get() {\n  return Object.assign({\n    ...__classPrivateFieldGet(this, _Mouse__state, \"f\")\n  }, ...__classPrivateFieldGet(this, _Mouse_transactions, \"f\"));\n}, _Mouse_createTransaction = function _Mouse_createTransaction() {\n  const transaction = {};\n  __classPrivateFieldGet(this, _Mouse_transactions, \"f\").push(transaction);\n  const popTransaction = () => {\n    __classPrivateFieldGet(this, _Mouse_transactions, \"f\").splice(__classPrivateFieldGet(this, _Mouse_transactions, \"f\").indexOf(transaction), 1);\n  };\n  return {\n    update: updates => {\n      Object.assign(transaction, updates);\n    },\n    commit: () => {\n      __classPrivateFieldSet(this, _Mouse__state, {\n        ...__classPrivateFieldGet(this, _Mouse__state, \"f\"),\n        ...transaction\n      }, \"f\");\n      popTransaction();\n    },\n    rollback: popTransaction\n  };\n}, _Mouse_withTransaction =\n/**\n * This is a shortcut for a typical update, commit/rollback lifecycle based on\n * the error of the action.\n */\nasync function _Mouse_withTransaction(action) {\n  const {\n    update,\n    commit,\n    rollback\n  } = __classPrivateFieldGet(this, _Mouse_instances, \"m\", _Mouse_createTransaction).call(this);\n  try {\n    await action(update);\n    commit();\n  } catch (error) {\n    rollback();\n    throw error;\n  }\n};\n/**\n * The Touchscreen class exposes touchscreen events.\n * @public\n */\nexport class Touchscreen {\n  /**\n   * @internal\n   */\n  constructor(client, keyboard) {\n    _Touchscreen_client.set(this, void 0);\n    _Touchscreen_keyboard.set(this, void 0);\n    __classPrivateFieldSet(this, _Touchscreen_client, client, \"f\");\n    __classPrivateFieldSet(this, _Touchscreen_keyboard, keyboard, \"f\");\n  }\n  /**\n   * Dispatches a `touchstart` and `touchend` event.\n   * @param x - Horizontal position of the tap.\n   * @param y - Vertical position of the tap.\n   */\n  async tap(x, y) {\n    await this.touchStart(x, y);\n    await this.touchEnd();\n  }\n  /**\n   * Dispatches a `touchstart` event.\n   * @param x - Horizontal position of the tap.\n   * @param y - Vertical position of the tap.\n   */\n  async touchStart(x, y) {\n    const touchPoints = [{\n      x: Math.round(x),\n      y: Math.round(y)\n    }];\n    await __classPrivateFieldGet(this, _Touchscreen_client, \"f\").send('Input.dispatchTouchEvent', {\n      type: 'touchStart',\n      touchPoints,\n      modifiers: __classPrivateFieldGet(this, _Touchscreen_keyboard, \"f\")._modifiers\n    });\n  }\n  /**\n   * Dispatches a `touchMove` event.\n   * @param x - Horizontal position of the move.\n   * @param y - Vertical position of the move.\n   */\n  async touchMove(x, y) {\n    const movePoints = [{\n      x: Math.round(x),\n      y: Math.round(y)\n    }];\n    await __classPrivateFieldGet(this, _Touchscreen_client, \"f\").send('Input.dispatchTouchEvent', {\n      type: 'touchMove',\n      touchPoints: movePoints,\n      modifiers: __classPrivateFieldGet(this, _Touchscreen_keyboard, \"f\")._modifiers\n    });\n  }\n  /**\n   * Dispatches a `touchend` event.\n   */\n  async touchEnd() {\n    await __classPrivateFieldGet(this, _Touchscreen_client, \"f\").send('Input.dispatchTouchEvent', {\n      type: 'touchEnd',\n      touchPoints: [],\n      modifiers: __classPrivateFieldGet(this, _Touchscreen_keyboard, \"f\")._modifiers\n    });\n  }\n}\n_Touchscreen_client = new WeakMap(), _Touchscreen_keyboard = new WeakMap();","map":{"version":3,"names":["assert","_keyDefinitions","Keyboard","constructor","client","_Keyboard_client","set","_Keyboard_pressedKeys","Set","_modifiers","__classPrivateFieldSet","down","key","options","text","undefined","commands","description","__classPrivateFieldGet","_Keyboard_instances","_Keyboard_keyDescriptionForString","call","autoRepeat","has","code","add","_Keyboard_modifierBit","send","type","modifiers","windowsVirtualKeyCode","keyCode","unmodifiedText","location","isKeypad","up","delete","sendCharacter","char","charIsKey","delay","press","Promise","f","setTimeout","keyString","shift","definition","shiftKey","shiftKeyCode","length","shiftText","MouseButton","Object","freeze","Left","Right","Middle","Back","Forward","getFlag","button","getButtonFromPressedButtons","buttons","Mouse","keyboard","_Mouse_client","_Mouse_keyboard","_Mouse__state","position","x","y","_Mouse_transactions","move","steps","from","_Mouse_instances","_Mouse_state_get","to","i","_Mouse_withTransaction","updateState","clickCount","flag","Error","click","count","actions","push","all","resolve","wheel","deltaX","deltaY","pointerType","drag","start","target","promise","once","event","data","dragEnter","dragOver","drop","dragAndDrop","assign","_Mouse_createTransaction","transaction","popTransaction","splice","indexOf","update","updates","commit","rollback","action","error","Touchscreen","_Touchscreen_client","_Touchscreen_keyboard","tap","touchStart","touchEnd","touchPoints","Math","round","touchMove","movePoints"],"sources":["../../../../src/common/Input.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}