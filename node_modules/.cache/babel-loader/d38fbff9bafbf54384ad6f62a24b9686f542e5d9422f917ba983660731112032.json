{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2023 Google LLC.\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NetworkRequest = void 0;\nconst deferred_1 = require(\"../../../utils/deferred\");\nconst protocol_1 = require(\"../../../protocol/protocol\");\nclass NetworkRequest {\n  static #unknown = 'UNKNOWN';\n  requestId;\n  #eventManager;\n  #requestWillBeSentEvent;\n  #requestWillBeSentExtraInfoEvent;\n  #responseReceivedEvent;\n  #responseReceivedExtraInfoEvent;\n  #beforeRequestSentDeferred;\n  #responseReceivedDeferred;\n  constructor(requestId, eventManager) {\n    this.requestId = requestId;\n    this.#eventManager = eventManager;\n    this.#beforeRequestSentDeferred = new deferred_1.Deferred();\n    this.#responseReceivedDeferred = new deferred_1.Deferred();\n  }\n  onRequestWillBeSentEvent(requestWillBeSentEvent) {\n    if (this.#requestWillBeSentEvent !== undefined) {\n      throw new Error('RequestWillBeSentEvent is already set');\n    }\n    this.#requestWillBeSentEvent = requestWillBeSentEvent;\n    if (this.#requestWillBeSentExtraInfoEvent !== undefined) {\n      this.#beforeRequestSentDeferred.resolve();\n    }\n    this.#sendBeforeRequestEvent();\n  }\n  onRequestWillBeSentExtraInfoEvent(requestWillBeSentExtraInfoEvent) {\n    if (this.#requestWillBeSentExtraInfoEvent !== undefined) {\n      throw new Error('RequestWillBeSentExtraInfoEvent is already set');\n    }\n    this.#requestWillBeSentExtraInfoEvent = requestWillBeSentExtraInfoEvent;\n    if (this.#requestWillBeSentEvent !== undefined) {\n      this.#beforeRequestSentDeferred.resolve();\n    }\n  }\n  onResponseReceivedEvent(responseReceivedEvent) {\n    if (this.#responseReceivedEvent !== undefined) {\n      throw new Error('ResponseReceivedEvent is already set');\n    }\n    this.#responseReceivedEvent = responseReceivedEvent;\n    if (this.#responseReceivedExtraInfoEvent !== undefined) {\n      this.#responseReceivedDeferred.resolve();\n    }\n    this.#sendResponseReceivedEvent();\n  }\n  onResponseReceivedEventExtraInfo(responseReceivedExtraInfoEvent) {\n    if (this.#responseReceivedExtraInfoEvent !== undefined) {\n      throw new Error('ResponseReceivedExtraInfoEvent is already set');\n    }\n    this.#responseReceivedExtraInfoEvent = responseReceivedExtraInfoEvent;\n    if (this.#responseReceivedEvent !== undefined) {\n      this.#responseReceivedDeferred.resolve();\n    }\n  }\n  onLoadingFailedEvent(loadingFailedEvent) {\n    this.#beforeRequestSentDeferred.resolve();\n    this.#responseReceivedDeferred.reject(loadingFailedEvent);\n    const params = {\n      ...this.#getBaseEventParams(),\n      errorText: loadingFailedEvent.errorText\n    };\n    this.#eventManager.registerEvent({\n      method: protocol_1.Network.EventNames.FetchErrorEvent,\n      params\n    }, this.#requestWillBeSentEvent?.frameId ?? null);\n  }\n  #sendBeforeRequestEvent() {\n    if (!this.#isIgnoredEvent()) {\n      this.#eventManager.registerPromiseEvent(this.#beforeRequestSentDeferred.then(() => this.#getBeforeRequestEvent()), this.#requestWillBeSentEvent?.frameId ?? null, protocol_1.Network.EventNames.BeforeRequestSentEvent);\n    }\n  }\n  #getBeforeRequestEvent() {\n    if (this.#requestWillBeSentEvent === undefined) {\n      throw new Error('RequestWillBeSentEvent is not set');\n    }\n    const params = {\n      ...this.#getBaseEventParams(),\n      initiator: {\n        type: this.#getInitiatorType()\n      }\n    };\n    return {\n      method: protocol_1.Network.EventNames.BeforeRequestSentEvent,\n      params\n    };\n  }\n  #getBaseEventParams() {\n    return {\n      context: this.#requestWillBeSentEvent?.frameId ?? null,\n      navigation: this.#requestWillBeSentEvent?.loaderId ?? null,\n      // TODO: implement.\n      redirectCount: 0,\n      request: this.#getRequestData(),\n      // Timestamp should be in milliseconds, while CDP provides it in seconds.\n      timestamp: Math.round((this.#requestWillBeSentEvent?.wallTime ?? 0) * 1000)\n    };\n  }\n  #getRequestData() {\n    const cookies = this.#requestWillBeSentExtraInfoEvent === undefined ? [] : NetworkRequest.#getCookies(this.#requestWillBeSentExtraInfoEvent.associatedCookies);\n    return {\n      request: this.#requestWillBeSentEvent?.requestId ?? NetworkRequest.#unknown,\n      url: this.#requestWillBeSentEvent?.request.url ?? NetworkRequest.#unknown,\n      method: this.#requestWillBeSentEvent?.request.method ?? NetworkRequest.#unknown,\n      headers: Object.keys(this.#requestWillBeSentEvent?.request.headers ?? []).map(key => ({\n        name: key,\n        value: this.#requestWillBeSentEvent?.request.headers[key]\n      })),\n      cookies,\n      // TODO: implement.\n      headersSize: -1,\n      // TODO: implement.\n      bodySize: 0,\n      timings: {\n        // TODO: implement.\n        timeOrigin: 0,\n        // TODO: implement.\n        requestTime: 0,\n        // TODO: implement.\n        redirectStart: 0,\n        // TODO: implement.\n        redirectEnd: 0,\n        // TODO: implement.\n        fetchStart: 0,\n        // TODO: implement.\n        dnsStart: 0,\n        // TODO: implement.\n        dnsEnd: 0,\n        // TODO: implement.\n        connectStart: 0,\n        // TODO: implement.\n        connectEnd: 0,\n        // TODO: implement.\n        tlsStart: 0,\n        // TODO: implement.\n        tlsEnd: 0,\n        // TODO: implement.\n        requestStart: 0,\n        // TODO: implement.\n        responseStart: 0,\n        // TODO: implement.\n        responseEnd: 0\n      }\n    };\n  }\n  #getInitiatorType() {\n    switch (this.#requestWillBeSentEvent?.initiator.type) {\n      case 'parser':\n      case 'script':\n      case 'preflight':\n        return this.#requestWillBeSentEvent.initiator.type;\n      default:\n        return 'other';\n    }\n  }\n  static #getCookiesSameSite(cdpSameSiteValue) {\n    switch (cdpSameSiteValue) {\n      case 'Strict':\n        return 'strict';\n      case 'Lax':\n        return 'lax';\n      default:\n        return 'none';\n    }\n  }\n  static #getCookies(associatedCookies) {\n    return associatedCookies.map(cookieInfo => {\n      return {\n        name: cookieInfo.cookie.name,\n        value: cookieInfo.cookie.value,\n        domain: cookieInfo.cookie.domain,\n        path: cookieInfo.cookie.path,\n        expires: cookieInfo.cookie.expires,\n        size: cookieInfo.cookie.size,\n        httpOnly: cookieInfo.cookie.httpOnly,\n        secure: cookieInfo.cookie.secure,\n        sameSite: NetworkRequest.#getCookiesSameSite(cookieInfo.cookie.sameSite)\n      };\n    });\n  }\n  #sendResponseReceivedEvent() {\n    if (!this.#isIgnoredEvent()) {\n      // Wait for both ResponseReceived and ResponseReceivedExtraInfo events.\n      this.#eventManager.registerPromiseEvent(this.#responseReceivedDeferred.then(() => this.#getResponseReceivedEvent()), this.#responseReceivedEvent?.frameId ?? null, protocol_1.Network.EventNames.ResponseCompletedEvent);\n    }\n  }\n  #getResponseReceivedEvent() {\n    if (this.#responseReceivedEvent === undefined) {\n      throw new Error('ResponseReceivedEvent is not set');\n    }\n    if (this.#requestWillBeSentEvent === undefined) {\n      throw new Error('RequestWillBeSentEvent is not set');\n    }\n    return {\n      method: protocol_1.Network.EventNames.ResponseCompletedEvent,\n      params: {\n        ...this.#getBaseEventParams(),\n        response: {\n          url: this.#responseReceivedEvent.response.url,\n          protocol: this.#responseReceivedEvent.response.protocol,\n          status: this.#responseReceivedEvent.response.status,\n          statusText: this.#responseReceivedEvent.response.statusText,\n          // Check if this is correct.\n          fromCache: this.#responseReceivedEvent.response.fromDiskCache || this.#responseReceivedEvent.response.fromPrefetchCache,\n          // TODO: implement.\n          headers: this.#getHeaders(this.#responseReceivedEvent.response.headers),\n          mimeType: this.#responseReceivedEvent.response.mimeType,\n          bytesReceived: this.#responseReceivedEvent.response.encodedDataLength,\n          headersSize: this.#responseReceivedExtraInfoEvent?.headersText?.length ?? -1,\n          // TODO: consider removing from spec.\n          bodySize: -1,\n          content: {\n            // TODO: consider removing from spec.\n            size: -1\n          }\n        }\n      }\n    };\n  }\n  #getHeaders(headers) {\n    return Object.keys(headers).map(key => ({\n      name: key,\n      value: headers[key]\n    }));\n  }\n  #isIgnoredEvent() {\n    return this.#requestWillBeSentEvent?.request.url.endsWith('/favicon.ico') ?? false;\n  }\n}\nexports.NetworkRequest = NetworkRequest;","map":{"version":3,"names":["deferred_1","require","protocol_1","NetworkRequest","unknown","requestId","eventManager","requestWillBeSentEvent","requestWillBeSentExtraInfoEvent","responseReceivedEvent","responseReceivedExtraInfoEvent","beforeRequestSentDeferred","responseReceivedDeferred","constructor","Deferred","onRequestWillBeSentEvent","undefined","Error","resolve","sendBeforeRequestEvent","onRequestWillBeSentExtraInfoEvent","onResponseReceivedEvent","sendResponseReceivedEvent","onResponseReceivedEventExtraInfo","onLoadingFailedEvent","loadingFailedEvent","reject","params","getBaseEventParams","errorText","registerEvent","method","Network","EventNames","FetchErrorEvent","frameId","#sendBeforeRequestEvent","isIgnoredEvent","registerPromiseEvent","then","getBeforeRequestEvent","BeforeRequestSentEvent","#getBeforeRequestEvent","initiator","type","getInitiatorType","#getBaseEventParams","context","navigation","loaderId","redirectCount","request","getRequestData","timestamp","Math","round","wallTime","#getRequestData","cookies","getCookies","associatedCookies","url","headers","Object","keys","map","key","name","value","headersSize","bodySize","timings","timeOrigin","requestTime","redirectStart","redirectEnd","fetchStart","dnsStart","dnsEnd","connectStart","connectEnd","tlsStart","tlsEnd","requestStart","responseStart","responseEnd","#getInitiatorType","getCookiesSameSite","#getCookiesSameSite","cdpSameSiteValue","#getCookies","cookieInfo","cookie","domain","path","expires","size","httpOnly","secure","sameSite","#sendResponseReceivedEvent","getResponseReceivedEvent","ResponseCompletedEvent","#getResponseReceivedEvent","response","protocol","status","statusText","fromCache","fromDiskCache","fromPrefetchCache","getHeaders","mimeType","bytesReceived","encodedDataLength","headersText","length","content","#getHeaders","#isIgnoredEvent","endsWith","exports"],"sources":["../../../../../src/bidiMapper/domains/network/networkRequest.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}