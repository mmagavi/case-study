{"ast":null,"code":"import { JsonMarkdownStructuredOutputParser } from \"./structured.js\";\nimport { OutputParserException } from \"../schema/output_parser.js\";\n/**\n * A type of output parser that extends the\n * JsonMarkdownStructuredOutputParser. It is used to parse the output of a\n * router in LangChain. The class takes a schema and an optional\n * RouterOutputParserInput object as parameters.\n */\nexport class RouterOutputParser extends JsonMarkdownStructuredOutputParser {\n  constructor(schema, options) {\n    super(schema);\n    Object.defineProperty(this, \"defaultDestination\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"DEFAULT\"\n    });\n    this.defaultDestination = options?.defaultDestination ?? this.defaultDestination;\n  }\n  /**\n   * Overrides the parse method from JsonMarkdownStructuredOutputParser.\n   * This method takes a string as input, attempts to parse it, and returns\n   * the parsed text. If the destination of the parsed text matches the\n   * defaultDestination, the destination is set to null. If the parsing\n   * fails, an OutputParserException is thrown.\n   * @param text The text to be parsed.\n   * @returns The parsed text as a Promise.\n   */\n  async parse(text) {\n    try {\n      const parsedText = await super.parse(text);\n      if (parsedText.destination?.toLowerCase() === this.defaultDestination.toLowerCase()) {\n        parsedText.destination = null;\n      }\n      return parsedText;\n    } catch (e) {\n      throw new OutputParserException(`Failed to parse. Text: \"${text}\". Error: ${e}`, text);\n    }\n  }\n}","map":{"version":3,"names":["JsonMarkdownStructuredOutputParser","OutputParserException","RouterOutputParser","constructor","schema","options","Object","defineProperty","enumerable","configurable","writable","value","defaultDestination","parse","text","parsedText","destination","toLowerCase","e"],"sources":["/Users/mayamagavi/instalily/case-study/node_modules/langchain/dist/output_parsers/router.js"],"sourcesContent":["import { JsonMarkdownStructuredOutputParser } from \"./structured.js\";\nimport { OutputParserException } from \"../schema/output_parser.js\";\n/**\n * A type of output parser that extends the\n * JsonMarkdownStructuredOutputParser. It is used to parse the output of a\n * router in LangChain. The class takes a schema and an optional\n * RouterOutputParserInput object as parameters.\n */\nexport class RouterOutputParser extends JsonMarkdownStructuredOutputParser {\n    constructor(schema, options) {\n        super(schema);\n        Object.defineProperty(this, \"defaultDestination\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"DEFAULT\"\n        });\n        this.defaultDestination =\n            options?.defaultDestination ?? this.defaultDestination;\n    }\n    /**\n     * Overrides the parse method from JsonMarkdownStructuredOutputParser.\n     * This method takes a string as input, attempts to parse it, and returns\n     * the parsed text. If the destination of the parsed text matches the\n     * defaultDestination, the destination is set to null. If the parsing\n     * fails, an OutputParserException is thrown.\n     * @param text The text to be parsed.\n     * @returns The parsed text as a Promise.\n     */\n    async parse(text) {\n        try {\n            const parsedText = await super.parse(text);\n            if (parsedText.destination?.toLowerCase() ===\n                this.defaultDestination.toLowerCase()) {\n                parsedText.destination = null;\n            }\n            return parsedText;\n        }\n        catch (e) {\n            throw new OutputParserException(`Failed to parse. Text: \"${text}\". Error: ${e}`, text);\n        }\n    }\n}\n"],"mappings":"AAAA,SAASA,kCAAkC,QAAQ,iBAAiB;AACpE,SAASC,qBAAqB,QAAQ,4BAA4B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,SAASF,kCAAkC,CAAC;EACvEG,WAAWA,CAACC,MAAM,EAAEC,OAAO,EAAE;IACzB,KAAK,CAACD,MAAM,CAAC;IACbE,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,oBAAoB,EAAE;MAC9CC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;IACF,IAAI,CAACC,kBAAkB,GACnBP,OAAO,EAAEO,kBAAkB,IAAI,IAAI,CAACA,kBAAkB;EAC9D;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,KAAKA,CAACC,IAAI,EAAE;IACd,IAAI;MACA,MAAMC,UAAU,GAAG,MAAM,KAAK,CAACF,KAAK,CAACC,IAAI,CAAC;MAC1C,IAAIC,UAAU,CAACC,WAAW,EAAEC,WAAW,CAAC,CAAC,KACrC,IAAI,CAACL,kBAAkB,CAACK,WAAW,CAAC,CAAC,EAAE;QACvCF,UAAU,CAACC,WAAW,GAAG,IAAI;MACjC;MACA,OAAOD,UAAU;IACrB,CAAC,CACD,OAAOG,CAAC,EAAE;MACN,MAAM,IAAIjB,qBAAqB,CAAE,2BAA0Ba,IAAK,aAAYI,CAAE,EAAC,EAAEJ,IAAI,CAAC;IAC1F;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}