{"ast":null,"code":"require('dotenv').config();\nlet conversationHistory = [{\n  role: \"system\",\n  content: `You are an AI assistant helping a user on an appliance part website, PartSelect.com. \n    You will only answer questions relating to PartSelect.com. You keep your responses helpful and short.\n    If the user wants to learn about, install, or replace a part but does not provide a part ID (a number beginning with PS), ask them for the part ID. Redirect them to\n    find the part ID by searching on PartSelect.com.\n    If the user wants advice about repairing their appliances but does not mention a specific part, give them instructions on how to find the specific\n    part that is not working as well as general advice.\n    `\n}];\nexport const getAIMessage = async userQuery => {\n  conversationHistory.push({\n    role: \"user\",\n    content: userQuery\n  });\n  try {\n    const completion = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${process.env.OPENAI_API_KEY}`\n      },\n      body: JSON.stringify({\n        model: \"gpt-4o-mini\",\n        messages: conversationHistory\n      })\n    });\n\n    // Check the response\n    if (!completion.ok) {\n      throw new Error(`API Error: ${completion.statusText}`);\n    }\n    const data = await completion.json();\n    if (data.choices && data.choices.length > 0) {\n      let get_response = data.choices[0].message.content;\n      console.log(get_response);\n      conversationHistory.push({\n        role: \"assistant\",\n        content: get_response\n      });\n      return get_response;\n    } else {\n      throw new Error(\"No choices in the response\");\n    }\n  } catch (error) {\n    return \"Sorry, something went wrong with the request. Please try again later.\";\n  }\n};","map":{"version":3,"names":["require","config","conversationHistory","role","content","getAIMessage","userQuery","push","completion","fetch","method","headers","process","env","OPENAI_API_KEY","body","JSON","stringify","model","messages","ok","Error","statusText","data","json","choices","length","get_response","message","console","log","error"],"sources":["/Users/mayamagavi/instalily/case-study/src/api/api.js"],"sourcesContent":["\nrequire('dotenv').config();\n\nlet conversationHistory = [\n  { role: \"system\", content: `You are an AI assistant helping a user on an appliance part website, PartSelect.com. \n    You will only answer questions relating to PartSelect.com. You keep your responses helpful and short.\n    If the user wants to learn about, install, or replace a part but does not provide a part ID (a number beginning with PS), ask them for the part ID. Redirect them to\n    find the part ID by searching on PartSelect.com.\n    If the user wants advice about repairing their appliances but does not mention a specific part, give them instructions on how to find the specific\n    part that is not working as well as general advice.\n    ` }\n];\n\nexport const getAIMessage = async (userQuery) => {\n\n  conversationHistory.push({ role: \"user\", content: userQuery });\n\n  try {\n    const completion = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${process.env.OPENAI_API_KEY}`,\n      },\n      body: JSON.stringify({\n          model: \"gpt-4o-mini\",\n          messages: conversationHistory\n      })\n    });\n\n    // Check the response\n    if (!completion.ok) {\n      throw new Error(`API Error: ${completion.statusText}`);\n    }\n\n    const data = await completion.json();\n\n    if (data.choices && data.choices.length > 0) {\n      let get_response = data.choices[0].message.content;\n      console.log(get_response);\n      conversationHistory.push({ role: \"assistant\", content: get_response });\n      return get_response;\n    } else {\n      throw new Error(\"No choices in the response\");\n    }\n  }  catch (error) {\n    return \"Sorry, something went wrong with the request. Please try again later.\";\n  }\n\n};"],"mappings":"AACAA,OAAO,CAAC,QAAQ,CAAC,CAACC,MAAM,CAAC,CAAC;AAE1B,IAAIC,mBAAmB,GAAG,CACxB;EAAEC,IAAI,EAAE,QAAQ;EAAEC,OAAO,EAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AAAM,CAAC,CACN;AAED,OAAO,MAAMC,YAAY,GAAG,MAAOC,SAAS,IAAK;EAE/CJ,mBAAmB,CAACK,IAAI,CAAC;IAAEJ,IAAI,EAAE,MAAM;IAAEC,OAAO,EAAEE;EAAU,CAAC,CAAC;EAE9D,IAAI;IACF,MAAME,UAAU,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;MAC3EC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAASC,OAAO,CAACC,GAAG,CAACC,cAAe;MAC1D,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBC,KAAK,EAAE,aAAa;QACpBC,QAAQ,EAAEjB;MACd,CAAC;IACH,CAAC,CAAC;;IAEF;IACA,IAAI,CAACM,UAAU,CAACY,EAAE,EAAE;MAClB,MAAM,IAAIC,KAAK,CAAE,cAAab,UAAU,CAACc,UAAW,EAAC,CAAC;IACxD;IAEA,MAAMC,IAAI,GAAG,MAAMf,UAAU,CAACgB,IAAI,CAAC,CAAC;IAEpC,IAAID,IAAI,CAACE,OAAO,IAAIF,IAAI,CAACE,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;MAC3C,IAAIC,YAAY,GAAGJ,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACG,OAAO,CAACxB,OAAO;MAClDyB,OAAO,CAACC,GAAG,CAACH,YAAY,CAAC;MACzBzB,mBAAmB,CAACK,IAAI,CAAC;QAAEJ,IAAI,EAAE,WAAW;QAAEC,OAAO,EAAEuB;MAAa,CAAC,CAAC;MACtE,OAAOA,YAAY;IACrB,CAAC,MAAM;MACL,MAAM,IAAIN,KAAK,CAAC,4BAA4B,CAAC;IAC/C;EACF,CAAC,CAAE,OAAOU,KAAK,EAAE;IACf,OAAO,uEAAuE;EAChF;AAEF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}