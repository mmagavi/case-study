{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseDateDef = void 0;\nconst errorMessages_1 = require(\"../errorMessages\");\nfunction parseDateDef(def, refs) {\n  if (refs.dateStrategy == \"integer\") {\n    return integerDateParser(def, refs);\n  } else {\n    return {\n      type: \"string\",\n      format: \"date-time\"\n    };\n  }\n}\nexports.parseDateDef = parseDateDef;\nconst integerDateParser = (def, refs) => {\n  const res = {\n    type: \"integer\",\n    format: \"unix-time\"\n  };\n  for (const check of def.checks) {\n    switch (check.kind) {\n      case \"min\":\n        if (refs.target === \"jsonSchema7\") {\n          (0, errorMessages_1.setResponseValueAndErrors)(res, \"minimum\", check.value,\n          // This is in milliseconds\n          check.message, refs);\n        }\n        break;\n      case \"max\":\n        if (refs.target === \"jsonSchema7\") {\n          (0, errorMessages_1.setResponseValueAndErrors)(res, \"maximum\", check.value,\n          // This is in milliseconds\n          check.message, refs);\n        }\n        break;\n    }\n  }\n  return res;\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","parseDateDef","errorMessages_1","require","def","refs","dateStrategy","integerDateParser","type","format","res","check","checks","kind","target","setResponseValueAndErrors","message"],"sources":["/Users/mayamagavi/instalily/case-study/node_modules/zod-to-json-schema/src/parsers/date.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseDateDef = void 0;\nconst errorMessages_1 = require(\"../errorMessages\");\nfunction parseDateDef(def, refs) {\n    if (refs.dateStrategy == \"integer\") {\n        return integerDateParser(def, refs);\n    }\n    else {\n        return {\n            type: \"string\",\n            format: \"date-time\",\n        };\n    }\n}\nexports.parseDateDef = parseDateDef;\nconst integerDateParser = (def, refs) => {\n    const res = {\n        type: \"integer\",\n        format: \"unix-time\",\n    };\n    for (const check of def.checks) {\n        switch (check.kind) {\n            case \"min\":\n                if (refs.target === \"jsonSchema7\") {\n                    (0, errorMessages_1.setResponseValueAndErrors)(res, \"minimum\", check.value, // This is in milliseconds\n                    check.message, refs);\n                }\n                break;\n            case \"max\":\n                if (refs.target === \"jsonSchema7\") {\n                    (0, errorMessages_1.setResponseValueAndErrors)(res, \"maximum\", check.value, // This is in milliseconds\n                    check.message, refs);\n                }\n                break;\n        }\n    }\n    return res;\n};\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,YAAY,GAAG,KAAK,CAAC;AAC7B,MAAMC,eAAe,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACnD,SAASF,YAAYA,CAACG,GAAG,EAAEC,IAAI,EAAE;EAC7B,IAAIA,IAAI,CAACC,YAAY,IAAI,SAAS,EAAE;IAChC,OAAOC,iBAAiB,CAACH,GAAG,EAAEC,IAAI,CAAC;EACvC,CAAC,MACI;IACD,OAAO;MACHG,IAAI,EAAE,QAAQ;MACdC,MAAM,EAAE;IACZ,CAAC;EACL;AACJ;AACAV,OAAO,CAACE,YAAY,GAAGA,YAAY;AACnC,MAAMM,iBAAiB,GAAGA,CAACH,GAAG,EAAEC,IAAI,KAAK;EACrC,MAAMK,GAAG,GAAG;IACRF,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE;EACZ,CAAC;EACD,KAAK,MAAME,KAAK,IAAIP,GAAG,CAACQ,MAAM,EAAE;IAC5B,QAAQD,KAAK,CAACE,IAAI;MACd,KAAK,KAAK;QACN,IAAIR,IAAI,CAACS,MAAM,KAAK,aAAa,EAAE;UAC/B,CAAC,CAAC,EAAEZ,eAAe,CAACa,yBAAyB,EAAEL,GAAG,EAAE,SAAS,EAAEC,KAAK,CAACX,KAAK;UAAE;UAC5EW,KAAK,CAACK,OAAO,EAAEX,IAAI,CAAC;QACxB;QACA;MACJ,KAAK,KAAK;QACN,IAAIA,IAAI,CAACS,MAAM,KAAK,aAAa,EAAE;UAC/B,CAAC,CAAC,EAAEZ,eAAe,CAACa,yBAAyB,EAAEL,GAAG,EAAE,SAAS,EAAEC,KAAK,CAACX,KAAK;UAAE;UAC5EW,KAAK,CAACK,OAAO,EAAEX,IAAI,CAAC;QACxB;QACA;IACR;EACJ;EACA,OAAOK,GAAG;AACd,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}