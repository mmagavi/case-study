{"ast":null,"code":"import pRetry from \"p-retry\";\nimport PQueueMod from \"p-queue\";\nconst STATUS_NO_RETRY = [400, 401, 402, 403, 404, 405, 406, 407, 408, 409 // Conflict\n];\n/**\n * A class that can be used to make async calls with concurrency and retry logic.\n *\n * This is useful for making calls to any kind of \"expensive\" external resource,\n * be it because it's rate-limited, subject to network issues, etc.\n *\n * Concurrent calls are limited by the `maxConcurrency` parameter, which defaults\n * to `Infinity`. This means that by default, all calls will be made in parallel.\n *\n * Retries are limited by the `maxRetries` parameter, which defaults to 6. This\n * means that by default, each call will be retried up to 6 times, with an\n * exponential backoff between each attempt.\n */\nexport class AsyncCaller {\n  constructor(params) {\n    Object.defineProperty(this, \"maxConcurrency\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"maxRetries\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"queue\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.maxConcurrency = params.maxConcurrency ?? Infinity;\n    this.maxRetries = params.maxRetries ?? 6;\n    const PQueue = \"default\" in PQueueMod ? PQueueMod.default : PQueueMod;\n    this.queue = new PQueue({\n      concurrency: this.maxConcurrency\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  call(callable, ...args) {\n    return this.queue.add(() => pRetry(() => callable(...args).catch(error => {\n      // eslint-disable-next-line no-instanceof/no-instanceof\n      if (error instanceof Error) {\n        throw error;\n      } else {\n        throw new Error(error);\n      }\n    }), {\n      onFailedAttempt(error) {\n        if (error.message.startsWith(\"Cancel\") || error.message.startsWith(\"TimeoutError\") || error.name === \"TimeoutError\" || error.message.startsWith(\"AbortError\") || error.name === \"AbortError\") {\n          throw error;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (error?.code === \"ECONNABORTED\") {\n          throw error;\n        }\n        const status =\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        error?.response?.status ?? error?.status;\n        if (status && STATUS_NO_RETRY.includes(+status)) {\n          throw error;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (error?.error?.code === \"insufficient_quota\") {\n          const err = new Error(error?.message);\n          err.name = \"InsufficientQuotaError\";\n          throw err;\n        }\n      },\n      retries: this.maxRetries,\n      randomize: true\n      // If needed we can change some of the defaults here,\n      // but they're quite sensible.\n    }), {\n      throwOnTimeout: true\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callWithOptions(options, callable, ...args) {\n    // Note this doesn't cancel the underlying request,\n    // when available prefer to use the signal option of the underlying call\n    if (options.signal) {\n      return Promise.race([this.call(callable, ...args), new Promise((_, reject) => {\n        options.signal?.addEventListener(\"abort\", () => {\n          reject(new Error(\"AbortError\"));\n        });\n      })]);\n    }\n    return this.call(callable, ...args);\n  }\n  fetch(...args) {\n    return this.call(() => fetch(...args).then(res => res.ok ? res : Promise.reject(res)));\n  }\n}","map":{"version":3,"names":["pRetry","PQueueMod","STATUS_NO_RETRY","AsyncCaller","constructor","params","Object","defineProperty","enumerable","configurable","writable","value","maxConcurrency","Infinity","maxRetries","PQueue","default","queue","concurrency","call","callable","args","add","catch","error","Error","onFailedAttempt","message","startsWith","name","code","status","response","includes","err","retries","randomize","throwOnTimeout","callWithOptions","options","signal","Promise","race","_","reject","addEventListener","fetch","then","res","ok"],"sources":["/Users/mayamagavi/instalily/case-study/node_modules/langchain/dist/util/async_caller.js"],"sourcesContent":["import pRetry from \"p-retry\";\nimport PQueueMod from \"p-queue\";\nconst STATUS_NO_RETRY = [\n    400,\n    401,\n    402,\n    403,\n    404,\n    405,\n    406,\n    407,\n    408,\n    409, // Conflict\n];\n/**\n * A class that can be used to make async calls with concurrency and retry logic.\n *\n * This is useful for making calls to any kind of \"expensive\" external resource,\n * be it because it's rate-limited, subject to network issues, etc.\n *\n * Concurrent calls are limited by the `maxConcurrency` parameter, which defaults\n * to `Infinity`. This means that by default, all calls will be made in parallel.\n *\n * Retries are limited by the `maxRetries` parameter, which defaults to 6. This\n * means that by default, each call will be retried up to 6 times, with an\n * exponential backoff between each attempt.\n */\nexport class AsyncCaller {\n    constructor(params) {\n        Object.defineProperty(this, \"maxConcurrency\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxRetries\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"queue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxConcurrency = params.maxConcurrency ?? Infinity;\n        this.maxRetries = params.maxRetries ?? 6;\n        const PQueue = \"default\" in PQueueMod ? PQueueMod.default : PQueueMod;\n        this.queue = new PQueue({ concurrency: this.maxConcurrency });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    call(callable, ...args) {\n        return this.queue.add(() => pRetry(() => callable(...args).catch((error) => {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (error instanceof Error) {\n                throw error;\n            }\n            else {\n                throw new Error(error);\n            }\n        }), {\n            onFailedAttempt(error) {\n                if (error.message.startsWith(\"Cancel\") ||\n                    error.message.startsWith(\"TimeoutError\") ||\n                    error.name === \"TimeoutError\" ||\n                    error.message.startsWith(\"AbortError\") ||\n                    error.name === \"AbortError\") {\n                    throw error;\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                if (error?.code === \"ECONNABORTED\") {\n                    throw error;\n                }\n                const status = \n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                error?.response?.status ?? error?.status;\n                if (status && STATUS_NO_RETRY.includes(+status)) {\n                    throw error;\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                if (error?.error?.code === \"insufficient_quota\") {\n                    const err = new Error(error?.message);\n                    err.name = \"InsufficientQuotaError\";\n                    throw err;\n                }\n            },\n            retries: this.maxRetries,\n            randomize: true,\n            // If needed we can change some of the defaults here,\n            // but they're quite sensible.\n        }), { throwOnTimeout: true });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callWithOptions(options, callable, ...args) {\n        // Note this doesn't cancel the underlying request,\n        // when available prefer to use the signal option of the underlying call\n        if (options.signal) {\n            return Promise.race([\n                this.call(callable, ...args),\n                new Promise((_, reject) => {\n                    options.signal?.addEventListener(\"abort\", () => {\n                        reject(new Error(\"AbortError\"));\n                    });\n                }),\n            ]);\n        }\n        return this.call(callable, ...args);\n    }\n    fetch(...args) {\n        return this.call(() => fetch(...args).then((res) => (res.ok ? res : Promise.reject(res))));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}