{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _FileChooser_element, _FileChooser_multiple, _FileChooser_handled;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileChooser = void 0;\nconst assert_js_1 = require(\"../util/assert.js\");\n/**\n * File choosers let you react to the page requesting for a file.\n *\n * @remarks\n * `FileChooser` instances are returned via the {@link Page.waitForFileChooser} method.\n *\n * In browsers, only one file chooser can be opened at a time.\n * All file choosers must be accepted or canceled. Not doing so will prevent\n * subsequent file choosers from appearing.\n *\n * @example\n *\n * ```ts\n * const [fileChooser] = await Promise.all([\n *   page.waitForFileChooser(),\n *   page.click('#upload-file-button'), // some button that triggers file selection\n * ]);\n * await fileChooser.accept(['/tmp/myfile.pdf']);\n * ```\n *\n * @public\n */\nclass FileChooser {\n  /**\n   * @internal\n   */\n  constructor(element, event) {\n    _FileChooser_element.set(this, void 0);\n    _FileChooser_multiple.set(this, void 0);\n    _FileChooser_handled.set(this, false);\n    __classPrivateFieldSet(this, _FileChooser_element, element, \"f\");\n    __classPrivateFieldSet(this, _FileChooser_multiple, event.mode !== 'selectSingle', \"f\");\n  }\n  /**\n   * Whether file chooser allow for\n   * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#attr-multiple | multiple}\n   * file selection.\n   */\n  isMultiple() {\n    return __classPrivateFieldGet(this, _FileChooser_multiple, \"f\");\n  }\n  /**\n   * Accept the file chooser request with the given file paths.\n   *\n   * @remarks This will not validate whether the file paths exists. Also, if a\n   * path is relative, then it is resolved against the\n   * {@link https://nodejs.org/api/process.html#process_process_cwd | current working directory}.\n   * For locals script connecting to remote chrome environments, paths must be\n   * absolute.\n   */\n  async accept(paths) {\n    (0, assert_js_1.assert)(!__classPrivateFieldGet(this, _FileChooser_handled, \"f\"), 'Cannot accept FileChooser which is already handled!');\n    __classPrivateFieldSet(this, _FileChooser_handled, true, \"f\");\n    await __classPrivateFieldGet(this, _FileChooser_element, \"f\").uploadFile(...paths);\n  }\n  /**\n   * Closes the file chooser without selecting any files.\n   */\n  cancel() {\n    (0, assert_js_1.assert)(!__classPrivateFieldGet(this, _FileChooser_handled, \"f\"), 'Cannot cancel FileChooser which is already handled!');\n    __classPrivateFieldSet(this, _FileChooser_handled, true, \"f\");\n  }\n}\nexports.FileChooser = FileChooser;\n_FileChooser_element = new WeakMap(), _FileChooser_multiple = new WeakMap(), _FileChooser_handled = new WeakMap();","map":{"version":3,"names":["assert_js_1","require","FileChooser","constructor","element","event","_FileChooser_element","set","_FileChooser_multiple","_FileChooser_handled","__classPrivateFieldSet","mode","isMultiple","__classPrivateFieldGet","accept","paths","assert","uploadFile","cancel","exports"],"sources":["../../../../src/common/FileChooser.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,MAAAA,WAAA,GAAAC,OAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA,MAAaC,WAAW;EAKtB;;;EAGAC,YACEC,OAAwC,EACxCC,KAA2C;IAT7CC,oBAAA,CAAAC,GAAA;IACAC,qBAAA,CAAAD,GAAA;IACAE,oBAAA,CAAAF,GAAA,OAAW,KAAK;IASdG,sBAAA,KAAI,EAAAJ,oBAAA,EAAYF,OAAO;IACvBM,sBAAA,KAAI,EAAAF,qBAAA,EAAaH,KAAK,CAACM,IAAI,KAAK,cAAc;EAChD;EAEA;;;;;EAKAC,UAAUA,CAAA;IACR,OAAOC,sBAAA,KAAI,EAAAL,qBAAA,MAAU;EACvB;EAEA;;;;;;;;;EASA,MAAMM,MAAMA,CAACC,KAAe;IAC1B,IAAAf,WAAA,CAAAgB,MAAM,EACJ,CAACH,sBAAA,KAAI,EAAAJ,oBAAA,MAAS,EACd,qDAAqD,CACtD;IACDC,sBAAA,KAAI,EAAAD,oBAAA,EAAY,IAAI;IACpB,MAAMI,sBAAA,KAAI,EAAAP,oBAAA,MAAS,CAACW,UAAU,CAAC,GAAGF,KAAK,CAAC;EAC1C;EAEA;;;EAGAG,MAAMA,CAAA;IACJ,IAAAlB,WAAA,CAAAgB,MAAM,EACJ,CAACH,sBAAA,KAAI,EAAAJ,oBAAA,MAAS,EACd,qDAAqD,CACtD;IACDC,sBAAA,KAAI,EAAAD,oBAAA,EAAY,IAAI;EACtB;;AApDFU,OAAA,CAAAjB,WAAA,GAAAA,WAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}